
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'w~`p\xb9\xa4(\xd7\x1b/Z\x9c\x089\x04\xc3'
    
_lr_action_items = {'DO':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,87,100,124,125,126,127,128,129,130,131,132,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,101,-55,-53,-54,-56,-48,-51,-47,-52,-50,-49,]),'LNOT':([61,72,86,88,102,103,],[86,86,86,86,86,86,]),'RETURN':([48,79,83,101,115,121,138,],[73,73,73,73,73,73,73,]),'LPAREN':([4,5,7,10,12,13,15,16,17,29,30,31,32,33,34,56,59,61,62,63,71,72,73,86,88,91,92,102,103,106,107,108,109,110,111,],[-67,8,16,-66,16,26,16,16,29,16,16,16,16,-68,16,16,85,88,90,29,92,88,16,88,88,16,16,88,88,16,16,16,16,16,16,]),'THEN':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,93,100,124,125,126,127,128,129,130,131,132,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,115,-55,-53,-54,-56,-48,-51,-47,-52,-50,-49,]),'READ':([48,79,83,101,115,121,138,],[59,59,59,59,59,59,59,]),'LOR':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,87,93,100,104,124,125,126,127,128,129,130,131,132,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,103,103,-55,103,-53,-54,-56,-48,-51,-47,-52,-50,-49,]),'WHILE':([48,79,83,101,115,121,138,],[61,61,61,61,61,61,61,]),'PRINT':([48,79,83,101,115,121,138,],[62,62,62,62,62,62,62,]),'MINUS':([4,7,9,11,12,14,15,16,17,18,19,20,25,27,28,29,30,31,32,33,34,39,41,43,44,45,46,54,55,56,61,72,73,82,86,88,89,91,92,94,102,103,105,106,107,108,109,110,111,113,114,127,128,129,130,131,132,],[-67,12,-42,-64,12,-58,12,12,-57,-63,31,-65,-40,-39,31,12,12,12,12,-68,12,-41,31,-46,-44,-43,-45,-59,-38,12,12,12,12,31,12,12,31,12,12,31,12,12,31,12,12,12,12,12,12,31,31,31,31,31,31,31,31,]),'STRING':([7,12,15,16,29,30,31,32,34,56,61,72,73,81,86,88,90,91,92,102,103,106,107,108,109,110,111,117,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'BEGIN':([35,49,51,57,80,101,115,116,138,142,],[48,-19,79,-21,-18,121,121,-20,121,-22,]),'LE':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,89,105,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,111,111,]),'RPAREN':([4,8,9,10,11,14,17,18,20,21,22,23,25,27,28,29,33,38,39,40,41,42,43,44,45,46,52,53,54,55,82,99,100,104,105,112,114,119,124,125,126,127,128,129,130,131,132,],[-67,-69,-42,-66,-64,-58,-57,-63,-65,-26,35,-27,-40,-39,39,-69,-68,54,-41,55,-61,-62,-46,-44,-43,-45,-25,-28,-59,-38,-60,120,-55,126,39,133,134,-29,-53,-54,-56,-48,-51,-47,-52,-50,-49,]),'SEMI':([4,9,10,11,14,17,18,20,25,27,33,39,43,44,45,46,47,54,55,58,60,64,65,66,67,68,69,70,74,75,76,77,84,94,95,96,98,113,118,120,122,123,133,134,135,137,139,140,141,],[-67,-42,-66,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,57,-59,-38,83,-16,-9,-15,-5,-8,-17,-14,-13,-12,-11,-10,-7,-24,-36,116,83,-6,-33,-23,-37,-4,-32,-34,-35,-30,83,142,-3,-31,]),'NE':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,89,105,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,109,109,]),'LT':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,89,105,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,108,108,]),'PLUS':([4,7,9,11,12,14,15,16,17,18,19,20,25,27,28,29,30,31,32,33,34,39,41,43,44,45,46,54,55,56,61,72,73,82,86,88,89,91,92,94,102,103,105,106,107,108,109,110,111,113,114,127,128,129,130,131,132,],[-67,15,-42,-64,15,-58,15,15,-57,-63,32,-65,-40,-39,32,15,15,15,15,-68,15,-41,32,-46,-44,-43,-45,-59,-38,15,15,15,15,32,15,15,32,15,15,32,15,15,32,15,15,15,15,15,15,32,32,32,32,32,32,32,32,]),'COLON':([4,24,33,50,],[-67,37,-68,78,]),'ASSIGN':([4,33,63,],[-67,-68,91,]),'$end':([1,3,6,84,118,],[-2,0,-1,-24,-23,]),'GT':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,89,105,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,106,106,]),'END':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,58,60,64,65,66,67,68,69,70,74,75,76,77,94,96,98,113,120,122,123,133,134,135,137,140,141,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,84,-16,-9,-15,-5,-8,-17,-14,-13,-12,-11,-10,-7,-36,118,-6,-33,-37,-4,-32,-34,-35,-30,140,-3,-31,]),'DIVIDE':([4,9,11,14,17,18,19,20,25,27,28,33,39,41,43,44,45,46,54,55,82,89,94,105,113,114,127,128,129,130,131,132,],[-67,-42,-64,-58,-57,-63,30,-65,-40,-39,30,-68,-41,30,-46,30,30,-45,-59,-38,30,30,30,30,30,30,30,30,30,30,30,30,]),'SKIP':([48,79,83,101,115,121,138,],[70,70,70,70,70,70,70,]),'ELSE':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,60,64,65,67,68,69,70,74,75,76,77,94,113,120,122,123,133,134,135,140,141,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,-16,-9,-15,-8,-17,-14,-13,-12,-11,-10,-7,-36,-33,-37,-4,-32,-34,-35,138,-3,-31,]),'WRITE':([48,79,83,101,115,121,138,],[71,71,71,71,71,71,71,]),'GE':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,89,105,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,110,110,]),'LAND':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,87,93,100,104,124,125,126,127,128,129,130,131,132,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,102,102,-55,102,-53,102,-56,-48,-51,-47,-52,-50,-49,]),'FUNC':([0,1,3,6,35,49,51,57,80,84,116,118,142,],[2,-2,2,-1,2,-19,2,-21,-18,-24,-20,-23,-22,]),'INTEGER':([7,12,15,16,29,30,31,32,34,56,61,72,73,81,86,88,90,91,92,102,103,106,107,108,109,110,111,117,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'TIMES':([4,9,11,14,17,18,19,20,25,27,28,33,39,41,43,44,45,46,54,55,82,89,94,105,113,114,127,128,129,130,131,132,],[-67,-42,-64,-58,-57,-63,34,-65,-40,-39,34,-68,-41,34,-46,34,34,-45,-59,-38,34,34,34,34,34,34,34,34,34,34,34,34,]),'EQ':([4,9,11,14,17,18,20,25,27,33,39,43,44,45,46,54,55,89,105,],[-67,-42,-64,-58,-57,-63,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,107,107,]),'ID':([2,7,8,12,15,16,26,29,30,31,32,34,35,36,48,49,51,56,57,61,72,73,79,80,83,85,86,88,91,92,101,102,103,106,107,108,109,110,111,115,116,121,138,142,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-19,4,4,-21,4,4,4,4,-18,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-20,4,4,-22,]),'IF':([48,79,83,101,115,121,138,],[72,72,72,72,72,72,72,]),'LBRACKET':([4,10,53,95,],[7,-66,81,117,]),'FLOAT':([7,12,15,16,29,30,31,32,34,56,61,72,73,81,86,88,90,91,92,102,103,106,107,108,109,110,111,117,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'BREAK':([48,79,83,101,115,121,138,],[74,74,74,74,74,74,74,]),'TYPENAME':([7,12,15,16,29,30,31,32,34,37,56,61,72,73,78,86,88,91,92,102,103,106,107,108,109,110,111,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'RBRACKET':([4,9,11,14,17,18,19,20,25,27,33,39,43,44,45,46,54,55,97,136,],[-67,-42,-64,-58,-57,-63,33,-65,-40,-39,-68,-41,-46,-44,-43,-45,-59,-38,119,139,]),'COMMA':([4,8,9,10,11,14,17,18,20,21,22,23,25,27,29,33,39,40,41,42,43,44,45,46,52,53,54,55,82,119,],[-67,-69,-42,-66,-64,-58,-57,-63,-65,-26,36,-27,-40,-39,-69,-68,-41,56,-61,-62,-46,-44,-43,-45,-25,-28,-59,-38,-60,-29,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([48,79,121,],[58,96,137,]),'funcall':([7,12,15,16,29,30,31,32,34,48,56,61,72,73,79,83,86,88,91,92,101,102,103,106,107,108,109,110,111,115,121,138,],[9,9,9,9,9,9,9,9,9,60,9,9,9,9,60,60,9,9,9,9,60,9,9,9,9,9,9,9,9,60,60,60,]),'cond':([61,72,86,88,102,103,],[87,93,100,104,124,125,]),'if_else':([48,79,83,101,115,121,138,],[76,76,76,76,76,76,76,]),'id':([2,7,8,12,15,16,26,29,30,31,32,34,35,36,48,51,56,61,72,73,79,83,85,86,88,91,92,101,102,103,106,107,108,109,110,111,115,121,138,],[5,17,24,17,17,17,38,17,17,17,17,17,50,24,63,50,17,17,17,17,63,63,99,17,17,17,17,63,17,17,17,17,17,17,17,17,63,63,63,]),'locals':([35,],[51,]),'if':([48,79,83,101,115,121,138,],[64,64,64,64,64,64,64,]),'parameters':([8,],[22,]),'write':([48,79,83,101,115,121,138,],[65,65,65,65,65,65,65,]),'literal':([7,12,15,16,29,30,31,32,34,56,61,72,73,81,86,88,90,91,92,102,103,106,107,108,109,110,111,117,],[14,14,14,14,14,14,14,14,14,14,14,14,14,97,14,14,112,14,14,14,14,14,14,14,14,14,14,136,]),'program':([0,],[3,]),'statement':([48,79,83,101,115,121,138,],[66,66,98,122,122,66,122,]),'print':([48,79,83,101,115,121,138,],[67,67,67,67,67,67,67,]),'local':([35,51,],[49,80,]),'empty':([8,29,],[23,42,]),'function':([0,3,35,51,],[1,6,47,47,]),'return':([48,79,83,101,115,121,138,],[68,68,68,68,68,68,68,]),'read':([48,79,83,101,115,121,138,],[69,69,69,69,69,69,69,]),'exprlist':([29,],[40,]),'parm_declaration':([8,36,],[21,52,]),'st':([101,115,138,],[123,135,141,]),'typename':([7,12,15,16,29,30,31,32,34,37,56,61,72,73,78,86,88,91,92,102,103,106,107,108,109,110,111,],[13,13,13,13,13,13,13,13,13,53,13,13,13,13,95,13,13,13,13,13,13,13,13,13,13,13,13,]),'while':([48,79,83,101,115,121,138,],[75,75,75,75,75,75,75,]),'expression':([7,12,15,16,29,30,31,32,34,56,61,72,73,86,88,91,92,102,103,106,107,108,109,110,111,],[19,25,27,28,41,43,44,45,46,82,89,89,94,89,105,113,114,89,89,127,128,129,130,131,132,]),'assign':([48,79,83,101,115,121,138,],[77,77,77,77,77,77,77,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program function','program',2,'p_program','mpasparse.py',18),
  ('program -> function','program',1,'p_program','mpasparse.py',19),
  ('st -> BEGIN statements END','st',3,'p_st','mpasparse.py',31),
  ('st -> statement','st',1,'p_st_1','mpasparse.py',37),
  ('statements -> statement','statements',1,'p_statements','mpasparse.py',43),
  ('statements -> statements SEMI statement','statements',3,'p_statements_1','mpasparse.py',51),
  ('statement -> assign','statement',1,'p_statement','mpasparse.py',59),
  ('statement -> print','statement',1,'p_statement','mpasparse.py',60),
  ('statement -> if','statement',1,'p_statement','mpasparse.py',61),
  ('statement -> if_else','statement',1,'p_statement','mpasparse.py',62),
  ('statement -> while','statement',1,'p_statement','mpasparse.py',63),
  ('statement -> BREAK','statement',1,'p_statement','mpasparse.py',64),
  ('statement -> SKIP','statement',1,'p_statement','mpasparse.py',65),
  ('statement -> read','statement',1,'p_statement','mpasparse.py',66),
  ('statement -> write','statement',1,'p_statement','mpasparse.py',67),
  ('statement -> funcall','statement',1,'p_statement','mpasparse.py',68),
  ('statement -> return','statement',1,'p_statement','mpasparse.py',69),
  ('locals -> locals local','locals',2,'p_locals','mpasparse.py',81),
  ('locals -> local','locals',1,'p_locals_1','mpasparse.py',90),
  ('local -> id COLON typename SEMI','local',4,'p_local','mpasparse.py',96),
  ('local -> function SEMI','local',2,'p_local_1','mpasparse.py',102),
  ('local -> id COLON typename LBRACKET literal RBRACKET SEMI','local',7,'p_local_2','mpasparse.py',108),
  ('function -> FUNC id LPAREN parameters RPAREN locals BEGIN statements END','function',9,'p_fundecl','mpasparse.py',114),
  ('function -> FUNC id LPAREN parameters RPAREN BEGIN statements END','function',8,'p_fundecl_1','mpasparse.py',122),
  ('parameters -> parameters COMMA parm_declaration','parameters',3,'p_parameters','mpasparse.py',128),
  ('parameters -> parm_declaration','parameters',1,'p_parameters_1','mpasparse.py',135),
  ('parameters -> empty','parameters',1,'p_parameters_1','mpasparse.py',136),
  ('parm_declaration -> id COLON typename','parm_declaration',3,'p_parm_declaration','mpasparse.py',142),
  ('parm_declaration -> id COLON typename LBRACKET literal RBRACKET','parm_declaration',6,'p_parm_declaration_1','mpasparse.py',148),
  ('if -> IF cond THEN st','if',4,'p_if','mpasparse.py',154),
  ('if_else -> IF cond THEN st ELSE st','if_else',6,'p_if_else','mpasparse.py',160),
  ('while -> WHILE cond DO st','while',4,'p_while','mpasparse.py',166),
  ('assign -> id ASSIGN expression','assign',3,'p_assign','mpasparse.py',172),
  ('print -> PRINT LPAREN literal RPAREN','print',4,'p_print','mpasparse.py',178),
  ('write -> WRITE LPAREN expression RPAREN','write',4,'p_write','mpasparse.py',184),
  ('return -> RETURN expression','return',2,'p_return','mpasparse.py',190),
  ('read -> READ LPAREN id RPAREN','read',4,'p_read','mpasparse.py',196),
  ('funcall -> id LPAREN exprlist RPAREN','funcall',4,'p_expression_funcall_1','mpasparse.py',203),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','mpasparse.py',209),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','mpasparse.py',210),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','mpasparse.py',217),
  ('expression -> funcall','expression',1,'p_expression_funcall','mpasparse.py',223),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mpasparse.py',229),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mpasparse.py',230),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mpasparse.py',231),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mpasparse.py',232),
  ('cond -> expression LT expression','cond',3,'p_comp','mpasparse.py',246),
  ('cond -> expression GT expression','cond',3,'p_comp','mpasparse.py',247),
  ('cond -> expression LE expression','cond',3,'p_comp','mpasparse.py',248),
  ('cond -> expression GE expression','cond',3,'p_comp','mpasparse.py',249),
  ('cond -> expression EQ expression','cond',3,'p_comp','mpasparse.py',250),
  ('cond -> expression NE expression','cond',3,'p_comp','mpasparse.py',251),
  ('cond -> cond LAND cond','cond',3,'p_cond','mpasparse.py',269),
  ('cond -> cond LOR cond','cond',3,'p_cond','mpasparse.py',270),
  ('cond -> LNOT cond','cond',2,'p_cond','mpasparse.py',271),
  ('cond -> LPAREN cond RPAREN','cond',3,'p_cond_1','mpasparse.py',294),
  ('expression -> id','expression',1,'p_expression_1','mpasparse.py',300),
  ('expression -> literal','expression',1,'p_expression_1','mpasparse.py',301),
  ('expression -> typename LPAREN id RPAREN','expression',4,'p_expression_2','mpasparse.py',307),
  ('exprlist -> exprlist COMMA expression','exprlist',3,'p_exprlist','mpasparse.py',313),
  ('exprlist -> expression','exprlist',1,'p_exprlist_1','mpasparse.py',320),
  ('exprlist -> empty','exprlist',1,'p_exprlist_1','mpasparse.py',321),
  ('literal -> INTEGER','literal',1,'p_literal','mpasparse.py',329),
  ('literal -> FLOAT','literal',1,'p_literal','mpasparse.py',330),
  ('literal -> STRING','literal',1,'p_literal','mpasparse.py',331),
  ('typename -> TYPENAME','typename',1,'p_typename','mpasparse.py',337),
  ('id -> ID','id',1,'p_id','mpasparse.py',343),
  ('id -> ID LBRACKET expression RBRACKET','id',4,'p_id_2','mpasparse.py',349),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',355),
]
