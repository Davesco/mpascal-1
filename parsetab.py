
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'B\xaeM_\x9c\x1a\x98\xf0u\xe5\xafd_\xd9\xc7\xa3'
    
_lr_action_items = {'DO':([36,51,52,54,56,57,58,60,77,81,82,113,114,115,116,118,119,120,121,122,123,124,125,126,127,130,131,136,],[-66,-42,78,-65,-57,-63,-58,-64,-55,-40,-39,-53,-54,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'LNOT':([25,37,50,59,79,80,],[50,50,50,50,50,50,]),'RETURN':([15,44,47,78,103,110,138,],[38,38,38,38,38,38,38,]),'LPAREN':([4,23,25,26,35,36,37,38,50,53,55,59,61,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,132,],[6,49,59,63,65,67,59,69,59,69,69,59,85,69,69,69,69,69,59,59,69,69,69,69,69,69,69,69,69,69,69,69,]),'THEN':([36,51,54,56,57,58,60,68,77,81,82,113,114,115,116,118,119,120,121,122,123,124,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,103,-55,-40,-39,-53,-54,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'READ':([15,44,47,78,103,110,138,],[23,23,23,23,23,23,23,]),'LBRACKET':([20,36,71,76,],[46,66,106,66,]),'WHILE':([15,44,47,78,103,110,138,],[25,25,25,25,25,25,25,]),'PRINT':([15,44,47,78,103,110,138,],[26,26,26,26,26,26,26,]),'MINUS':([25,36,37,38,50,51,53,54,55,56,57,58,59,60,62,64,65,66,67,69,70,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,101,104,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,136,137,],[53,-66,53,53,53,-42,53,-65,53,-57,-63,-58,53,-64,95,53,53,53,53,53,95,53,53,-40,-39,95,53,53,53,53,53,53,53,53,53,53,53,95,95,95,95,95,-41,95,95,-46,95,95,95,95,95,-43,-45,-44,-67,-38,53,-59,95,]),'DIVIDE':([36,51,54,56,57,58,60,62,70,81,82,84,97,98,99,101,104,116,117,118,119,120,121,122,123,124,125,126,127,130,131,136,137,],[-66,-42,-65,-57,-63,-58,-64,87,87,-40,-39,87,87,87,87,87,87,-41,87,87,-46,87,87,87,87,87,87,-45,87,-67,-38,-59,87,]),'BEGIN':([11,16,18,21,45,78,103,105,138,142,],[15,-19,44,-22,-18,110,110,-20,110,-21,]),'LAND':([36,51,52,54,56,57,58,60,68,77,81,82,83,113,114,115,116,118,119,120,121,122,123,124,125,126,127,130,131,136,],[-66,-42,79,-65,-57,-63,-58,-64,79,-55,-40,-39,79,-53,79,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'RPAREN':([6,7,8,9,19,20,36,51,54,56,57,58,60,67,75,76,77,81,82,83,84,96,98,100,101,102,104,108,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,136,137,],[-68,-26,11,-27,-25,-28,-66,-42,-65,-57,-63,-58,-64,-68,109,-66,-55,-40,-39,115,116,128,129,131,-61,-62,116,-29,-53,-54,-56,-41,136,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,-60,]),'SEMI':([14,22,24,27,28,30,31,32,33,34,36,39,40,41,42,48,51,54,56,57,58,60,70,71,72,74,81,82,97,107,109,111,112,116,119,125,126,127,128,129,130,131,133,135,136,139,140,141,],[21,47,-16,-9,-15,-5,-8,-17,-14,-13,-66,-12,-11,-10,-7,-24,-42,-65,-57,-63,-58,-64,-36,105,47,-6,-40,-39,-33,-23,-37,-4,-32,-41,-46,-43,-45,-44,-34,-35,-67,-38,-30,47,-59,142,-3,-31,]),'NE':([36,51,54,56,57,58,60,62,81,82,84,116,119,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,90,-40,-39,90,-41,-46,-43,-45,-44,-67,-38,-59,]),'PLUS':([25,36,37,38,50,51,53,54,55,56,57,58,59,60,62,64,65,66,67,69,70,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,101,104,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,136,137,],[55,-66,55,55,55,-42,55,-65,55,-57,-63,-58,55,-64,93,55,55,55,55,55,93,55,55,-40,-39,93,55,55,55,55,55,55,55,55,55,55,55,93,93,93,93,93,-41,93,93,-46,93,93,93,93,93,-43,-45,-44,-67,-38,55,-59,93,]),'LT':([36,51,54,56,57,58,60,62,81,82,84,116,119,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,89,-40,-39,89,-41,-46,-43,-45,-44,-67,-38,-59,]),'COMMA':([6,7,8,9,19,20,36,51,54,56,57,58,60,67,81,82,100,101,102,108,116,119,125,126,127,130,131,136,137,],[-68,-26,12,-27,-25,-28,-66,-42,-65,-57,-63,-58,-64,-68,-40,-39,132,-61,-62,-29,-41,-46,-43,-45,-44,-67,-38,-59,-60,]),'COLON':([10,17,],[13,43,]),'ASSIGN':([29,36,130,],[64,-66,-67,]),'$end':([1,3,5,48,107,],[-2,0,-1,-24,-23,]),'GT':([36,51,54,56,57,58,60,62,81,82,84,116,119,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,86,-40,-39,86,-41,-46,-43,-45,-44,-67,-38,-59,]),'END':([22,24,27,28,30,31,32,33,34,36,39,40,41,42,51,54,56,57,58,60,70,72,74,81,82,97,109,111,112,116,119,125,126,127,128,129,130,131,133,135,136,140,141,],[48,-16,-9,-15,-5,-8,-17,-14,-13,-66,-12,-11,-10,-7,-42,-65,-57,-63,-58,-64,-36,107,-6,-40,-39,-33,-37,-4,-32,-41,-46,-43,-45,-44,-34,-35,-67,-38,-30,140,-59,-3,-31,]),'STRING':([25,37,38,46,50,53,55,59,63,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,106,132,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'SKIP':([15,44,47,78,103,110,138,],[34,34,34,34,34,34,34,]),'ELSE':([24,27,28,31,32,33,34,36,39,40,41,42,51,54,56,57,58,60,70,81,82,97,109,111,112,116,119,125,126,127,128,129,130,131,133,136,140,141,],[-16,-9,-15,-8,-17,-14,-13,-66,-12,-11,-10,-7,-42,-65,-57,-63,-58,-64,-36,-40,-39,-33,-37,-4,-32,-41,-46,-43,-45,-44,-34,-35,-67,-38,138,-59,-3,-31,]),'WRITE':([15,44,47,78,103,110,138,],[35,35,35,35,35,35,35,]),'GE':([36,51,54,56,57,58,60,62,81,82,84,116,119,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,91,-40,-39,91,-41,-46,-43,-45,-44,-67,-38,-59,]),'LE':([36,51,54,56,57,58,60,62,81,82,84,116,119,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,92,-40,-39,92,-41,-46,-43,-45,-44,-67,-38,-59,]),'FUNC':([0,1,3,5,11,16,18,21,45,48,105,107,142,],[2,-2,2,-1,2,-19,2,-22,-18,-24,-20,-23,-21,]),'INTEGER':([25,37,38,46,50,53,55,59,63,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,106,132,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'TIMES':([36,51,54,56,57,58,60,62,70,81,82,84,97,98,99,101,104,116,117,118,119,120,121,122,123,124,125,126,127,130,131,136,137,],[-66,-42,-65,-57,-63,-58,-64,94,94,-40,-39,94,94,94,94,94,94,-41,94,94,-46,94,94,94,94,94,94,-45,94,-67,-38,-59,94,]),'EQ':([36,51,54,56,57,58,60,62,81,82,84,116,119,125,126,127,130,131,136,],[-66,-42,-65,-57,-63,-58,-64,88,-40,-39,88,-41,-46,-43,-45,-44,-67,-38,-59,]),'ID':([2,6,11,12,15,16,18,21,25,37,38,44,45,47,49,50,53,55,59,64,65,66,67,69,78,79,80,85,86,87,88,89,90,91,92,93,94,95,103,105,110,132,138,142,],[4,10,17,10,36,-19,17,-22,36,36,36,36,-18,36,76,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-20,36,36,36,-21,]),'IF':([15,44,47,78,103,110,138,],[37,37,37,37,37,37,37,]),'LOR':([36,51,52,54,56,57,58,60,68,77,81,82,83,113,114,115,116,118,119,120,121,122,123,124,125,126,127,130,131,136,],[-66,-42,80,-65,-57,-63,-58,-64,80,-55,-40,-39,80,-53,-54,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'FLOAT':([25,37,38,46,50,53,55,59,63,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,106,132,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'BREAK':([15,44,47,78,103,110,138,],[39,39,39,39,39,39,39,]),'TYPENAME':([13,25,37,38,43,50,53,55,59,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,132,],[20,61,61,61,71,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'RBRACKET':([36,51,54,56,57,58,60,73,81,82,99,116,119,125,126,127,130,131,134,136,],[-66,-42,-65,-57,-63,-58,-64,108,-40,-39,130,-41,-46,-43,-45,-44,-67,-38,139,-59,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([15,44,110,],[22,72,135,]),'funcall':([15,25,37,38,44,47,50,53,55,59,64,65,66,67,69,78,79,80,85,86,87,88,89,90,91,92,93,94,95,103,110,132,138,],[24,51,51,51,24,24,51,51,51,51,51,51,51,51,51,24,51,51,51,51,51,51,51,51,51,51,51,51,51,24,24,51,24,]),'cond':([25,37,50,59,79,80,],[52,68,77,83,113,114,]),'return':([15,44,47,78,103,110,138,],[32,32,32,32,32,32,32,]),'locals':([11,],[18,]),'if':([15,44,47,78,103,110,138,],[27,27,27,27,27,27,27,]),'parameters':([6,],[8,]),'write':([15,44,47,78,103,110,138,],[28,28,28,28,28,28,28,]),'literal':([25,37,38,46,50,53,55,59,63,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,106,132,],[58,58,58,73,58,58,58,58,96,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,134,58,]),'program':([0,],[3,]),'location':([15,25,37,38,44,47,49,50,53,55,59,64,65,66,67,69,78,79,80,85,86,87,88,89,90,91,92,93,94,95,103,110,132,138,],[29,56,56,56,29,29,75,56,56,56,56,56,56,56,56,56,29,56,56,56,56,56,56,56,56,56,56,56,56,56,29,29,56,29,]),'statement':([15,44,47,78,103,110,138,],[30,30,74,111,111,30,111,]),'print':([15,44,47,78,103,110,138,],[31,31,31,31,31,31,31,]),'local':([11,18,],[16,45,]),'empty':([6,67,],[9,102,]),'function':([0,3,11,18,],[1,5,14,14,]),'if_else':([15,44,47,78,103,110,138,],[41,41,41,41,41,41,41,]),'read':([15,44,47,78,103,110,138,],[33,33,33,33,33,33,33,]),'exprlist':([67,],[100,]),'parm_declaration':([6,12,],[7,19,]),'st':([78,103,138,],[112,133,141,]),'while':([15,44,47,78,103,110,138,],[40,40,40,40,40,40,40,]),'expression':([25,37,38,50,53,55,59,64,65,66,67,69,79,80,85,86,87,88,89,90,91,92,93,94,95,132,],[62,62,70,62,81,82,84,97,98,99,101,104,62,62,117,118,119,120,121,122,123,124,125,126,127,137,]),'assign':([15,44,47,78,103,110,138,],[42,42,42,42,42,42,42,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program function','program',2,'p_program','mpasparse.py',18),
  ('program -> function','program',1,'p_program','mpasparse.py',19),
  ('st -> BEGIN statements END','st',3,'p_st','mpasparse.py',31),
  ('st -> statement','st',1,'p_st_1','mpasparse.py',37),
  ('statements -> statement','statements',1,'p_statements','mpasparse.py',43),
  ('statements -> statements SEMI statement','statements',3,'p_statements_1','mpasparse.py',51),
  ('statement -> assign','statement',1,'p_statement','mpasparse.py',59),
  ('statement -> print','statement',1,'p_statement','mpasparse.py',60),
  ('statement -> if','statement',1,'p_statement','mpasparse.py',61),
  ('statement -> if_else','statement',1,'p_statement','mpasparse.py',62),
  ('statement -> while','statement',1,'p_statement','mpasparse.py',63),
  ('statement -> BREAK','statement',1,'p_statement','mpasparse.py',64),
  ('statement -> SKIP','statement',1,'p_statement','mpasparse.py',65),
  ('statement -> read','statement',1,'p_statement','mpasparse.py',66),
  ('statement -> write','statement',1,'p_statement','mpasparse.py',67),
  ('statement -> funcall','statement',1,'p_statement','mpasparse.py',68),
  ('statement -> return','statement',1,'p_statement','mpasparse.py',69),
  ('locals -> locals local','locals',2,'p_locals','mpasparse.py',86),
  ('locals -> local','locals',1,'p_locals_1','mpasparse.py',93),
  ('local -> ID COLON TYPENAME SEMI','local',4,'p_local','mpasparse.py',99),
  ('local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI','local',7,'p_local_1','mpasparse.py',105),
  ('local -> function SEMI','local',2,'p_local_2','mpasparse.py',111),
  ('function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END','function',9,'p_fundecl','mpasparse.py',117),
  ('function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END','function',8,'p_fundecl_1','mpasparse.py',125),
  ('parameters -> parameters COMMA parm_declaration','parameters',3,'p_parameters','mpasparse.py',131),
  ('parameters -> parm_declaration','parameters',1,'p_parameters_1','mpasparse.py',138),
  ('parameters -> empty','parameters',1,'p_parameters_1','mpasparse.py',139),
  ('parm_declaration -> ID COLON TYPENAME','parm_declaration',3,'p_parm_declaration','mpasparse.py',145),
  ('parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET','parm_declaration',6,'p_parm_declaration_1','mpasparse.py',151),
  ('if -> IF cond THEN st','if',4,'p_if','mpasparse.py',157),
  ('if_else -> IF cond THEN st ELSE st','if_else',6,'p_if_else','mpasparse.py',163),
  ('while -> WHILE cond DO st','while',4,'p_while','mpasparse.py',169),
  ('assign -> location ASSIGN expression','assign',3,'p_assign','mpasparse.py',175),
  ('print -> PRINT LPAREN literal RPAREN','print',4,'p_print','mpasparse.py',181),
  ('write -> WRITE LPAREN expression RPAREN','write',4,'p_write','mpasparse.py',187),
  ('return -> RETURN expression','return',2,'p_return','mpasparse.py',193),
  ('read -> READ LPAREN location RPAREN','read',4,'p_read','mpasparse.py',199),
  ('funcall -> ID LPAREN exprlist RPAREN','funcall',4,'p_expression_funcall_1','mpasparse.py',206),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','mpasparse.py',212),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','mpasparse.py',213),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','mpasparse.py',220),
  ('expression -> funcall','expression',1,'p_expression_funcall','mpasparse.py',226),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mpasparse.py',232),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mpasparse.py',233),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mpasparse.py',234),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mpasparse.py',235),
  ('cond -> expression LT expression','cond',3,'p_comp','mpasparse.py',249),
  ('cond -> expression GT expression','cond',3,'p_comp','mpasparse.py',250),
  ('cond -> expression LE expression','cond',3,'p_comp','mpasparse.py',251),
  ('cond -> expression GE expression','cond',3,'p_comp','mpasparse.py',252),
  ('cond -> expression EQ expression','cond',3,'p_comp','mpasparse.py',253),
  ('cond -> expression NE expression','cond',3,'p_comp','mpasparse.py',254),
  ('cond -> cond LAND cond','cond',3,'p_cond','mpasparse.py',272),
  ('cond -> cond LOR cond','cond',3,'p_cond','mpasparse.py',273),
  ('cond -> LNOT cond','cond',2,'p_cond','mpasparse.py',274),
  ('cond -> LPAREN cond RPAREN','cond',3,'p_cond_1','mpasparse.py',297),
  ('expression -> location','expression',1,'p_expression_1','mpasparse.py',303),
  ('expression -> literal','expression',1,'p_expression_1','mpasparse.py',304),
  ('expression -> TYPENAME LPAREN expression RPAREN','expression',4,'p_expression_2','mpasparse.py',310),
  ('exprlist -> exprlist COMMA expression','exprlist',3,'p_exprlist','mpasparse.py',316),
  ('exprlist -> expression','exprlist',1,'p_exprlist_1','mpasparse.py',323),
  ('exprlist -> empty','exprlist',1,'p_exprlist_1','mpasparse.py',324),
  ('literal -> INTEGER','literal',1,'p_literal','mpasparse.py',332),
  ('literal -> FLOAT','literal',1,'p_literal','mpasparse.py',333),
  ('literal -> STRING','literal',1,'p_literal','mpasparse.py',334),
  ('location -> ID','location',1,'p_location','mpasparse.py',340),
  ('location -> ID LBRACKET expression RBRACKET','location',4,'p_location_2','mpasparse.py',346),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',352),
]
