
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x1c\xec\x8a\xf0x|J\xb4P\xff\x19\xd1\x180x='
    
_lr_action_items = {'THEN':([38,39,40,42,44,45,47,48,53,55,59,61,79,80,81,84,85,86,87,88,89,90,91,92,93,94,97,],[-51,-43,-44,-49,-50,-52,-45,-46,77,-42,-23,-22,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-25,]),'LNOT':([21,29,35,57,58,],[35,35,35,35,35,]),'LPAREN':([5,21,22,29,35,37,39,41,43,47,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[6,43,43,43,43,43,60,43,43,60,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'LOR':([36,38,39,40,42,44,45,47,48,53,55,59,61,79,80,81,84,85,86,87,88,89,90,91,92,93,94,97,],[57,-51,-43,-44,-49,-50,-52,-45,-46,57,-42,-23,-22,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-25,]),'WHILE':([18,23,24,25,26,27,30,31,32,36,38,39,40,42,44,45,47,48,50,51,55,56,59,61,73,74,75,77,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,],[21,-10,-9,-54,-3,-8,-12,-11,-7,21,-51,-43,-44,-49,-50,-52,-45,-46,-6,21,-42,-29,-23,-22,-21,-4,-5,21,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-20,-27,-25,21,-28,]),'COLON':([19,],[33,]),'PRINT':([18,23,24,25,26,27,30,31,32,36,38,39,40,42,44,45,47,48,50,51,55,56,59,61,73,74,75,77,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,],[22,-10,-9,-54,-3,-8,-12,-11,-7,22,-51,-43,-44,-49,-50,-52,-45,-46,-6,22,-42,-29,-23,-22,-21,-4,-5,22,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-20,-27,-25,22,-28,]),'MINUS':([21,22,29,35,37,38,39,40,41,42,43,44,45,46,47,48,49,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,84,85,86,87,88,89,90,91,92,93,94,97,98,100,],[37,37,37,37,37,-51,-45,-46,37,-49,37,-50,-52,72,-45,-46,72,37,37,37,-23,37,-22,72,37,37,37,37,37,37,37,37,37,37,72,-26,72,-24,72,-33,72,72,72,72,72,-30,-32,-31,-25,37,72,]),'DIVIDE':([38,39,40,42,44,45,46,47,48,49,59,61,62,76,81,83,84,85,86,87,88,89,90,91,92,93,94,97,100,],[-51,-45,-46,-49,-50,-52,64,-45,-46,64,-23,-22,64,64,-26,64,-24,64,-33,64,64,64,64,64,64,-32,64,-25,64,]),'BEGIN':([11,15,16,18,36,38,39,40,42,44,45,47,48,55,59,61,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,97,99,],[-54,-14,18,25,25,-51,-43,-44,-49,-50,-52,-45,-46,-42,-23,-22,25,-13,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-25,25,]),'LAND':([36,38,39,40,42,44,45,47,48,53,55,59,61,79,80,81,84,85,86,87,88,89,90,91,92,93,94,97,],[58,-51,-43,-44,-49,-50,-52,-45,-46,58,-42,-23,-22,58,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-25,]),'RPAREN':([6,7,8,9,13,14,17,38,42,44,45,47,48,59,60,61,62,81,82,83,84,86,92,93,94,97,100,],[-54,-17,11,-18,-19,-53,-16,-51,-49,-50,-52,-45,-46,-23,81,-22,84,-26,97,-48,-24,-33,-30,-32,-31,-25,-47,]),'SEMI':([14,38,42,44,45,47,48,49,54,59,61,76,81,84,86,92,93,94,97,],[-53,-51,-49,-50,-52,-45,-46,73,78,-23,-22,95,-26,-24,-33,-30,-32,-31,-25,]),'NE':([38,39,40,42,44,45,46,47,48,59,61,81,84,86,92,93,94,97,],[-51,-45,-46,-49,-50,-52,67,-45,-46,-23,-22,-26,-24,-33,-30,-32,-31,-25,]),'LT':([38,39,40,42,44,45,46,47,48,59,61,81,84,86,92,93,94,97,],[-51,-45,-46,-49,-50,-52,66,-45,-46,-23,-22,-26,-24,-33,-30,-32,-31,-25,]),'PLUS':([21,22,29,35,37,38,39,40,41,42,43,44,45,46,47,48,49,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,84,85,86,87,88,89,90,91,92,93,94,97,98,100,],[41,41,41,41,41,-51,-45,-46,41,-49,41,-50,-52,70,-45,-46,70,41,41,41,-23,41,-22,70,41,41,41,41,41,41,41,41,41,41,70,-26,70,-24,70,-33,70,70,70,70,70,-30,-32,-31,-25,41,70,]),'COMMA':([6,7,8,9,13,14,17,38,42,44,45,47,48,59,61,81,82,83,84,86,92,93,94,97,100,],[-54,-17,12,-18,-19,-53,-16,-51,-49,-50,-52,-45,-46,-23,-22,-26,98,-48,-24,-33,-30,-32,-31,-25,-47,]),'ASSIGN':([28,],[52,]),'$end':([0,1,2,3,34,],[-54,0,-2,-1,-15,]),'GT':([38,39,40,42,44,45,46,47,48,59,61,81,84,86,92,93,94,97,],[-51,-45,-46,-49,-50,-52,63,-45,-46,-23,-22,-26,-24,-33,-30,-32,-31,-25,]),'END':([20,23,24,25,26,27,30,31,32,50,51,56,73,74,75,95,96,101,],[34,-10,-9,-54,-3,-8,-12,-11,-7,-6,74,-29,-21,-4,-5,-20,-27,-28,]),'STRING':([21,22,29,35,37,41,43,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'ELSE':([23,24,26,27,30,31,32,56,73,74,95,96,101,],[-10,-9,-3,-8,-12,-11,-7,-29,-21,-4,-20,99,-28,]),'GE':([38,39,40,42,44,45,46,47,48,59,61,81,84,86,92,93,94,97,],[-51,-45,-46,-49,-50,-52,68,-45,-46,-23,-22,-26,-24,-33,-30,-32,-31,-25,]),'LE':([38,39,40,42,44,45,46,47,48,59,61,81,84,86,92,93,94,97,],[-51,-45,-46,-49,-50,-52,69,-45,-46,-23,-22,-26,-24,-33,-30,-32,-31,-25,]),'FUNC':([0,1,2,3,34,],[-54,4,-2,-1,-15,]),'INTEGER':([21,22,29,35,37,41,43,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'TIMES':([38,39,40,42,44,45,46,47,48,49,59,61,62,76,81,83,84,85,86,87,88,89,90,91,92,93,94,97,100,],[-51,-45,-46,-49,-50,-52,71,-45,-46,71,-23,-22,71,71,-26,71,-24,71,-33,71,71,71,71,71,71,-32,71,-25,71,]),'EQ':([38,39,40,42,44,45,46,47,48,59,61,81,84,86,92,93,94,97,],[-51,-45,-46,-49,-50,-52,65,-45,-46,-23,-22,-26,-24,-33,-30,-32,-31,-25,]),'ID':([4,6,10,11,12,15,16,18,21,22,23,24,25,26,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,47,48,50,51,52,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,],[5,10,14,-54,10,-14,19,28,39,47,-10,-9,-54,-3,-8,39,-12,-11,-7,14,39,28,47,-51,-43,-44,47,-49,47,-50,-52,-45,-46,-6,28,47,-42,-29,39,39,-23,47,-22,47,47,47,47,47,47,47,47,47,47,-21,-4,-5,28,-13,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-20,-27,-25,47,28,-28,]),'IF':([18,23,24,25,26,27,30,31,32,36,38,39,40,42,44,45,47,48,50,51,55,56,59,61,73,74,75,77,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,],[29,-10,-9,-54,-3,-8,-12,-11,-7,29,-51,-43,-44,-49,-50,-52,-45,-46,-6,29,-42,-29,-23,-22,-21,-4,-5,29,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-20,-27,-25,29,-28,]),'FLOAT':([21,22,29,35,37,41,43,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'BREAK':([18,23,24,25,26,27,30,31,32,36,38,39,40,42,44,45,47,48,50,51,55,56,59,61,73,74,75,77,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,],[30,-10,-9,-54,-3,-8,-12,-11,-7,30,-51,-43,-44,-49,-50,-52,-45,-46,-6,30,-42,-29,-23,-22,-21,-4,-5,30,-41,-40,-26,-24,-35,-33,-38,-34,-39,-37,-36,-30,-32,-31,-20,-27,-25,30,-28,]),'BOOLEAN':([21,22,29,35,37,41,43,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([1,],[3,]),'parm_declaration':([6,12,],[7,17,]),'if_else':([18,36,51,77,99,],[23,23,23,23,23,]),'parameters':([6,],[8,]),'exprlist':([60,],[82,]),'literal':([21,22,29,35,37,41,43,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[40,48,40,40,48,48,48,48,40,40,48,48,48,48,48,48,48,48,48,48,48,48,]),'st':([25,],[51,]),'typename':([10,33,],[13,54,]),'while':([18,36,51,77,99,],[31,31,31,31,31,]),'program':([0,],[1,]),'cond':([21,29,35,57,58,],[36,53,55,79,80,]),'locals':([11,],[16,]),'statement':([18,36,51,77,99,],[26,26,75,26,26,]),'print':([18,36,51,77,99,],[27,27,27,27,27,]),'statements':([18,36,77,99,],[20,56,96,101,]),'expression':([21,22,29,35,37,41,43,52,57,58,60,63,64,65,66,67,68,69,70,71,72,98,],[46,49,46,46,59,61,62,76,46,46,83,85,86,87,88,89,90,91,92,93,94,100,]),'assign':([18,36,51,77,99,],[32,32,32,32,32,]),'empty':([0,6,11,25,],[2,9,15,50,]),'if':([18,36,51,77,99,],[24,24,24,24,24,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program function','program',2,'p_program','mpasparse.py',17),
  ('program -> empty','program',1,'p_program','mpasparse.py',18),
  ('statements -> statement','statements',1,'p_statements','mpasparse.py',25),
  ('statements -> BEGIN st END','statements',3,'p_statements','mpasparse.py',26),
  ('st -> st statement','st',2,'p_st','mpasparse.py',33),
  ('st -> empty','st',1,'p_st','mpasparse.py',34),
  ('statement -> assign','statement',1,'p_statement','mpasparse.py',43),
  ('statement -> print','statement',1,'p_statement','mpasparse.py',44),
  ('statement -> if','statement',1,'p_statement','mpasparse.py',45),
  ('statement -> if_else','statement',1,'p_statement','mpasparse.py',46),
  ('statement -> while','statement',1,'p_statement','mpasparse.py',47),
  ('statement -> BREAK','statement',1,'p_statement','mpasparse.py',48),
  ('locals -> locals ID COLON typename SEMI','locals',5,'p_locals','mpasparse.py',60),
  ('locals -> empty','locals',1,'p_locals','mpasparse.py',61),
  ('function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END','function',9,'p_fundecl','mpasparse.py',67),
  ('parameters -> parameters COMMA parm_declaration','parameters',3,'p_parameters','mpasparse.py',72),
  ('parameters -> parm_declaration','parameters',1,'p_parameters_1','mpasparse.py',79),
  ('parameters -> empty','parameters',1,'p_parameters_1','mpasparse.py',80),
  ('parm_declaration -> ID typename','parm_declaration',2,'p_parm_declaration','mpasparse.py',86),
  ('assign -> ID ASSIGN expression SEMI','assign',4,'p_assign','mpasparse.py',92),
  ('print -> PRINT expression SEMI','print',3,'p_print','mpasparse.py',98),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','mpasparse.py',106),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','mpasparse.py',107),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','mpasparse.py',114),
  ('expression -> ID LPAREN exprlist RPAREN','expression',4,'p_expression_funcall','mpasparse.py',120),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_expression_funcall','mpasparse.py',121),
  ('if -> IF cond THEN statements','if',4,'p_if','mpasparse.py',130),
  ('if_else -> IF cond THEN statements ELSE statements','if_else',6,'p_if_else','mpasparse.py',136),
  ('while -> WHILE cond statements','while',3,'p_while','mpasparse.py',142),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mpasparse.py',148),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mpasparse.py',149),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mpasparse.py',150),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mpasparse.py',151),
  ('cond -> expression LT expression','cond',3,'p_comp','mpasparse.py',165),
  ('cond -> expression GT expression','cond',3,'p_comp','mpasparse.py',166),
  ('cond -> expression LE expression','cond',3,'p_comp','mpasparse.py',167),
  ('cond -> expression GE expression','cond',3,'p_comp','mpasparse.py',168),
  ('cond -> expression EQ expression','cond',3,'p_comp','mpasparse.py',169),
  ('cond -> expression NE expression','cond',3,'p_comp','mpasparse.py',170),
  ('cond -> cond LAND cond','cond',3,'p_cond','mpasparse.py',189),
  ('cond -> cond LOR cond','cond',3,'p_cond','mpasparse.py',190),
  ('cond -> LNOT cond','cond',2,'p_cond','mpasparse.py',191),
  ('cond -> ID','cond',1,'p_cond_1','mpasparse.py',203),
  ('cond -> literal','cond',1,'p_cond_1','mpasparse.py',204),
  ('expression -> ID','expression',1,'p_expression_1','mpasparse.py',210),
  ('expression -> literal','expression',1,'p_expression_1','mpasparse.py',211),
  ('exprlist -> exprlist COMMA expression','exprlist',3,'p_exprlist','mpasparse.py',218),
  ('exprlist -> expression','exprlist',1,'p_exprlist_1','mpasparse.py',225),
  ('literal -> INTEGER','literal',1,'p_literal','mpasparse.py',231),
  ('literal -> FLOAT','literal',1,'p_literal','mpasparse.py',232),
  ('literal -> STRING','literal',1,'p_literal','mpasparse.py',233),
  ('literal -> BOOLEAN','literal',1,'p_literal','mpasparse.py',234),
  ('typename -> ID','typename',1,'p_typename','mpasparse.py',241),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',247),
]
