
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x8c\x85#\xe4\xb26\xa1\xd7\xcd.\x04b\xe2g\xac\xa5'
    
_lr_action_items = {'DO':([37,52,53,55,57,58,59,61,79,83,84,115,116,117,118,120,121,122,123,124,125,126,127,128,129,132,133,137,],[-66,-42,80,-65,-57,-63,-58,-64,-55,-40,-39,-53,-54,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'LNOT':([25,38,51,60,81,82,],[51,51,51,51,51,51,]),'RETURN':([15,28,45,48,80,106,139,],[39,39,39,39,39,39,39,]),'LPAREN':([4,23,25,26,36,37,38,39,51,54,56,60,62,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,134,],[6,50,60,64,67,69,60,71,60,71,71,60,87,71,71,71,71,71,60,60,71,71,71,71,71,71,71,71,71,71,71,71,]),'THEN':([37,52,55,57,58,59,61,70,79,83,84,115,116,117,118,120,121,122,123,124,125,126,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,106,-55,-40,-39,-53,-54,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'READ':([15,28,45,48,80,106,139,],[23,23,23,23,23,23,23,]),'LBRACKET':([20,37,73,78,],[47,68,109,68,]),'WHILE':([15,28,45,48,80,106,139,],[25,25,25,25,25,25,25,]),'PRINT':([15,28,45,48,80,106,139,],[26,26,26,26,26,26,26,]),'MINUS':([25,37,38,39,51,52,54,55,56,57,58,59,60,61,63,66,67,68,69,71,72,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,104,107,118,119,120,121,122,123,124,125,126,127,128,129,132,133,134,137,138,],[54,-66,54,54,54,-42,54,-65,54,-57,-63,-58,54,-64,97,54,54,54,54,54,97,54,54,-40,-39,97,54,54,54,54,54,54,54,54,54,54,54,97,97,97,97,97,-41,97,97,-46,97,97,97,97,97,-43,-45,-44,-67,-38,54,-59,97,]),'DIVIDE':([37,52,55,57,58,59,61,63,72,83,84,86,100,101,102,104,107,118,119,120,121,122,123,124,125,126,127,128,129,132,133,137,138,],[-66,-42,-65,-57,-63,-58,-64,89,89,-40,-39,89,89,89,89,89,89,-41,89,89,-46,89,89,89,89,89,89,-45,89,-67,-38,-59,89,]),'BEGIN':([11,15,16,18,21,28,45,46,48,80,106,108,139,142,],[15,28,-19,45,-22,28,28,-18,28,28,28,-20,28,-21,]),'LAND':([37,52,53,55,57,58,59,61,70,79,83,84,85,115,116,117,118,120,121,122,123,124,125,126,127,128,129,132,133,137,],[-66,-42,81,-65,-57,-63,-58,-64,81,-55,-40,-39,81,-53,81,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'RPAREN':([6,7,8,9,19,20,37,52,55,57,58,59,61,69,77,78,79,83,84,85,86,98,101,103,104,105,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,137,138,],[-68,-26,11,-27,-25,-28,-66,-42,-65,-57,-63,-58,-64,-68,112,-66,-55,-40,-39,117,118,130,131,133,-61,-62,118,-29,-53,-54,-56,-41,137,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,-60,]),'SEMI':([14,22,24,27,29,31,32,33,34,35,37,40,41,42,43,49,52,55,57,58,59,61,65,72,73,74,76,83,84,99,100,110,112,113,114,118,121,127,128,129,130,131,132,133,135,137,140,141,],[21,48,-15,-8,-14,-4,-7,-16,-13,-12,-66,-11,-10,-9,-6,-24,-42,-65,-57,-63,-58,-64,48,-36,108,48,-5,-40,-39,-17,-33,-23,-37,48,-32,-41,-46,-43,-45,-44,-34,-35,-67,-38,-30,-59,142,-31,]),'NE':([37,52,55,57,58,59,61,63,83,84,86,118,121,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,92,-40,-39,92,-41,-46,-43,-45,-44,-67,-38,-59,]),'PLUS':([25,37,38,39,51,52,54,55,56,57,58,59,60,61,63,66,67,68,69,71,72,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,104,107,118,119,120,121,122,123,124,125,126,127,128,129,132,133,134,137,138,],[56,-66,56,56,56,-42,56,-65,56,-57,-63,-58,56,-64,95,56,56,56,56,56,95,56,56,-40,-39,95,56,56,56,56,56,56,56,56,56,56,56,95,95,95,95,95,-41,95,95,-46,95,95,95,95,95,-43,-45,-44,-67,-38,56,-59,95,]),'LT':([37,52,55,57,58,59,61,63,83,84,86,118,121,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,91,-40,-39,91,-41,-46,-43,-45,-44,-67,-38,-59,]),'COMMA':([6,7,8,9,19,20,37,52,55,57,58,59,61,69,83,84,103,104,105,111,118,121,127,128,129,132,133,137,138,],[-68,-26,12,-27,-25,-28,-66,-42,-65,-57,-63,-58,-64,-68,-40,-39,134,-61,-62,-29,-41,-46,-43,-45,-44,-67,-38,-59,-60,]),'COLON':([10,17,],[13,44,]),'ASSIGN':([30,37,132,],[66,-66,-67,]),'$end':([1,3,5,49,110,],[-2,0,-1,-24,-23,]),'GT':([37,52,55,57,58,59,61,63,83,84,86,118,121,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,88,-40,-39,88,-41,-46,-43,-45,-44,-67,-38,-59,]),'END':([22,24,27,29,31,32,33,34,35,37,40,41,42,43,52,55,57,58,59,61,65,72,74,76,83,84,99,100,112,113,114,118,121,127,128,129,130,131,132,133,135,137,141,],[49,-15,-8,-14,-4,-7,-16,-13,-12,-66,-11,-10,-9,-6,-42,-65,-57,-63,-58,-64,99,-36,110,-5,-40,-39,-17,-33,-37,-3,-32,-41,-46,-43,-45,-44,-34,-35,-67,-38,-30,-59,-31,]),'STRING':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,134,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'SKIP':([15,28,45,48,80,106,139,],[35,35,35,35,35,35,35,]),'ELSE':([24,27,29,31,32,33,34,35,37,40,41,42,43,52,55,57,58,59,61,72,76,83,84,99,100,112,113,114,118,121,127,128,129,130,131,132,133,135,137,141,],[-15,-8,-14,-4,-7,-16,-13,-12,-66,-11,-10,-9,-6,-42,-65,-57,-63,-58,-64,-36,-5,-40,-39,-17,-33,-37,-3,-32,-41,-46,-43,-45,-44,-34,-35,-67,-38,139,-59,-31,]),'WRITE':([15,28,45,48,80,106,139,],[36,36,36,36,36,36,36,]),'GE':([37,52,55,57,58,59,61,63,83,84,86,118,121,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,93,-40,-39,93,-41,-46,-43,-45,-44,-67,-38,-59,]),'LE':([37,52,55,57,58,59,61,63,83,84,86,118,121,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,94,-40,-39,94,-41,-46,-43,-45,-44,-67,-38,-59,]),'FUNC':([0,1,3,5,11,16,18,21,46,49,108,110,142,],[2,-2,2,-1,2,-19,2,-22,-18,-24,-20,-23,-21,]),'INTEGER':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,134,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'TIMES':([37,52,55,57,58,59,61,63,72,83,84,86,100,101,102,104,107,118,119,120,121,122,123,124,125,126,127,128,129,132,133,137,138,],[-66,-42,-65,-57,-63,-58,-64,96,96,-40,-39,96,96,96,96,96,96,-41,96,96,-46,96,96,96,96,96,96,-45,96,-67,-38,-59,96,]),'EQ':([37,52,55,57,58,59,61,63,83,84,86,118,121,127,128,129,132,133,137,],[-66,-42,-65,-57,-63,-58,-64,90,-40,-39,90,-41,-46,-43,-45,-44,-67,-38,-59,]),'ID':([2,6,11,12,15,16,18,21,25,28,38,39,45,46,48,50,51,54,56,60,66,67,68,69,71,80,81,82,87,88,89,90,91,92,93,94,95,96,97,106,108,134,139,142,],[4,10,17,10,37,-19,17,-22,37,37,37,37,37,-18,37,78,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-20,37,37,-21,]),'IF':([15,28,45,48,80,106,139,],[38,38,38,38,38,38,38,]),'LOR':([37,52,53,55,57,58,59,61,70,79,83,84,85,115,116,117,118,120,121,122,123,124,125,126,127,128,129,132,133,137,],[-66,-42,82,-65,-57,-63,-58,-64,82,-55,-40,-39,82,-53,-54,-56,-41,-48,-46,-51,-47,-52,-50,-49,-43,-45,-44,-67,-38,-59,]),'FLOAT':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,134,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'BREAK':([15,28,45,48,80,106,139,],[40,40,40,40,40,40,40,]),'TYPENAME':([13,25,38,39,44,51,54,56,60,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,134,],[20,62,62,62,73,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'RBRACKET':([37,52,55,57,58,59,61,75,83,84,102,118,121,127,128,129,132,133,136,137,],[-66,-42,-65,-57,-63,-58,-64,111,-40,-39,132,-41,-46,-43,-45,-44,-67,-38,140,-59,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([15,28,45,80,106,139,],[22,65,74,113,113,113,]),'funcall':([15,25,28,38,39,45,48,51,54,56,60,66,67,68,69,71,80,81,82,87,88,89,90,91,92,93,94,95,96,97,106,134,139,],[24,52,24,52,52,24,24,52,52,52,52,52,52,52,52,52,24,52,52,52,52,52,52,52,52,52,52,52,52,52,24,52,24,]),'cond':([25,38,51,60,81,82,],[53,70,79,85,115,116,]),'return':([15,28,45,48,80,106,139,],[33,33,33,33,33,33,33,]),'locals':([11,],[18,]),'if':([15,28,45,48,80,106,139,],[27,27,27,27,27,27,27,]),'parameters':([6,],[8,]),'write':([15,28,45,48,80,106,139,],[29,29,29,29,29,29,29,]),'literal':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,134,],[59,59,59,75,59,59,59,59,98,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,136,59,]),'program':([0,],[3,]),'location':([15,25,28,38,39,45,48,50,51,54,56,60,66,67,68,69,71,80,81,82,87,88,89,90,91,92,93,94,95,96,97,106,134,139,],[30,57,30,57,57,30,30,77,57,57,57,57,57,57,57,57,57,30,57,57,57,57,57,57,57,57,57,57,57,57,57,30,57,30,]),'statement':([15,28,45,48,80,106,139,],[31,31,31,76,31,31,31,]),'print':([15,28,45,48,80,106,139,],[32,32,32,32,32,32,32,]),'local':([11,18,],[16,46,]),'empty':([6,69,],[9,105,]),'function':([0,3,11,18,],[1,5,14,14,]),'if_else':([15,28,45,48,80,106,139,],[42,42,42,42,42,42,42,]),'read':([15,28,45,48,80,106,139,],[34,34,34,34,34,34,34,]),'exprlist':([69,],[103,]),'parm_declaration':([6,12,],[7,19,]),'st':([80,106,139,],[114,135,141,]),'while':([15,28,45,48,80,106,139,],[41,41,41,41,41,41,41,]),'expression':([25,38,39,51,54,56,60,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,134,],[63,63,72,63,83,84,86,100,101,102,104,107,63,63,119,120,121,122,123,124,125,126,127,128,129,138,]),'assign':([15,28,45,48,80,106,139,],[43,43,43,43,43,43,43,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program function','program',2,'p_program','mpasparse.py',18),
  ('program -> function','program',1,'p_program','mpasparse.py',19),
  ('st -> statements','st',1,'p_st','mpasparse.py',31),
  ('statements -> statement','statements',1,'p_statements','mpasparse.py',43),
  ('statements -> statements SEMI statement','statements',3,'p_statements_1','mpasparse.py',51),
  ('statement -> assign','statement',1,'p_statement','mpasparse.py',59),
  ('statement -> print','statement',1,'p_statement','mpasparse.py',60),
  ('statement -> if','statement',1,'p_statement','mpasparse.py',61),
  ('statement -> if_else','statement',1,'p_statement','mpasparse.py',62),
  ('statement -> while','statement',1,'p_statement','mpasparse.py',63),
  ('statement -> BREAK','statement',1,'p_statement','mpasparse.py',64),
  ('statement -> SKIP','statement',1,'p_statement','mpasparse.py',65),
  ('statement -> read','statement',1,'p_statement','mpasparse.py',66),
  ('statement -> write','statement',1,'p_statement','mpasparse.py',67),
  ('statement -> funcall','statement',1,'p_statement','mpasparse.py',68),
  ('statement -> return','statement',1,'p_statement','mpasparse.py',69),
  ('statement -> BEGIN statements END','statement',3,'p_statement_1','mpasparse.py',80),
  ('locals -> locals local','locals',2,'p_locals','mpasparse.py',92),
  ('locals -> local','locals',1,'p_locals_1','mpasparse.py',99),
  ('local -> ID COLON TYPENAME SEMI','local',4,'p_local','mpasparse.py',105),
  ('local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI','local',7,'p_local_1','mpasparse.py',111),
  ('local -> function SEMI','local',2,'p_local_2','mpasparse.py',117),
  ('function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END','function',9,'p_fundecl','mpasparse.py',123),
  ('function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END','function',8,'p_fundecl_1','mpasparse.py',131),
  ('parameters -> parameters COMMA parm_declaration','parameters',3,'p_parameters','mpasparse.py',137),
  ('parameters -> parm_declaration','parameters',1,'p_parameters_1','mpasparse.py',144),
  ('parameters -> empty','parameters',1,'p_parameters_1','mpasparse.py',145),
  ('parm_declaration -> ID COLON TYPENAME','parm_declaration',3,'p_parm_declaration','mpasparse.py',151),
  ('parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET','parm_declaration',6,'p_parm_declaration_1','mpasparse.py',157),
  ('if -> IF cond THEN st','if',4,'p_if','mpasparse.py',163),
  ('if_else -> IF cond THEN st ELSE st','if_else',6,'p_if_else','mpasparse.py',169),
  ('while -> WHILE cond DO st','while',4,'p_while','mpasparse.py',175),
  ('assign -> location ASSIGN expression','assign',3,'p_assign','mpasparse.py',181),
  ('print -> PRINT LPAREN literal RPAREN','print',4,'p_print','mpasparse.py',187),
  ('write -> WRITE LPAREN expression RPAREN','write',4,'p_write','mpasparse.py',193),
  ('return -> RETURN expression','return',2,'p_return','mpasparse.py',199),
  ('read -> READ LPAREN location RPAREN','read',4,'p_read','mpasparse.py',205),
  ('funcall -> ID LPAREN exprlist RPAREN','funcall',4,'p_expression_funcall_1','mpasparse.py',212),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','mpasparse.py',218),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','mpasparse.py',219),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','mpasparse.py',226),
  ('expression -> funcall','expression',1,'p_expression_funcall','mpasparse.py',232),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mpasparse.py',238),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mpasparse.py',239),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mpasparse.py',240),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mpasparse.py',241),
  ('cond -> expression LT expression','cond',3,'p_comp','mpasparse.py',255),
  ('cond -> expression GT expression','cond',3,'p_comp','mpasparse.py',256),
  ('cond -> expression LE expression','cond',3,'p_comp','mpasparse.py',257),
  ('cond -> expression GE expression','cond',3,'p_comp','mpasparse.py',258),
  ('cond -> expression EQ expression','cond',3,'p_comp','mpasparse.py',259),
  ('cond -> expression NE expression','cond',3,'p_comp','mpasparse.py',260),
  ('cond -> cond LAND cond','cond',3,'p_cond','mpasparse.py',278),
  ('cond -> cond LOR cond','cond',3,'p_cond','mpasparse.py',279),
  ('cond -> LNOT cond','cond',2,'p_cond','mpasparse.py',280),
  ('cond -> LPAREN cond RPAREN','cond',3,'p_cond_1','mpasparse.py',303),
  ('expression -> location','expression',1,'p_expression_1','mpasparse.py',309),
  ('expression -> literal','expression',1,'p_expression_1','mpasparse.py',310),
  ('expression -> TYPENAME LPAREN expression RPAREN','expression',4,'p_expression_2','mpasparse.py',316),
  ('exprlist -> exprlist COMMA expression','exprlist',3,'p_exprlist','mpasparse.py',322),
  ('exprlist -> expression','exprlist',1,'p_exprlist_1','mpasparse.py',329),
  ('exprlist -> empty','exprlist',1,'p_exprlist_1','mpasparse.py',330),
  ('literal -> INTEGER','literal',1,'p_literal','mpasparse.py',338),
  ('literal -> FLOAT','literal',1,'p_literal','mpasparse.py',339),
  ('literal -> STRING','literal',1,'p_literal','mpasparse.py',340),
  ('location -> ID','location',1,'p_location','mpasparse.py',346),
  ('location -> ID LBRACKET expression RBRACKET','location',4,'p_location_2','mpasparse.py',352),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',358),
]
