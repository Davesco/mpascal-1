
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xa9\xfc~\x8d~\xf6\xd7\x98\xe9\xe1\x82\xe2\xd7\x0b\xcd\x97'
    
_lr_action_items = {'DO':([37,52,53,55,57,58,59,61,79,83,84,114,115,116,117,119,120,121,122,123,124,125,126,127,128,131,132,136,],[-65,-41,80,-64,-56,-62,-57,-63,-54,-39,-38,-52,-53,-55,-40,-47,-45,-50,-46,-51,-49,-48,-42,-44,-43,-66,-37,-58,]),'LNOT':([25,38,51,60,81,82,],[51,51,51,51,51,51,]),'RETURN':([15,28,45,48,80,106,138,],[39,39,39,39,39,39,39,]),'LPAREN':([4,23,25,26,36,37,38,39,51,54,56,60,62,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,133,],[6,50,60,64,67,69,60,71,60,71,71,60,87,71,71,71,71,71,60,60,71,71,71,71,71,71,71,71,71,71,71,71,]),'THEN':([37,52,55,57,58,59,61,70,79,83,84,114,115,116,117,119,120,121,122,123,124,125,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,106,-54,-39,-38,-52,-53,-55,-40,-47,-45,-50,-46,-51,-49,-48,-42,-44,-43,-66,-37,-58,]),'READ':([15,28,45,48,80,106,138,],[23,23,23,23,23,23,23,]),'LBRACKET':([20,37,73,78,],[47,68,109,68,]),'WHILE':([15,28,45,48,80,106,138,],[25,25,25,25,25,25,25,]),'PRINT':([15,28,45,48,80,106,138,],[26,26,26,26,26,26,26,]),'MINUS':([25,37,38,39,51,52,54,55,56,57,58,59,60,61,63,66,67,68,69,71,72,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,104,107,117,118,119,120,121,122,123,124,125,126,127,128,131,132,133,136,137,],[54,-65,54,54,54,-41,54,-64,54,-56,-62,-57,54,-63,97,54,54,54,54,54,97,54,54,-39,-38,97,54,54,54,54,54,54,54,54,54,54,54,97,97,97,97,97,-40,97,97,-45,97,97,97,97,97,-42,-44,-43,-66,-37,54,-58,97,]),'DIVIDE':([37,52,55,57,58,59,61,63,72,83,84,86,100,101,102,104,107,117,118,119,120,121,122,123,124,125,126,127,128,131,132,136,137,],[-65,-41,-64,-56,-62,-57,-63,89,89,-39,-38,89,89,89,89,89,89,-40,89,89,-45,89,89,89,89,89,89,-44,89,-66,-37,-58,89,]),'BEGIN':([11,15,16,18,21,28,45,46,48,80,106,108,138,141,],[15,28,-18,45,-21,28,28,-17,28,28,28,-19,28,-20,]),'LAND':([37,52,53,55,57,58,59,61,70,79,83,84,85,114,115,116,117,119,120,121,122,123,124,125,126,127,128,131,132,136,],[-65,-41,81,-64,-56,-62,-57,-63,81,-54,-39,-38,81,-52,81,-55,-40,-47,-45,-50,-46,-51,-49,-48,-42,-44,-43,-66,-37,-58,]),'RPAREN':([6,7,8,9,19,20,37,52,55,57,58,59,61,69,77,78,79,83,84,85,86,98,101,103,104,105,107,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,132,136,137,],[-67,-25,11,-26,-24,-27,-65,-41,-64,-56,-62,-57,-63,-67,112,-65,-54,-39,-38,116,117,129,130,132,-60,-61,117,-28,-52,-53,-55,-40,136,-47,-45,-50,-46,-51,-49,-48,-42,-44,-43,-66,-37,-58,-59,]),'SEMI':([14,22,24,27,29,31,32,33,34,35,37,40,41,42,43,49,52,55,57,58,59,61,65,72,73,74,76,83,84,99,100,110,112,113,117,120,126,127,128,129,130,131,132,134,136,139,140,],[21,48,-15,-8,-14,-4,-7,-16,-13,-12,-65,-11,-10,-9,-6,-23,-41,-64,-56,-62,-57,-63,48,-35,108,48,-5,-39,-38,-3,-32,-22,-36,-31,-40,-45,-42,-44,-43,-33,-34,-66,-37,-29,-58,141,-30,]),'NE':([37,52,55,57,58,59,61,63,83,84,86,117,120,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,92,-39,-38,92,-40,-45,-42,-44,-43,-66,-37,-58,]),'PLUS':([25,37,38,39,51,52,54,55,56,57,58,59,60,61,63,66,67,68,69,71,72,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,104,107,117,118,119,120,121,122,123,124,125,126,127,128,131,132,133,136,137,],[56,-65,56,56,56,-41,56,-64,56,-56,-62,-57,56,-63,95,56,56,56,56,56,95,56,56,-39,-38,95,56,56,56,56,56,56,56,56,56,56,56,95,95,95,95,95,-40,95,95,-45,95,95,95,95,95,-42,-44,-43,-66,-37,56,-58,95,]),'LT':([37,52,55,57,58,59,61,63,83,84,86,117,120,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,91,-39,-38,91,-40,-45,-42,-44,-43,-66,-37,-58,]),'COMMA':([6,7,8,9,19,20,37,52,55,57,58,59,61,69,83,84,103,104,105,111,117,120,126,127,128,131,132,136,137,],[-67,-25,12,-26,-24,-27,-65,-41,-64,-56,-62,-57,-63,-67,-39,-38,133,-60,-61,-28,-40,-45,-42,-44,-43,-66,-37,-58,-59,]),'COLON':([10,17,],[13,44,]),'ASSIGN':([30,37,131,],[66,-65,-66,]),'$end':([1,3,5,49,110,],[-2,0,-1,-23,-22,]),'GT':([37,52,55,57,58,59,61,63,83,84,86,117,120,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,88,-39,-38,88,-40,-45,-42,-44,-43,-66,-37,-58,]),'END':([22,24,27,29,31,32,33,34,35,37,40,41,42,43,52,55,57,58,59,61,65,72,74,76,83,84,99,100,112,113,117,120,126,127,128,129,130,131,132,134,136,140,],[49,-15,-8,-14,-4,-7,-16,-13,-12,-65,-11,-10,-9,-6,-41,-64,-56,-62,-57,-63,99,-35,110,-5,-39,-38,-3,-32,-36,-31,-40,-45,-42,-44,-43,-33,-34,-66,-37,-29,-58,-30,]),'STRING':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,133,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'SKIP':([15,28,45,48,80,106,138,],[35,35,35,35,35,35,35,]),'ELSE':([24,27,29,32,33,34,35,37,40,41,42,43,52,55,57,58,59,61,72,83,84,99,100,112,113,117,120,126,127,128,129,130,131,132,134,136,140,],[-15,-8,-14,-7,-16,-13,-12,-65,-11,-10,-9,-6,-41,-64,-56,-62,-57,-63,-35,-39,-38,-3,-32,-36,-31,-40,-45,-42,-44,-43,-33,-34,-66,-37,138,-58,-30,]),'WRITE':([15,28,45,48,80,106,138,],[36,36,36,36,36,36,36,]),'GE':([37,52,55,57,58,59,61,63,83,84,86,117,120,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,93,-39,-38,93,-40,-45,-42,-44,-43,-66,-37,-58,]),'LE':([37,52,55,57,58,59,61,63,83,84,86,117,120,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,94,-39,-38,94,-40,-45,-42,-44,-43,-66,-37,-58,]),'FUNC':([0,1,3,5,11,16,18,21,46,49,108,110,141,],[2,-2,2,-1,2,-18,2,-21,-17,-23,-19,-22,-20,]),'INTEGER':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,133,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'TIMES':([37,52,55,57,58,59,61,63,72,83,84,86,100,101,102,104,107,117,118,119,120,121,122,123,124,125,126,127,128,131,132,136,137,],[-65,-41,-64,-56,-62,-57,-63,96,96,-39,-38,96,96,96,96,96,96,-40,96,96,-45,96,96,96,96,96,96,-44,96,-66,-37,-58,96,]),'EQ':([37,52,55,57,58,59,61,63,83,84,86,117,120,126,127,128,131,132,136,],[-65,-41,-64,-56,-62,-57,-63,90,-39,-38,90,-40,-45,-42,-44,-43,-66,-37,-58,]),'ID':([2,6,11,12,15,16,18,21,25,28,38,39,45,46,48,50,51,54,56,60,66,67,68,69,71,80,81,82,87,88,89,90,91,92,93,94,95,96,97,106,108,133,138,141,],[4,10,17,10,37,-18,17,-21,37,37,37,37,37,-17,37,78,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-19,37,37,-20,]),'IF':([15,28,45,48,80,106,138,],[38,38,38,38,38,38,38,]),'LOR':([37,52,53,55,57,58,59,61,70,79,83,84,85,114,115,116,117,119,120,121,122,123,124,125,126,127,128,131,132,136,],[-65,-41,82,-64,-56,-62,-57,-63,82,-54,-39,-38,82,-52,-53,-55,-40,-47,-45,-50,-46,-51,-49,-48,-42,-44,-43,-66,-37,-58,]),'FLOAT':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,133,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'BREAK':([15,28,45,48,80,106,138,],[40,40,40,40,40,40,40,]),'TYPENAME':([13,25,38,39,44,51,54,56,60,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,133,],[20,62,62,62,73,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'RBRACKET':([37,52,55,57,58,59,61,75,83,84,102,117,120,126,127,128,131,132,135,136,],[-65,-41,-64,-56,-62,-57,-63,111,-39,-38,131,-40,-45,-42,-44,-43,-66,-37,139,-58,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([15,28,45,],[22,65,74,]),'funcall':([15,25,28,38,39,45,48,51,54,56,60,66,67,68,69,71,80,81,82,87,88,89,90,91,92,93,94,95,96,97,106,133,138,],[24,52,24,52,52,24,24,52,52,52,52,52,52,52,52,52,24,52,52,52,52,52,52,52,52,52,52,52,52,52,24,52,24,]),'cond':([25,38,51,60,81,82,],[53,70,79,85,114,115,]),'return':([15,28,45,48,80,106,138,],[33,33,33,33,33,33,33,]),'locals':([11,],[18,]),'if':([15,28,45,48,80,106,138,],[27,27,27,27,27,27,27,]),'parameters':([6,],[8,]),'write':([15,28,45,48,80,106,138,],[29,29,29,29,29,29,29,]),'literal':([25,38,39,47,51,54,56,60,64,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,109,133,],[59,59,59,75,59,59,59,59,98,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,135,59,]),'program':([0,],[3,]),'location':([15,25,28,38,39,45,48,50,51,54,56,60,66,67,68,69,71,80,81,82,87,88,89,90,91,92,93,94,95,96,97,106,133,138,],[30,57,30,57,57,30,30,77,57,57,57,57,57,57,57,57,57,30,57,57,57,57,57,57,57,57,57,57,57,57,57,30,57,30,]),'statement':([15,28,45,48,80,106,138,],[31,31,31,76,113,134,140,]),'print':([15,28,45,48,80,106,138,],[32,32,32,32,32,32,32,]),'local':([11,18,],[16,46,]),'empty':([6,69,],[9,105,]),'function':([0,3,11,18,],[1,5,14,14,]),'if_else':([15,28,45,48,80,106,138,],[42,42,42,42,42,42,42,]),'read':([15,28,45,48,80,106,138,],[34,34,34,34,34,34,34,]),'exprlist':([69,],[103,]),'parm_declaration':([6,12,],[7,19,]),'while':([15,28,45,48,80,106,138,],[41,41,41,41,41,41,41,]),'expression':([25,38,39,51,54,56,60,66,67,68,69,71,81,82,87,88,89,90,91,92,93,94,95,96,97,133,],[63,63,72,63,83,84,86,100,101,102,104,107,63,63,118,119,120,121,122,123,124,125,126,127,128,137,]),'assign':([15,28,45,48,80,106,138,],[43,43,43,43,43,43,43,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program function','program',2,'p_program','mpasparse.py',18),
  ('program -> function','program',1,'p_program','mpasparse.py',19),
  ('statement -> BEGIN statements END','statement',3,'p_st','mpasparse.py',31),
  ('statements -> statement','statements',1,'p_statements','mpasparse.py',43),
  ('statements -> statements SEMI statement','statements',3,'p_statements_1','mpasparse.py',51),
  ('statement -> assign','statement',1,'p_statement','mpasparse.py',59),
  ('statement -> print','statement',1,'p_statement','mpasparse.py',60),
  ('statement -> if','statement',1,'p_statement','mpasparse.py',61),
  ('statement -> if_else','statement',1,'p_statement','mpasparse.py',62),
  ('statement -> while','statement',1,'p_statement','mpasparse.py',63),
  ('statement -> BREAK','statement',1,'p_statement','mpasparse.py',64),
  ('statement -> SKIP','statement',1,'p_statement','mpasparse.py',65),
  ('statement -> read','statement',1,'p_statement','mpasparse.py',66),
  ('statement -> write','statement',1,'p_statement','mpasparse.py',67),
  ('statement -> funcall','statement',1,'p_statement','mpasparse.py',68),
  ('statement -> return','statement',1,'p_statement','mpasparse.py',69),
  ('locals -> locals local','locals',2,'p_locals','mpasparse.py',86),
  ('locals -> local','locals',1,'p_locals_1','mpasparse.py',93),
  ('local -> ID COLON TYPENAME SEMI','local',4,'p_local','mpasparse.py',99),
  ('local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI','local',7,'p_local_1','mpasparse.py',105),
  ('local -> function SEMI','local',2,'p_local_2','mpasparse.py',111),
  ('function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END','function',9,'p_fundecl','mpasparse.py',117),
  ('function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END','function',8,'p_fundecl_1','mpasparse.py',125),
  ('parameters -> parameters COMMA parm_declaration','parameters',3,'p_parameters','mpasparse.py',131),
  ('parameters -> parm_declaration','parameters',1,'p_parameters_1','mpasparse.py',138),
  ('parameters -> empty','parameters',1,'p_parameters_1','mpasparse.py',139),
  ('parm_declaration -> ID COLON TYPENAME','parm_declaration',3,'p_parm_declaration','mpasparse.py',145),
  ('parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET','parm_declaration',6,'p_parm_declaration_1','mpasparse.py',151),
  ('if -> IF cond THEN statement','if',4,'p_if','mpasparse.py',157),
  ('if_else -> IF cond THEN statement ELSE statement','if_else',6,'p_if_else','mpasparse.py',163),
  ('while -> WHILE cond DO statement','while',4,'p_while','mpasparse.py',169),
  ('assign -> location ASSIGN expression','assign',3,'p_assign','mpasparse.py',175),
  ('print -> PRINT LPAREN literal RPAREN','print',4,'p_print','mpasparse.py',181),
  ('write -> WRITE LPAREN expression RPAREN','write',4,'p_write','mpasparse.py',187),
  ('return -> RETURN expression','return',2,'p_return','mpasparse.py',193),
  ('read -> READ LPAREN location RPAREN','read',4,'p_read','mpasparse.py',199),
  ('funcall -> ID LPAREN exprlist RPAREN','funcall',4,'p_expression_funcall_1','mpasparse.py',206),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','mpasparse.py',212),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','mpasparse.py',213),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','mpasparse.py',220),
  ('expression -> funcall','expression',1,'p_expression_funcall','mpasparse.py',226),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mpasparse.py',232),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mpasparse.py',233),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mpasparse.py',234),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mpasparse.py',235),
  ('cond -> expression LT expression','cond',3,'p_comp','mpasparse.py',249),
  ('cond -> expression GT expression','cond',3,'p_comp','mpasparse.py',250),
  ('cond -> expression LE expression','cond',3,'p_comp','mpasparse.py',251),
  ('cond -> expression GE expression','cond',3,'p_comp','mpasparse.py',252),
  ('cond -> expression EQ expression','cond',3,'p_comp','mpasparse.py',253),
  ('cond -> expression NE expression','cond',3,'p_comp','mpasparse.py',254),
  ('cond -> cond LAND cond','cond',3,'p_cond','mpasparse.py',272),
  ('cond -> cond LOR cond','cond',3,'p_cond','mpasparse.py',273),
  ('cond -> LNOT cond','cond',2,'p_cond','mpasparse.py',274),
  ('cond -> LPAREN cond RPAREN','cond',3,'p_cond_1','mpasparse.py',297),
  ('expression -> location','expression',1,'p_expression_1','mpasparse.py',303),
  ('expression -> literal','expression',1,'p_expression_1','mpasparse.py',304),
  ('expression -> TYPENAME LPAREN expression RPAREN','expression',4,'p_expression_2','mpasparse.py',310),
  ('exprlist -> exprlist COMMA expression','exprlist',3,'p_exprlist','mpasparse.py',316),
  ('exprlist -> expression','exprlist',1,'p_exprlist_1','mpasparse.py',323),
  ('exprlist -> empty','exprlist',1,'p_exprlist_1','mpasparse.py',324),
  ('literal -> INTEGER','literal',1,'p_literal','mpasparse.py',332),
  ('literal -> FLOAT','literal',1,'p_literal_1','mpasparse.py',338),
  ('literal -> STRING','literal',1,'p_literal_2','mpasparse.py',344),
  ('location -> ID','location',1,'p_location','mpasparse.py',350),
  ('location -> ID LBRACKET expression RBRACKET','location',4,'p_location_2','mpasparse.py',356),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',362),
]
