program : fun main LPAR RPAR locals begin statements end functions
        | functions fun main LPAR RPAR locals begin statements end
        ;

functions : functions function
          | function
          ;

function : fun ID LPAR arguments RPAR locals begin statements end
         ;

arguments : variable
          | variable lvariable
          |
          ;

lvariable : lvariabe COMMA variable
          | variable
          ;

locals : locals variable SEMICOLON
       | 
       ;

variable : ID COLON type
         ;

type : int
     | float
     | int LBRACKET expr RBRACKET
     | float LBRACKET expr RBRACKET
     ;

expr : expr PLUS expr
     | expr MINUS expr
     | expr TIMES expr
     | expr DIVIDE expr 
     | MINUS expr
     | PLUS expr
     | LPAR expr RPAR
     | ID LPAR expr RPAR
     | ID
     | ID LBRACKET expr RBRACKET
     | Conv
     ;

conv : int LPAR expr RPAR
     | float LPAR expr RPAR
     ;

Erela : expr LESS expr
      | expr GREATER expr
      | expr LESSEQUAL expr
      | expr GREATEREQUAL expr
      | expr EQUAL expr
      | expr DISTINT expr
      ;

relation : relation AND relation
         | relation OR relation
         | NOT relation 
         | LPAR relation RPAR
         | Erela
         ;

statements : while relation do statements 
           | if relation then statements
           | if relation then statements else statements
           | ID := expr
           | print LPAR LITERAL RPAR
           | write LPAR expr RPAR
           | read LPAR ID RPAR
           | return expr
           | ID LPAR arguments RPAR
           | skip
           | break
           | begin stat
           ;

stat : statements SEMICOLON
     | statement end
     ;