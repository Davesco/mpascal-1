Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program function
Rule 2     program -> function
Rule 3     st -> BEGIN statements END
Rule 4     st -> statement
Rule 5     statements -> statement
Rule 6     statements -> statements SEMI statement
Rule 7     statement -> assign
Rule 8     statement -> print
Rule 9     statement -> if
Rule 10    statement -> if_else
Rule 11    statement -> while
Rule 12    statement -> BREAK
Rule 13    statement -> SKIP
Rule 14    statement -> read
Rule 15    statement -> write
Rule 16    statement -> funcall
Rule 17    statement -> return
Rule 18    locals -> locals local
Rule 19    locals -> local
Rule 20    local -> ID COLON TYPENAME SEMI
Rule 21    local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI
Rule 22    local -> function SEMI
Rule 23    function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
Rule 24    function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END
Rule 25    parameters -> parameters COMMA parm_declaration
Rule 26    parameters -> parm_declaration
Rule 27    parameters -> empty
Rule 28    parm_declaration -> ID COLON TYPENAME
Rule 29    parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET
Rule 30    if -> IF cond THEN st
Rule 31    if_else -> IF cond THEN st ELSE st
Rule 32    while -> WHILE cond DO st
Rule 33    assign -> location ASSIGN expression
Rule 34    print -> PRINT LPAREN literal RPAREN
Rule 35    write -> WRITE LPAREN expression RPAREN
Rule 36    return -> RETURN expression
Rule 37    read -> READ LPAREN location RPAREN
Rule 38    funcall -> ID LPAREN exprlist RPAREN
Rule 39    expression -> PLUS expression
Rule 40    expression -> MINUS expression
Rule 41    expression -> LPAREN expression RPAREN
Rule 42    expression -> funcall
Rule 43    expression -> expression PLUS expression
Rule 44    expression -> expression MINUS expression
Rule 45    expression -> expression TIMES expression
Rule 46    expression -> expression DIVIDE expression
Rule 47    cond -> expression LT expression
Rule 48    cond -> expression GT expression
Rule 49    cond -> expression LE expression
Rule 50    cond -> expression GE expression
Rule 51    cond -> expression EQ expression
Rule 52    cond -> expression NE expression
Rule 53    cond -> cond LAND cond
Rule 54    cond -> cond LOR cond
Rule 55    cond -> LNOT cond
Rule 56    cond -> LPAREN cond RPAREN
Rule 57    expression -> location
Rule 58    expression -> literal
Rule 59    expression -> TYPENAME LPAREN expression RPAREN
Rule 60    exprlist -> exprlist COMMA expression
Rule 61    exprlist -> expression
Rule 62    exprlist -> empty
Rule 63    literal -> INTEGER
Rule 64    literal -> FLOAT
Rule 65    literal -> STRING
Rule 66    location -> ID
Rule 67    location -> ID LBRACKET expression RBRACKET
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 33
BEGIN                : 3 23 24
BREAK                : 12
COLON                : 20 21 28 29
COMMA                : 25 60
DIVIDE               : 46
DO                   : 32
ELSE                 : 31
END                  : 3 23 24
EQ                   : 51
FLOAT                : 64
FUNC                 : 23 24
GE                   : 50
GT                   : 48
ID                   : 20 21 23 24 28 29 38 66 67
IF                   : 30 31
INTEGER              : 63
LAND                 : 53
LBRACKET             : 21 29 67
LE                   : 49
LNOT                 : 55
LOR                  : 54
LPAREN               : 23 24 34 35 37 38 41 56 59
LT                   : 47
MINUS                : 40 44
NE                   : 52
PLUS                 : 39 43
PRINT                : 34
RBRACKET             : 21 29 67
READ                 : 37
RETURN               : 36
RPAREN               : 23 24 34 35 37 38 41 56 59
SEMI                 : 6 20 21 22
SKIP                 : 13
STRING               : 65
THEN                 : 30 31
TIMES                : 45
TYPENAME             : 20 21 28 29 59
WHILE                : 32
WRITE                : 35
error                : 

Nonterminals, with rules where they appear

assign               : 7
cond                 : 30 31 32 53 53 54 54 55 56
empty                : 27 62
expression           : 33 35 36 39 40 41 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 59 60 61 67
exprlist             : 38 60
funcall              : 16 42
function             : 1 2 22
if                   : 9
if_else              : 10
literal              : 21 29 34 58
local                : 18 19
locals               : 18 23
location             : 33 37 57
parameters           : 23 24 25
parm_declaration     : 25 26
print                : 8
program              : 1 0
read                 : 14
return               : 17
st                   : 30 31 31 32
statement            : 4 5 6
statements           : 3 6 23 24
while                : 11
write                : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function
    (2) program -> . function
    (23) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (24) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 1
    program                        shift and go to state 3

state 1

    (2) program -> function .

    FUNC            reduce using rule 2 (program -> function .)
    $end            reduce using rule 2 (program -> function .)


state 2

    (23) function -> FUNC . ID LPAREN parameters RPAREN locals BEGIN statements END
    (24) function -> FUNC . ID LPAREN parameters RPAREN BEGIN statements END

    ID              shift and go to state 4


state 3

    (0) S' -> program .
    (1) program -> program . function
    (23) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (24) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 5

state 4

    (23) function -> FUNC ID . LPAREN parameters RPAREN locals BEGIN statements END
    (24) function -> FUNC ID . LPAREN parameters RPAREN BEGIN statements END

    LPAREN          shift and go to state 6


state 5

    (1) program -> program function .

    FUNC            reduce using rule 1 (program -> program function .)
    $end            reduce using rule 1 (program -> program function .)


state 6

    (23) function -> FUNC ID LPAREN . parameters RPAREN locals BEGIN statements END
    (24) function -> FUNC ID LPAREN . parameters RPAREN BEGIN statements END
    (25) parameters -> . parameters COMMA parm_declaration
    (26) parameters -> . parm_declaration
    (27) parameters -> . empty
    (28) parm_declaration -> . ID COLON TYPENAME
    (29) parm_declaration -> . ID COLON TYPENAME LBRACKET literal RBRACKET
    (68) empty -> .

    ID              shift and go to state 10
    RPAREN          reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)

    parm_declaration               shift and go to state 7
    parameters                     shift and go to state 8
    empty                          shift and go to state 9

state 7

    (26) parameters -> parm_declaration .

    RPAREN          reduce using rule 26 (parameters -> parm_declaration .)
    COMMA           reduce using rule 26 (parameters -> parm_declaration .)


state 8

    (23) function -> FUNC ID LPAREN parameters . RPAREN locals BEGIN statements END
    (24) function -> FUNC ID LPAREN parameters . RPAREN BEGIN statements END
    (25) parameters -> parameters . COMMA parm_declaration

    RPAREN          shift and go to state 11
    COMMA           shift and go to state 12


state 9

    (27) parameters -> empty .

    RPAREN          reduce using rule 27 (parameters -> empty .)
    COMMA           reduce using rule 27 (parameters -> empty .)


state 10

    (28) parm_declaration -> ID . COLON TYPENAME
    (29) parm_declaration -> ID . COLON TYPENAME LBRACKET literal RBRACKET

    COLON           shift and go to state 13


state 11

    (23) function -> FUNC ID LPAREN parameters RPAREN . locals BEGIN statements END
    (24) function -> FUNC ID LPAREN parameters RPAREN . BEGIN statements END
    (18) locals -> . locals local
    (19) locals -> . local
    (20) local -> . ID COLON TYPENAME SEMI
    (21) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET SEMI
    (22) local -> . function SEMI
    (23) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (24) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    BEGIN           shift and go to state 15
    ID              shift and go to state 17
    FUNC            shift and go to state 2

    function                       shift and go to state 14
    local                          shift and go to state 16
    locals                         shift and go to state 18

state 12

    (25) parameters -> parameters COMMA . parm_declaration
    (28) parm_declaration -> . ID COLON TYPENAME
    (29) parm_declaration -> . ID COLON TYPENAME LBRACKET literal RBRACKET

    ID              shift and go to state 10

    parm_declaration               shift and go to state 19

state 13

    (28) parm_declaration -> ID COLON . TYPENAME
    (29) parm_declaration -> ID COLON . TYPENAME LBRACKET literal RBRACKET

    TYPENAME        shift and go to state 20


state 14

    (22) local -> function . SEMI

    SEMI            shift and go to state 21


state 15

    (24) function -> FUNC ID LPAREN parameters RPAREN BEGIN . statements END
    (5) statements -> . statement
    (6) statements -> . statements SEMI statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    statements                     shift and go to state 22
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 30
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 16

    (19) locals -> local .

    BEGIN           reduce using rule 19 (locals -> local .)
    ID              reduce using rule 19 (locals -> local .)
    FUNC            reduce using rule 19 (locals -> local .)


state 17

    (20) local -> ID . COLON TYPENAME SEMI
    (21) local -> ID . COLON TYPENAME LBRACKET literal RBRACKET SEMI

    COLON           shift and go to state 43


state 18

    (23) function -> FUNC ID LPAREN parameters RPAREN locals . BEGIN statements END
    (18) locals -> locals . local
    (20) local -> . ID COLON TYPENAME SEMI
    (21) local -> . ID COLON TYPENAME LBRACKET literal RBRACKET SEMI
    (22) local -> . function SEMI
    (23) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
    (24) function -> . FUNC ID LPAREN parameters RPAREN BEGIN statements END

    BEGIN           shift and go to state 44
    ID              shift and go to state 17
    FUNC            shift and go to state 2

    function                       shift and go to state 14
    local                          shift and go to state 45

state 19

    (25) parameters -> parameters COMMA parm_declaration .

    RPAREN          reduce using rule 25 (parameters -> parameters COMMA parm_declaration .)
    COMMA           reduce using rule 25 (parameters -> parameters COMMA parm_declaration .)


state 20

    (28) parm_declaration -> ID COLON TYPENAME .
    (29) parm_declaration -> ID COLON TYPENAME . LBRACKET literal RBRACKET

    RPAREN          reduce using rule 28 (parm_declaration -> ID COLON TYPENAME .)
    COMMA           reduce using rule 28 (parm_declaration -> ID COLON TYPENAME .)
    LBRACKET        shift and go to state 46


state 21

    (22) local -> function SEMI .

    BEGIN           reduce using rule 22 (local -> function SEMI .)
    ID              reduce using rule 22 (local -> function SEMI .)
    FUNC            reduce using rule 22 (local -> function SEMI .)


state 22

    (24) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements . END
    (6) statements -> statements . SEMI statement

    END             shift and go to state 48
    SEMI            shift and go to state 47


state 23

    (37) read -> READ . LPAREN location RPAREN

    LPAREN          shift and go to state 49


state 24

    (16) statement -> funcall .

    END             reduce using rule 16 (statement -> funcall .)
    SEMI            reduce using rule 16 (statement -> funcall .)
    ELSE            reduce using rule 16 (statement -> funcall .)


state 25

    (32) while -> WHILE . cond DO st
    (47) cond -> . expression LT expression
    (48) cond -> . expression GT expression
    (49) cond -> . expression LE expression
    (50) cond -> . expression GE expression
    (51) cond -> . expression EQ expression
    (52) cond -> . expression NE expression
    (53) cond -> . cond LAND cond
    (54) cond -> . cond LOR cond
    (55) cond -> . LNOT cond
    (56) cond -> . LPAREN cond RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    LNOT            shift and go to state 50
    LPAREN          shift and go to state 59
    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    cond                           shift and go to state 52
    location                       shift and go to state 56
    expression                     shift and go to state 62

state 26

    (34) print -> PRINT . LPAREN literal RPAREN

    LPAREN          shift and go to state 63


state 27

    (9) statement -> if .

    END             reduce using rule 9 (statement -> if .)
    SEMI            reduce using rule 9 (statement -> if .)
    ELSE            reduce using rule 9 (statement -> if .)


state 28

    (15) statement -> write .

    END             reduce using rule 15 (statement -> write .)
    SEMI            reduce using rule 15 (statement -> write .)
    ELSE            reduce using rule 15 (statement -> write .)


state 29

    (33) assign -> location . ASSIGN expression

    ASSIGN          shift and go to state 64


state 30

    (5) statements -> statement .

    END             reduce using rule 5 (statements -> statement .)
    SEMI            reduce using rule 5 (statements -> statement .)


state 31

    (8) statement -> print .

    END             reduce using rule 8 (statement -> print .)
    SEMI            reduce using rule 8 (statement -> print .)
    ELSE            reduce using rule 8 (statement -> print .)


state 32

    (17) statement -> return .

    END             reduce using rule 17 (statement -> return .)
    SEMI            reduce using rule 17 (statement -> return .)
    ELSE            reduce using rule 17 (statement -> return .)


state 33

    (14) statement -> read .

    END             reduce using rule 14 (statement -> read .)
    SEMI            reduce using rule 14 (statement -> read .)
    ELSE            reduce using rule 14 (statement -> read .)


state 34

    (13) statement -> SKIP .

    END             reduce using rule 13 (statement -> SKIP .)
    SEMI            reduce using rule 13 (statement -> SKIP .)
    ELSE            reduce using rule 13 (statement -> SKIP .)


state 35

    (35) write -> WRITE . LPAREN expression RPAREN

    LPAREN          shift and go to state 65


state 36

    (38) funcall -> ID . LPAREN exprlist RPAREN
    (66) location -> ID .
    (67) location -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 67
    PLUS            reduce using rule 66 (location -> ID .)
    MINUS           reduce using rule 66 (location -> ID .)
    TIMES           reduce using rule 66 (location -> ID .)
    DIVIDE          reduce using rule 66 (location -> ID .)
    LT              reduce using rule 66 (location -> ID .)
    GT              reduce using rule 66 (location -> ID .)
    LE              reduce using rule 66 (location -> ID .)
    GE              reduce using rule 66 (location -> ID .)
    EQ              reduce using rule 66 (location -> ID .)
    NE              reduce using rule 66 (location -> ID .)
    END             reduce using rule 66 (location -> ID .)
    SEMI            reduce using rule 66 (location -> ID .)
    ELSE            reduce using rule 66 (location -> ID .)
    RPAREN          reduce using rule 66 (location -> ID .)
    RBRACKET        reduce using rule 66 (location -> ID .)
    COMMA           reduce using rule 66 (location -> ID .)
    DO              reduce using rule 66 (location -> ID .)
    LAND            reduce using rule 66 (location -> ID .)
    LOR             reduce using rule 66 (location -> ID .)
    THEN            reduce using rule 66 (location -> ID .)
    ASSIGN          reduce using rule 66 (location -> ID .)
    LBRACKET        shift and go to state 66


state 37

    (30) if -> IF . cond THEN st
    (31) if_else -> IF . cond THEN st ELSE st
    (47) cond -> . expression LT expression
    (48) cond -> . expression GT expression
    (49) cond -> . expression LE expression
    (50) cond -> . expression GE expression
    (51) cond -> . expression EQ expression
    (52) cond -> . expression NE expression
    (53) cond -> . cond LAND cond
    (54) cond -> . cond LOR cond
    (55) cond -> . LNOT cond
    (56) cond -> . LPAREN cond RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    LNOT            shift and go to state 50
    LPAREN          shift and go to state 59
    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    cond                           shift and go to state 68
    location                       shift and go to state 56
    expression                     shift and go to state 62

state 38

    (36) return -> RETURN . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 70
    location                       shift and go to state 56

state 39

    (12) statement -> BREAK .

    END             reduce using rule 12 (statement -> BREAK .)
    SEMI            reduce using rule 12 (statement -> BREAK .)
    ELSE            reduce using rule 12 (statement -> BREAK .)


state 40

    (11) statement -> while .

    END             reduce using rule 11 (statement -> while .)
    SEMI            reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)


state 41

    (10) statement -> if_else .

    END             reduce using rule 10 (statement -> if_else .)
    SEMI            reduce using rule 10 (statement -> if_else .)
    ELSE            reduce using rule 10 (statement -> if_else .)


state 42

    (7) statement -> assign .

    END             reduce using rule 7 (statement -> assign .)
    SEMI            reduce using rule 7 (statement -> assign .)
    ELSE            reduce using rule 7 (statement -> assign .)


state 43

    (20) local -> ID COLON . TYPENAME SEMI
    (21) local -> ID COLON . TYPENAME LBRACKET literal RBRACKET SEMI

    TYPENAME        shift and go to state 71


state 44

    (23) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN . statements END
    (5) statements -> . statement
    (6) statements -> . statements SEMI statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    statements                     shift and go to state 72
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 30
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 45

    (18) locals -> locals local .

    BEGIN           reduce using rule 18 (locals -> locals local .)
    ID              reduce using rule 18 (locals -> locals local .)
    FUNC            reduce using rule 18 (locals -> locals local .)


state 46

    (29) parm_declaration -> ID COLON TYPENAME LBRACKET . literal RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    literal                        shift and go to state 73

state 47

    (6) statements -> statements SEMI . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    if_else                        shift and go to state 41
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 74
    print                          shift and go to state 31
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 48

    (24) function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .

    SEMI            reduce using rule 24 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    FUNC            reduce using rule 24 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)
    $end            reduce using rule 24 (function -> FUNC ID LPAREN parameters RPAREN BEGIN statements END .)


state 49

    (37) read -> READ LPAREN . location RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 76

    location                       shift and go to state 75

state 50

    (55) cond -> LNOT . cond
    (47) cond -> . expression LT expression
    (48) cond -> . expression GT expression
    (49) cond -> . expression LE expression
    (50) cond -> . expression GE expression
    (51) cond -> . expression EQ expression
    (52) cond -> . expression NE expression
    (53) cond -> . cond LAND cond
    (54) cond -> . cond LOR cond
    (55) cond -> . LNOT cond
    (56) cond -> . LPAREN cond RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    LNOT            shift and go to state 50
    LPAREN          shift and go to state 59
    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    cond                           shift and go to state 77
    location                       shift and go to state 56
    expression                     shift and go to state 62

state 51

    (42) expression -> funcall .

    RPAREN          reduce using rule 42 (expression -> funcall .)
    PLUS            reduce using rule 42 (expression -> funcall .)
    MINUS           reduce using rule 42 (expression -> funcall .)
    TIMES           reduce using rule 42 (expression -> funcall .)
    DIVIDE          reduce using rule 42 (expression -> funcall .)
    LT              reduce using rule 42 (expression -> funcall .)
    GT              reduce using rule 42 (expression -> funcall .)
    LE              reduce using rule 42 (expression -> funcall .)
    GE              reduce using rule 42 (expression -> funcall .)
    EQ              reduce using rule 42 (expression -> funcall .)
    NE              reduce using rule 42 (expression -> funcall .)
    END             reduce using rule 42 (expression -> funcall .)
    SEMI            reduce using rule 42 (expression -> funcall .)
    ELSE            reduce using rule 42 (expression -> funcall .)
    RBRACKET        reduce using rule 42 (expression -> funcall .)
    COMMA           reduce using rule 42 (expression -> funcall .)
    DO              reduce using rule 42 (expression -> funcall .)
    LAND            reduce using rule 42 (expression -> funcall .)
    LOR             reduce using rule 42 (expression -> funcall .)
    THEN            reduce using rule 42 (expression -> funcall .)


state 52

    (32) while -> WHILE cond . DO st
    (53) cond -> cond . LAND cond
    (54) cond -> cond . LOR cond

    DO              shift and go to state 78
    LAND            shift and go to state 79
    LOR             shift and go to state 80


state 53

    (40) expression -> MINUS . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 81
    location                       shift and go to state 56

state 54

    (65) literal -> STRING .

    PLUS            reduce using rule 65 (literal -> STRING .)
    MINUS           reduce using rule 65 (literal -> STRING .)
    TIMES           reduce using rule 65 (literal -> STRING .)
    DIVIDE          reduce using rule 65 (literal -> STRING .)
    RPAREN          reduce using rule 65 (literal -> STRING .)
    COMMA           reduce using rule 65 (literal -> STRING .)
    RBRACKET        reduce using rule 65 (literal -> STRING .)
    DO              reduce using rule 65 (literal -> STRING .)
    LAND            reduce using rule 65 (literal -> STRING .)
    LOR             reduce using rule 65 (literal -> STRING .)
    THEN            reduce using rule 65 (literal -> STRING .)
    LT              reduce using rule 65 (literal -> STRING .)
    GT              reduce using rule 65 (literal -> STRING .)
    LE              reduce using rule 65 (literal -> STRING .)
    GE              reduce using rule 65 (literal -> STRING .)
    EQ              reduce using rule 65 (literal -> STRING .)
    NE              reduce using rule 65 (literal -> STRING .)
    END             reduce using rule 65 (literal -> STRING .)
    SEMI            reduce using rule 65 (literal -> STRING .)
    ELSE            reduce using rule 65 (literal -> STRING .)


state 55

    (39) expression -> PLUS . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 82
    location                       shift and go to state 56

state 56

    (57) expression -> location .

    RPAREN          reduce using rule 57 (expression -> location .)
    PLUS            reduce using rule 57 (expression -> location .)
    MINUS           reduce using rule 57 (expression -> location .)
    TIMES           reduce using rule 57 (expression -> location .)
    DIVIDE          reduce using rule 57 (expression -> location .)
    LT              reduce using rule 57 (expression -> location .)
    GT              reduce using rule 57 (expression -> location .)
    LE              reduce using rule 57 (expression -> location .)
    GE              reduce using rule 57 (expression -> location .)
    EQ              reduce using rule 57 (expression -> location .)
    NE              reduce using rule 57 (expression -> location .)
    END             reduce using rule 57 (expression -> location .)
    SEMI            reduce using rule 57 (expression -> location .)
    ELSE            reduce using rule 57 (expression -> location .)
    RBRACKET        reduce using rule 57 (expression -> location .)
    COMMA           reduce using rule 57 (expression -> location .)
    DO              reduce using rule 57 (expression -> location .)
    LAND            reduce using rule 57 (expression -> location .)
    LOR             reduce using rule 57 (expression -> location .)
    THEN            reduce using rule 57 (expression -> location .)


state 57

    (63) literal -> INTEGER .

    PLUS            reduce using rule 63 (literal -> INTEGER .)
    MINUS           reduce using rule 63 (literal -> INTEGER .)
    TIMES           reduce using rule 63 (literal -> INTEGER .)
    DIVIDE          reduce using rule 63 (literal -> INTEGER .)
    RPAREN          reduce using rule 63 (literal -> INTEGER .)
    COMMA           reduce using rule 63 (literal -> INTEGER .)
    RBRACKET        reduce using rule 63 (literal -> INTEGER .)
    DO              reduce using rule 63 (literal -> INTEGER .)
    LAND            reduce using rule 63 (literal -> INTEGER .)
    LOR             reduce using rule 63 (literal -> INTEGER .)
    THEN            reduce using rule 63 (literal -> INTEGER .)
    LT              reduce using rule 63 (literal -> INTEGER .)
    GT              reduce using rule 63 (literal -> INTEGER .)
    LE              reduce using rule 63 (literal -> INTEGER .)
    GE              reduce using rule 63 (literal -> INTEGER .)
    EQ              reduce using rule 63 (literal -> INTEGER .)
    NE              reduce using rule 63 (literal -> INTEGER .)
    END             reduce using rule 63 (literal -> INTEGER .)
    SEMI            reduce using rule 63 (literal -> INTEGER .)
    ELSE            reduce using rule 63 (literal -> INTEGER .)


state 58

    (58) expression -> literal .

    RPAREN          reduce using rule 58 (expression -> literal .)
    PLUS            reduce using rule 58 (expression -> literal .)
    MINUS           reduce using rule 58 (expression -> literal .)
    TIMES           reduce using rule 58 (expression -> literal .)
    DIVIDE          reduce using rule 58 (expression -> literal .)
    LT              reduce using rule 58 (expression -> literal .)
    GT              reduce using rule 58 (expression -> literal .)
    LE              reduce using rule 58 (expression -> literal .)
    GE              reduce using rule 58 (expression -> literal .)
    EQ              reduce using rule 58 (expression -> literal .)
    NE              reduce using rule 58 (expression -> literal .)
    END             reduce using rule 58 (expression -> literal .)
    SEMI            reduce using rule 58 (expression -> literal .)
    ELSE            reduce using rule 58 (expression -> literal .)
    RBRACKET        reduce using rule 58 (expression -> literal .)
    COMMA           reduce using rule 58 (expression -> literal .)
    DO              reduce using rule 58 (expression -> literal .)
    LAND            reduce using rule 58 (expression -> literal .)
    LOR             reduce using rule 58 (expression -> literal .)
    THEN            reduce using rule 58 (expression -> literal .)


state 59

    (56) cond -> LPAREN . cond RPAREN
    (41) expression -> LPAREN . expression RPAREN
    (47) cond -> . expression LT expression
    (48) cond -> . expression GT expression
    (49) cond -> . expression LE expression
    (50) cond -> . expression GE expression
    (51) cond -> . expression EQ expression
    (52) cond -> . expression NE expression
    (53) cond -> . cond LAND cond
    (54) cond -> . cond LOR cond
    (55) cond -> . LNOT cond
    (56) cond -> . LPAREN cond RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    LNOT            shift and go to state 50
    LPAREN          shift and go to state 59
    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    cond                           shift and go to state 83
    location                       shift and go to state 56
    expression                     shift and go to state 84

state 60

    (64) literal -> FLOAT .

    PLUS            reduce using rule 64 (literal -> FLOAT .)
    MINUS           reduce using rule 64 (literal -> FLOAT .)
    TIMES           reduce using rule 64 (literal -> FLOAT .)
    DIVIDE          reduce using rule 64 (literal -> FLOAT .)
    RPAREN          reduce using rule 64 (literal -> FLOAT .)
    COMMA           reduce using rule 64 (literal -> FLOAT .)
    RBRACKET        reduce using rule 64 (literal -> FLOAT .)
    DO              reduce using rule 64 (literal -> FLOAT .)
    LAND            reduce using rule 64 (literal -> FLOAT .)
    LOR             reduce using rule 64 (literal -> FLOAT .)
    THEN            reduce using rule 64 (literal -> FLOAT .)
    LT              reduce using rule 64 (literal -> FLOAT .)
    GT              reduce using rule 64 (literal -> FLOAT .)
    LE              reduce using rule 64 (literal -> FLOAT .)
    GE              reduce using rule 64 (literal -> FLOAT .)
    EQ              reduce using rule 64 (literal -> FLOAT .)
    NE              reduce using rule 64 (literal -> FLOAT .)
    END             reduce using rule 64 (literal -> FLOAT .)
    SEMI            reduce using rule 64 (literal -> FLOAT .)
    ELSE            reduce using rule 64 (literal -> FLOAT .)


state 61

    (59) expression -> TYPENAME . LPAREN expression RPAREN

    LPAREN          shift and go to state 85


state 62

    (47) cond -> expression . LT expression
    (48) cond -> expression . GT expression
    (49) cond -> expression . LE expression
    (50) cond -> expression . GE expression
    (51) cond -> expression . EQ expression
    (52) cond -> expression . NE expression
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    LT              shift and go to state 89
    GT              shift and go to state 86
    LE              shift and go to state 92
    GE              shift and go to state 91
    EQ              shift and go to state 88
    NE              shift and go to state 90
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 63

    (34) print -> PRINT LPAREN . literal RPAREN
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    literal                        shift and go to state 96

state 64

    (33) assign -> location ASSIGN . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 97
    location                       shift and go to state 56

state 65

    (35) write -> WRITE LPAREN . expression RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 98
    location                       shift and go to state 56

state 66

    (67) location -> ID LBRACKET . expression RBRACKET
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 99
    location                       shift and go to state 56

state 67

    (38) funcall -> ID LPAREN . exprlist RPAREN
    (60) exprlist -> . exprlist COMMA expression
    (61) exprlist -> . expression
    (62) exprlist -> . empty
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (68) empty -> .
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    RPAREN          reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    location                       shift and go to state 56
    expression                     shift and go to state 101
    exprlist                       shift and go to state 100
    empty                          shift and go to state 102

state 68

    (30) if -> IF cond . THEN st
    (31) if_else -> IF cond . THEN st ELSE st
    (53) cond -> cond . LAND cond
    (54) cond -> cond . LOR cond

    THEN            shift and go to state 103
    LAND            shift and go to state 79
    LOR             shift and go to state 80


state 69

    (41) expression -> LPAREN . expression RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 104
    location                       shift and go to state 56

state 70

    (36) return -> RETURN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    END             reduce using rule 36 (return -> RETURN expression .)
    SEMI            reduce using rule 36 (return -> RETURN expression .)
    ELSE            reduce using rule 36 (return -> RETURN expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 71

    (20) local -> ID COLON TYPENAME . SEMI
    (21) local -> ID COLON TYPENAME . LBRACKET literal RBRACKET SEMI

    SEMI            shift and go to state 105
    LBRACKET        shift and go to state 106


state 72

    (23) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements . END
    (6) statements -> statements . SEMI statement

    END             shift and go to state 107
    SEMI            shift and go to state 47


state 73

    (29) parm_declaration -> ID COLON TYPENAME LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 108


state 74

    (6) statements -> statements SEMI statement .

    END             reduce using rule 6 (statements -> statements SEMI statement .)
    SEMI            reduce using rule 6 (statements -> statements SEMI statement .)


state 75

    (37) read -> READ LPAREN location . RPAREN

    RPAREN          shift and go to state 109


state 76

    (66) location -> ID .
    (67) location -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 66 (location -> ID .)
    LBRACKET        shift and go to state 66


state 77

    (55) cond -> LNOT cond .
    (53) cond -> cond . LAND cond
    (54) cond -> cond . LOR cond

    DO              reduce using rule 55 (cond -> LNOT cond .)
    LAND            reduce using rule 55 (cond -> LNOT cond .)
    LOR             reduce using rule 55 (cond -> LNOT cond .)
    THEN            reduce using rule 55 (cond -> LNOT cond .)
    RPAREN          reduce using rule 55 (cond -> LNOT cond .)

  ! LAND            [ shift and go to state 79 ]
  ! LOR             [ shift and go to state 80 ]


state 78

    (32) while -> WHILE cond DO . st
    (3) st -> . BEGIN statements END
    (4) st -> . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 110
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    read                           shift and go to state 33
    return                         shift and go to state 32
    st                             shift and go to state 112
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 111
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 79

    (53) cond -> cond LAND . cond
    (47) cond -> . expression LT expression
    (48) cond -> . expression GT expression
    (49) cond -> . expression LE expression
    (50) cond -> . expression GE expression
    (51) cond -> . expression EQ expression
    (52) cond -> . expression NE expression
    (53) cond -> . cond LAND cond
    (54) cond -> . cond LOR cond
    (55) cond -> . LNOT cond
    (56) cond -> . LPAREN cond RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    LNOT            shift and go to state 50
    LPAREN          shift and go to state 59
    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    cond                           shift and go to state 113
    location                       shift and go to state 56
    expression                     shift and go to state 62

state 80

    (54) cond -> cond LOR . cond
    (47) cond -> . expression LT expression
    (48) cond -> . expression GT expression
    (49) cond -> . expression LE expression
    (50) cond -> . expression GE expression
    (51) cond -> . expression EQ expression
    (52) cond -> . expression NE expression
    (53) cond -> . cond LAND cond
    (54) cond -> . cond LOR cond
    (55) cond -> . LNOT cond
    (56) cond -> . LPAREN cond RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    LNOT            shift and go to state 50
    LPAREN          shift and go to state 59
    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    cond                           shift and go to state 114
    location                       shift and go to state 56
    expression                     shift and go to state 62

state 81

    (40) expression -> MINUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 40 (expression -> MINUS expression .)
    PLUS            reduce using rule 40 (expression -> MINUS expression .)
    MINUS           reduce using rule 40 (expression -> MINUS expression .)
    TIMES           reduce using rule 40 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 40 (expression -> MINUS expression .)
    LT              reduce using rule 40 (expression -> MINUS expression .)
    GT              reduce using rule 40 (expression -> MINUS expression .)
    LE              reduce using rule 40 (expression -> MINUS expression .)
    GE              reduce using rule 40 (expression -> MINUS expression .)
    EQ              reduce using rule 40 (expression -> MINUS expression .)
    NE              reduce using rule 40 (expression -> MINUS expression .)
    END             reduce using rule 40 (expression -> MINUS expression .)
    SEMI            reduce using rule 40 (expression -> MINUS expression .)
    ELSE            reduce using rule 40 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 40 (expression -> MINUS expression .)
    COMMA           reduce using rule 40 (expression -> MINUS expression .)
    DO              reduce using rule 40 (expression -> MINUS expression .)
    LAND            reduce using rule 40 (expression -> MINUS expression .)
    LOR             reduce using rule 40 (expression -> MINUS expression .)
    THEN            reduce using rule 40 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 93 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 87 ]


state 82

    (39) expression -> PLUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 39 (expression -> PLUS expression .)
    PLUS            reduce using rule 39 (expression -> PLUS expression .)
    MINUS           reduce using rule 39 (expression -> PLUS expression .)
    TIMES           reduce using rule 39 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 39 (expression -> PLUS expression .)
    LT              reduce using rule 39 (expression -> PLUS expression .)
    GT              reduce using rule 39 (expression -> PLUS expression .)
    LE              reduce using rule 39 (expression -> PLUS expression .)
    GE              reduce using rule 39 (expression -> PLUS expression .)
    EQ              reduce using rule 39 (expression -> PLUS expression .)
    NE              reduce using rule 39 (expression -> PLUS expression .)
    END             reduce using rule 39 (expression -> PLUS expression .)
    SEMI            reduce using rule 39 (expression -> PLUS expression .)
    ELSE            reduce using rule 39 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 39 (expression -> PLUS expression .)
    COMMA           reduce using rule 39 (expression -> PLUS expression .)
    DO              reduce using rule 39 (expression -> PLUS expression .)
    LAND            reduce using rule 39 (expression -> PLUS expression .)
    LOR             reduce using rule 39 (expression -> PLUS expression .)
    THEN            reduce using rule 39 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 93 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 87 ]


state 83

    (56) cond -> LPAREN cond . RPAREN
    (53) cond -> cond . LAND cond
    (54) cond -> cond . LOR cond

    RPAREN          shift and go to state 115
    LAND            shift and go to state 79
    LOR             shift and go to state 80


state 84

    (41) expression -> LPAREN expression . RPAREN
    (47) cond -> expression . LT expression
    (48) cond -> expression . GT expression
    (49) cond -> expression . LE expression
    (50) cond -> expression . GE expression
    (51) cond -> expression . EQ expression
    (52) cond -> expression . NE expression
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 116
    LT              shift and go to state 89
    GT              shift and go to state 86
    LE              shift and go to state 92
    GE              shift and go to state 91
    EQ              shift and go to state 88
    NE              shift and go to state 90
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 85

    (59) expression -> TYPENAME LPAREN . expression RPAREN
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 117
    location                       shift and go to state 56

state 86

    (48) cond -> expression GT . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 118
    location                       shift and go to state 56

state 87

    (46) expression -> expression DIVIDE . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 119
    location                       shift and go to state 56

state 88

    (51) cond -> expression EQ . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 120
    location                       shift and go to state 56

state 89

    (47) cond -> expression LT . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 121
    location                       shift and go to state 56

state 90

    (52) cond -> expression NE . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 122
    location                       shift and go to state 56

state 91

    (50) cond -> expression GE . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 123
    location                       shift and go to state 56

state 92

    (49) cond -> expression LE . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 124
    location                       shift and go to state 56

state 93

    (43) expression -> expression PLUS . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 125
    location                       shift and go to state 56

state 94

    (45) expression -> expression TIMES . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 126
    location                       shift and go to state 56

state 95

    (44) expression -> expression MINUS . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 127
    location                       shift and go to state 56

state 96

    (34) print -> PRINT LPAREN literal . RPAREN

    RPAREN          shift and go to state 128


state 97

    (33) assign -> location ASSIGN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    END             reduce using rule 33 (assign -> location ASSIGN expression .)
    SEMI            reduce using rule 33 (assign -> location ASSIGN expression .)
    ELSE            reduce using rule 33 (assign -> location ASSIGN expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 98

    (35) write -> WRITE LPAREN expression . RPAREN
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 129
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 99

    (67) location -> ID LBRACKET expression . RBRACKET
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RBRACKET        shift and go to state 130
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 100

    (38) funcall -> ID LPAREN exprlist . RPAREN
    (60) exprlist -> exprlist . COMMA expression

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 132


state 101

    (61) exprlist -> expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 61 (exprlist -> expression .)
    COMMA           reduce using rule 61 (exprlist -> expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 102

    (62) exprlist -> empty .

    RPAREN          reduce using rule 62 (exprlist -> empty .)
    COMMA           reduce using rule 62 (exprlist -> empty .)


state 103

    (30) if -> IF cond THEN . st
    (31) if_else -> IF cond THEN . st ELSE st
    (3) st -> . BEGIN statements END
    (4) st -> . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 110
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    read                           shift and go to state 33
    return                         shift and go to state 32
    st                             shift and go to state 133
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 111
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 104

    (41) expression -> LPAREN expression . RPAREN
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 105

    (20) local -> ID COLON TYPENAME SEMI .

    BEGIN           reduce using rule 20 (local -> ID COLON TYPENAME SEMI .)
    ID              reduce using rule 20 (local -> ID COLON TYPENAME SEMI .)
    FUNC            reduce using rule 20 (local -> ID COLON TYPENAME SEMI .)


state 106

    (21) local -> ID COLON TYPENAME LBRACKET . literal RBRACKET SEMI
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    literal                        shift and go to state 134

state 107

    (23) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .

    SEMI            reduce using rule 23 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    FUNC            reduce using rule 23 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    $end            reduce using rule 23 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)


state 108

    (29) parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .

    RPAREN          reduce using rule 29 (parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .)
    COMMA           reduce using rule 29 (parm_declaration -> ID COLON TYPENAME LBRACKET literal RBRACKET .)


state 109

    (37) read -> READ LPAREN location RPAREN .

    END             reduce using rule 37 (read -> READ LPAREN location RPAREN .)
    SEMI            reduce using rule 37 (read -> READ LPAREN location RPAREN .)
    ELSE            reduce using rule 37 (read -> READ LPAREN location RPAREN .)


state 110

    (3) st -> BEGIN . statements END
    (5) statements -> . statement
    (6) statements -> . statements SEMI statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    if_else                        shift and go to state 41
    read                           shift and go to state 33
    return                         shift and go to state 32
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 30
    print                          shift and go to state 31
    statements                     shift and go to state 135
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 111

    (4) st -> statement .

    END             reduce using rule 4 (st -> statement .)
    SEMI            reduce using rule 4 (st -> statement .)
    ELSE            reduce using rule 4 (st -> statement .)


state 112

    (32) while -> WHILE cond DO st .

    END             reduce using rule 32 (while -> WHILE cond DO st .)
    SEMI            reduce using rule 32 (while -> WHILE cond DO st .)
    ELSE            reduce using rule 32 (while -> WHILE cond DO st .)


state 113

    (53) cond -> cond LAND cond .
    (53) cond -> cond . LAND cond
    (54) cond -> cond . LOR cond

    DO              reduce using rule 53 (cond -> cond LAND cond .)
    LAND            reduce using rule 53 (cond -> cond LAND cond .)
    LOR             reduce using rule 53 (cond -> cond LAND cond .)
    THEN            reduce using rule 53 (cond -> cond LAND cond .)
    RPAREN          reduce using rule 53 (cond -> cond LAND cond .)

  ! LAND            [ shift and go to state 79 ]
  ! LOR             [ shift and go to state 80 ]


state 114

    (54) cond -> cond LOR cond .
    (53) cond -> cond . LAND cond
    (54) cond -> cond . LOR cond

    DO              reduce using rule 54 (cond -> cond LOR cond .)
    LOR             reduce using rule 54 (cond -> cond LOR cond .)
    THEN            reduce using rule 54 (cond -> cond LOR cond .)
    RPAREN          reduce using rule 54 (cond -> cond LOR cond .)
    LAND            shift and go to state 79

  ! LAND            [ reduce using rule 54 (cond -> cond LOR cond .) ]
  ! LOR             [ shift and go to state 80 ]


state 115

    (56) cond -> LPAREN cond RPAREN .

    DO              reduce using rule 56 (cond -> LPAREN cond RPAREN .)
    LAND            reduce using rule 56 (cond -> LPAREN cond RPAREN .)
    LOR             reduce using rule 56 (cond -> LPAREN cond RPAREN .)
    THEN            reduce using rule 56 (cond -> LPAREN cond RPAREN .)
    RPAREN          reduce using rule 56 (cond -> LPAREN cond RPAREN .)


state 116

    (41) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 41 (expression -> LPAREN expression RPAREN .)


state 117

    (59) expression -> TYPENAME LPAREN expression . RPAREN
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 118

    (48) cond -> expression GT expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    DO              reduce using rule 48 (cond -> expression GT expression .)
    LAND            reduce using rule 48 (cond -> expression GT expression .)
    LOR             reduce using rule 48 (cond -> expression GT expression .)
    THEN            reduce using rule 48 (cond -> expression GT expression .)
    RPAREN          reduce using rule 48 (cond -> expression GT expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 119

    (46) expression -> expression DIVIDE expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 46 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 46 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 46 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 46 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 46 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 46 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 46 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 46 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 46 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 46 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 46 (expression -> expression DIVIDE expression .)
    END             reduce using rule 46 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 46 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 46 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 46 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 46 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 46 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 46 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 46 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 46 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 93 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 87 ]


state 120

    (51) cond -> expression EQ expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    DO              reduce using rule 51 (cond -> expression EQ expression .)
    LAND            reduce using rule 51 (cond -> expression EQ expression .)
    LOR             reduce using rule 51 (cond -> expression EQ expression .)
    THEN            reduce using rule 51 (cond -> expression EQ expression .)
    RPAREN          reduce using rule 51 (cond -> expression EQ expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 121

    (47) cond -> expression LT expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    DO              reduce using rule 47 (cond -> expression LT expression .)
    LAND            reduce using rule 47 (cond -> expression LT expression .)
    LOR             reduce using rule 47 (cond -> expression LT expression .)
    THEN            reduce using rule 47 (cond -> expression LT expression .)
    RPAREN          reduce using rule 47 (cond -> expression LT expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 122

    (52) cond -> expression NE expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    DO              reduce using rule 52 (cond -> expression NE expression .)
    LAND            reduce using rule 52 (cond -> expression NE expression .)
    LOR             reduce using rule 52 (cond -> expression NE expression .)
    THEN            reduce using rule 52 (cond -> expression NE expression .)
    RPAREN          reduce using rule 52 (cond -> expression NE expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 123

    (50) cond -> expression GE expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    DO              reduce using rule 50 (cond -> expression GE expression .)
    LAND            reduce using rule 50 (cond -> expression GE expression .)
    LOR             reduce using rule 50 (cond -> expression GE expression .)
    THEN            reduce using rule 50 (cond -> expression GE expression .)
    RPAREN          reduce using rule 50 (cond -> expression GE expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 124

    (49) cond -> expression LE expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    DO              reduce using rule 49 (cond -> expression LE expression .)
    LAND            reduce using rule 49 (cond -> expression LE expression .)
    LOR             reduce using rule 49 (cond -> expression LE expression .)
    THEN            reduce using rule 49 (cond -> expression LE expression .)
    RPAREN          reduce using rule 49 (cond -> expression LE expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 125

    (43) expression -> expression PLUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 43 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 43 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 43 (expression -> expression PLUS expression .)
    LT              reduce using rule 43 (expression -> expression PLUS expression .)
    GT              reduce using rule 43 (expression -> expression PLUS expression .)
    LE              reduce using rule 43 (expression -> expression PLUS expression .)
    GE              reduce using rule 43 (expression -> expression PLUS expression .)
    EQ              reduce using rule 43 (expression -> expression PLUS expression .)
    NE              reduce using rule 43 (expression -> expression PLUS expression .)
    END             reduce using rule 43 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 43 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 43 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 43 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 43 (expression -> expression PLUS expression .)
    DO              reduce using rule 43 (expression -> expression PLUS expression .)
    LAND            reduce using rule 43 (expression -> expression PLUS expression .)
    LOR             reduce using rule 43 (expression -> expression PLUS expression .)
    THEN            reduce using rule 43 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87

  ! TIMES           [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 93 ]
  ! MINUS           [ shift and go to state 95 ]


state 126

    (45) expression -> expression TIMES expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 45 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 45 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 45 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 45 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 45 (expression -> expression TIMES expression .)
    LT              reduce using rule 45 (expression -> expression TIMES expression .)
    GT              reduce using rule 45 (expression -> expression TIMES expression .)
    LE              reduce using rule 45 (expression -> expression TIMES expression .)
    GE              reduce using rule 45 (expression -> expression TIMES expression .)
    EQ              reduce using rule 45 (expression -> expression TIMES expression .)
    NE              reduce using rule 45 (expression -> expression TIMES expression .)
    END             reduce using rule 45 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 45 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 45 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 45 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 45 (expression -> expression TIMES expression .)
    DO              reduce using rule 45 (expression -> expression TIMES expression .)
    LAND            reduce using rule 45 (expression -> expression TIMES expression .)
    LOR             reduce using rule 45 (expression -> expression TIMES expression .)
    THEN            reduce using rule 45 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 93 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 87 ]


state 127

    (44) expression -> expression MINUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 44 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 44 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 44 (expression -> expression MINUS expression .)
    LT              reduce using rule 44 (expression -> expression MINUS expression .)
    GT              reduce using rule 44 (expression -> expression MINUS expression .)
    LE              reduce using rule 44 (expression -> expression MINUS expression .)
    GE              reduce using rule 44 (expression -> expression MINUS expression .)
    EQ              reduce using rule 44 (expression -> expression MINUS expression .)
    NE              reduce using rule 44 (expression -> expression MINUS expression .)
    END             reduce using rule 44 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 44 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 44 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 44 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 44 (expression -> expression MINUS expression .)
    DO              reduce using rule 44 (expression -> expression MINUS expression .)
    LAND            reduce using rule 44 (expression -> expression MINUS expression .)
    LOR             reduce using rule 44 (expression -> expression MINUS expression .)
    THEN            reduce using rule 44 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87

  ! TIMES           [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 93 ]
  ! MINUS           [ shift and go to state 95 ]


state 128

    (34) print -> PRINT LPAREN literal RPAREN .

    END             reduce using rule 34 (print -> PRINT LPAREN literal RPAREN .)
    SEMI            reduce using rule 34 (print -> PRINT LPAREN literal RPAREN .)
    ELSE            reduce using rule 34 (print -> PRINT LPAREN literal RPAREN .)


state 129

    (35) write -> WRITE LPAREN expression RPAREN .

    END             reduce using rule 35 (write -> WRITE LPAREN expression RPAREN .)
    SEMI            reduce using rule 35 (write -> WRITE LPAREN expression RPAREN .)
    ELSE            reduce using rule 35 (write -> WRITE LPAREN expression RPAREN .)


state 130

    (67) location -> ID LBRACKET expression RBRACKET .

    PLUS            reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    LAND            reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    LOR             reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 67 (location -> ID LBRACKET expression RBRACKET .)


state 131

    (38) funcall -> ID LPAREN exprlist RPAREN .

    PLUS            reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    END             reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    DO              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    LAND            reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    LOR             reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    THEN            reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    LE              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    GE              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    NE              reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 38 (funcall -> ID LPAREN exprlist RPAREN .)


state 132

    (60) exprlist -> exprlist COMMA . expression
    (39) expression -> . PLUS expression
    (40) expression -> . MINUS expression
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . funcall
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression TIMES expression
    (46) expression -> . expression DIVIDE expression
    (57) expression -> . location
    (58) expression -> . literal
    (59) expression -> . TYPENAME LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET
    (63) literal -> . INTEGER
    (64) literal -> . FLOAT
    (65) literal -> . STRING

    PLUS            shift and go to state 55
    MINUS           shift and go to state 53
    LPAREN          shift and go to state 69
    TYPENAME        shift and go to state 61
    ID              shift and go to state 36
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 60
    STRING          shift and go to state 54

    funcall                        shift and go to state 51
    literal                        shift and go to state 58
    expression                     shift and go to state 137
    location                       shift and go to state 56

state 133

    (30) if -> IF cond THEN st .
    (31) if_else -> IF cond THEN st . ELSE st

    END             reduce using rule 30 (if -> IF cond THEN st .)
    SEMI            reduce using rule 30 (if -> IF cond THEN st .)
    ELSE            shift and go to state 138

  ! ELSE            [ reduce using rule 30 (if -> IF cond THEN st .) ]


state 134

    (21) local -> ID COLON TYPENAME LBRACKET literal . RBRACKET SEMI

    RBRACKET        shift and go to state 139


state 135

    (3) st -> BEGIN statements . END
    (6) statements -> statements . SEMI statement

    END             shift and go to state 140
    SEMI            shift and go to state 47


state 136

    (59) expression -> TYPENAME LPAREN expression RPAREN .

    RPAREN          reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    TIMES           reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    LT              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    GT              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    LE              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    GE              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    EQ              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    NE              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    END             reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    SEMI            reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    ELSE            reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    DO              reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    LAND            reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    LOR             reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)
    THEN            reduce using rule 59 (expression -> TYPENAME LPAREN expression RPAREN .)


state 137

    (60) exprlist -> exprlist COMMA expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . TIMES expression
    (46) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 60 (exprlist -> exprlist COMMA expression .)
    COMMA           reduce using rule 60 (exprlist -> exprlist COMMA expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 95
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 87


state 138

    (31) if_else -> IF cond THEN st ELSE . st
    (3) st -> . BEGIN statements END
    (4) st -> . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (13) statement -> . SKIP
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall
    (17) statement -> . return
    (33) assign -> . location ASSIGN expression
    (34) print -> . PRINT LPAREN literal RPAREN
    (30) if -> . IF cond THEN st
    (31) if_else -> . IF cond THEN st ELSE st
    (32) while -> . WHILE cond DO st
    (37) read -> . READ LPAREN location RPAREN
    (35) write -> . WRITE LPAREN expression RPAREN
    (38) funcall -> . ID LPAREN exprlist RPAREN
    (36) return -> . RETURN expression
    (66) location -> . ID
    (67) location -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 110
    BREAK           shift and go to state 39
    SKIP            shift and go to state 34
    PRINT           shift and go to state 26
    IF              shift and go to state 37
    WHILE           shift and go to state 25
    READ            shift and go to state 23
    WRITE           shift and go to state 35
    ID              shift and go to state 36
    RETURN          shift and go to state 38

    funcall                        shift and go to state 24
    read                           shift and go to state 33
    return                         shift and go to state 32
    st                             shift and go to state 141
    write                          shift and go to state 28
    while                          shift and go to state 40
    location                       shift and go to state 29
    statement                      shift and go to state 111
    print                          shift and go to state 31
    if_else                        shift and go to state 41
    assign                         shift and go to state 42
    if                             shift and go to state 27

state 139

    (21) local -> ID COLON TYPENAME LBRACKET literal RBRACKET . SEMI

    SEMI            shift and go to state 142


state 140

    (3) st -> BEGIN statements END .

    END             reduce using rule 3 (st -> BEGIN statements END .)
    SEMI            reduce using rule 3 (st -> BEGIN statements END .)
    ELSE            reduce using rule 3 (st -> BEGIN statements END .)


state 141

    (31) if_else -> IF cond THEN st ELSE st .

    END             reduce using rule 31 (if_else -> IF cond THEN st ELSE st .)
    SEMI            reduce using rule 31 (if_else -> IF cond THEN st ELSE st .)
    ELSE            reduce using rule 31 (if_else -> IF cond THEN st ELSE st .)


state 142

    (21) local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .

    BEGIN           reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .)
    ID              reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .)
    FUNC            reduce using rule 21 (local -> ID COLON TYPENAME LBRACKET literal RBRACKET SEMI .)

