Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program function
Rule 2     program -> function
Rule 3     st -> BEGIN statements END
Rule 4     st -> statement
Rule 5     statements -> statement
Rule 6     statements -> statements statement
Rule 7     statement -> assign
Rule 8     statement -> print
Rule 9     statement -> if
Rule 10    statement -> if_else
Rule 11    statement -> while
Rule 12    statement -> BREAK SEMI
Rule 13    statement -> SKIP SEMI
Rule 14    statement -> read
Rule 15    statement -> write
Rule 16    statement -> funcall SEMI
Rule 17    statement -> return
Rule 18    locals -> locals local
Rule 19    locals -> local
Rule 20    local -> id COLON typename SEMI
Rule 21    local -> id COLON typename LBRACKET literal RBRACKET SEMI
Rule 22    function -> FUNC id LPAREN parameters RPAREN locals BEGIN statements END
Rule 23    function -> FUNC id LPAREN parameters RPAREN BEGIN statements END
Rule 24    parameters -> parameters COMMA parm_declaration
Rule 25    parameters -> parm_declaration
Rule 26    parameters -> empty
Rule 27    parm_declaration -> id COLON typename
Rule 28    parm_declaration -> id COLON typename LBRACKET literal RBRACKET
Rule 29    if -> IF cond THEN st
Rule 30    if_else -> IF cond THEN st ELSE st
Rule 31    while -> WHILE cond DO st
Rule 32    assign -> id ASSIGN expression SEMI
Rule 33    print -> PRINT LPAREN literal RPAREN SEMI
Rule 34    write -> WRITE LPAREN expression RPAREN SEMI
Rule 35    return -> RETURN expression SEMI
Rule 36    read -> READ LPAREN id RPAREN SEMI
Rule 37    funcall -> id LPAREN exprlist RPAREN
Rule 38    expression -> PLUS expression
Rule 39    expression -> MINUS expression
Rule 40    expression -> LPAREN expression RPAREN
Rule 41    expression -> funcall
Rule 42    expression -> expression PLUS expression
Rule 43    expression -> expression MINUS expression
Rule 44    expression -> expression TIMES expression
Rule 45    expression -> expression DIVIDE expression
Rule 46    cond -> expression LT expression
Rule 47    cond -> expression GT expression
Rule 48    cond -> expression LE expression
Rule 49    cond -> expression GE expression
Rule 50    cond -> expression EQ expression
Rule 51    cond -> expression NE expression
Rule 52    cond -> cond LAND cond
Rule 53    cond -> cond LOR cond
Rule 54    cond -> LNOT cond
Rule 55    cond -> LPAREN cond RPAREN
Rule 56    expression -> id
Rule 57    expression -> literal
Rule 58    expression -> typename LPAREN id RPAREN
Rule 59    exprlist -> exprlist COMMA expression
Rule 60    exprlist -> expression
Rule 61    exprlist -> empty
Rule 62    literal -> INTEGER
Rule 63    literal -> FLOAT
Rule 64    literal -> STRING
Rule 65    typename -> TYPENAME
Rule 66    id -> ID
Rule 67    id -> ID LBRACKET expression RBRACKET
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 32
BEGIN                : 3 22 23
BREAK                : 12
COLON                : 20 21 27 28
COMMA                : 24 59
DIVIDE               : 45
DO                   : 31
ELSE                 : 30
END                  : 3 22 23
EQ                   : 50
FLOAT                : 63
FUNC                 : 22 23
GE                   : 49
GT                   : 47
ID                   : 66 67
IF                   : 29 30
INTEGER              : 62
LAND                 : 52
LBRACKET             : 21 28 67
LE                   : 48
LNOT                 : 54
LOR                  : 53
LPAREN               : 22 23 33 34 36 37 40 55 58
LT                   : 46
MINUS                : 39 43
NE                   : 51
PLUS                 : 38 42
PRINT                : 33
RBRACKET             : 21 28 67
READ                 : 36
RETURN               : 35
RPAREN               : 22 23 33 34 36 37 40 55 58
SEMI                 : 12 13 16 20 21 32 33 34 35 36
SKIP                 : 13
STRING               : 64
THEN                 : 29 30
TIMES                : 44
TYPENAME             : 65
WHILE                : 31
WRITE                : 34
error                : 

Nonterminals, with rules where they appear

assign               : 7
cond                 : 29 30 31 52 52 53 53 54 55
empty                : 26 61
expression           : 32 34 35 38 39 40 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 59 60 67
exprlist             : 37 59
funcall              : 16 41
function             : 1 2
id                   : 20 21 22 23 27 28 32 36 37 56 58
if                   : 9
if_else              : 10
literal              : 21 28 33 57
local                : 18 19
locals               : 18 22
parameters           : 22 23 24
parm_declaration     : 24 25
print                : 8
program              : 1 0
read                 : 14
return               : 17
st                   : 29 30 30 31
statement            : 4 5 6
statements           : 3 6 22 23
typename             : 20 21 27 28 58
while                : 11
write                : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function
    (2) program -> . function
    (22) function -> . FUNC id LPAREN parameters RPAREN locals BEGIN statements END
    (23) function -> . FUNC id LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 1
    program                        shift and go to state 3

state 1

    (2) program -> function .

    FUNC            reduce using rule 2 (program -> function .)
    $end            reduce using rule 2 (program -> function .)


state 2

    (22) function -> FUNC . id LPAREN parameters RPAREN locals BEGIN statements END
    (23) function -> FUNC . id LPAREN parameters RPAREN BEGIN statements END
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 4

    id                             shift and go to state 5

state 3

    (0) S' -> program .
    (1) program -> program . function
    (22) function -> . FUNC id LPAREN parameters RPAREN locals BEGIN statements END
    (23) function -> . FUNC id LPAREN parameters RPAREN BEGIN statements END

    FUNC            shift and go to state 2

    function                       shift and go to state 6

state 4

    (66) id -> ID .
    (67) id -> ID . LBRACKET expression RBRACKET

    COLON           reduce using rule 66 (id -> ID .)
    LPAREN          reduce using rule 66 (id -> ID .)
    PLUS            reduce using rule 66 (id -> ID .)
    MINUS           reduce using rule 66 (id -> ID .)
    TIMES           reduce using rule 66 (id -> ID .)
    DIVIDE          reduce using rule 66 (id -> ID .)
    RBRACKET        reduce using rule 66 (id -> ID .)
    RPAREN          reduce using rule 66 (id -> ID .)
    COMMA           reduce using rule 66 (id -> ID .)
    LT              reduce using rule 66 (id -> ID .)
    GT              reduce using rule 66 (id -> ID .)
    LE              reduce using rule 66 (id -> ID .)
    GE              reduce using rule 66 (id -> ID .)
    EQ              reduce using rule 66 (id -> ID .)
    NE              reduce using rule 66 (id -> ID .)
    SEMI            reduce using rule 66 (id -> ID .)
    DO              reduce using rule 66 (id -> ID .)
    LAND            reduce using rule 66 (id -> ID .)
    LOR             reduce using rule 66 (id -> ID .)
    THEN            reduce using rule 66 (id -> ID .)
    ASSIGN          reduce using rule 66 (id -> ID .)
    LBRACKET        shift and go to state 7


state 5

    (22) function -> FUNC id . LPAREN parameters RPAREN locals BEGIN statements END
    (23) function -> FUNC id . LPAREN parameters RPAREN BEGIN statements END

    LPAREN          shift and go to state 8


state 6

    (1) program -> program function .

    FUNC            reduce using rule 1 (program -> program function .)
    $end            reduce using rule 1 (program -> program function .)


state 7

    (67) id -> ID LBRACKET . expression RBRACKET
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 19
    id                             shift and go to state 17

state 8

    (22) function -> FUNC id LPAREN . parameters RPAREN locals BEGIN statements END
    (23) function -> FUNC id LPAREN . parameters RPAREN BEGIN statements END
    (24) parameters -> . parameters COMMA parm_declaration
    (25) parameters -> . parm_declaration
    (26) parameters -> . empty
    (27) parm_declaration -> . id COLON typename
    (28) parm_declaration -> . id COLON typename LBRACKET literal RBRACKET
    (68) empty -> .
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    RPAREN          reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    ID              shift and go to state 4

    parm_declaration               shift and go to state 21
    parameters                     shift and go to state 22
    id                             shift and go to state 24
    empty                          shift and go to state 23

state 9

    (41) expression -> funcall .

    PLUS            reduce using rule 41 (expression -> funcall .)
    MINUS           reduce using rule 41 (expression -> funcall .)
    TIMES           reduce using rule 41 (expression -> funcall .)
    DIVIDE          reduce using rule 41 (expression -> funcall .)
    DO              reduce using rule 41 (expression -> funcall .)
    LAND            reduce using rule 41 (expression -> funcall .)
    LOR             reduce using rule 41 (expression -> funcall .)
    THEN            reduce using rule 41 (expression -> funcall .)
    RPAREN          reduce using rule 41 (expression -> funcall .)
    LT              reduce using rule 41 (expression -> funcall .)
    GT              reduce using rule 41 (expression -> funcall .)
    LE              reduce using rule 41 (expression -> funcall .)
    GE              reduce using rule 41 (expression -> funcall .)
    EQ              reduce using rule 41 (expression -> funcall .)
    NE              reduce using rule 41 (expression -> funcall .)
    RBRACKET        reduce using rule 41 (expression -> funcall .)
    COMMA           reduce using rule 41 (expression -> funcall .)
    SEMI            reduce using rule 41 (expression -> funcall .)


state 10

    (65) typename -> TYPENAME .

    LPAREN          reduce using rule 65 (typename -> TYPENAME .)
    SEMI            reduce using rule 65 (typename -> TYPENAME .)
    LBRACKET        reduce using rule 65 (typename -> TYPENAME .)
    RPAREN          reduce using rule 65 (typename -> TYPENAME .)
    COMMA           reduce using rule 65 (typename -> TYPENAME .)


state 11

    (63) literal -> FLOAT .

    PLUS            reduce using rule 63 (literal -> FLOAT .)
    MINUS           reduce using rule 63 (literal -> FLOAT .)
    TIMES           reduce using rule 63 (literal -> FLOAT .)
    DIVIDE          reduce using rule 63 (literal -> FLOAT .)
    RBRACKET        reduce using rule 63 (literal -> FLOAT .)
    RPAREN          reduce using rule 63 (literal -> FLOAT .)
    COMMA           reduce using rule 63 (literal -> FLOAT .)
    LT              reduce using rule 63 (literal -> FLOAT .)
    GT              reduce using rule 63 (literal -> FLOAT .)
    LE              reduce using rule 63 (literal -> FLOAT .)
    GE              reduce using rule 63 (literal -> FLOAT .)
    EQ              reduce using rule 63 (literal -> FLOAT .)
    NE              reduce using rule 63 (literal -> FLOAT .)
    SEMI            reduce using rule 63 (literal -> FLOAT .)
    DO              reduce using rule 63 (literal -> FLOAT .)
    LAND            reduce using rule 63 (literal -> FLOAT .)
    LOR             reduce using rule 63 (literal -> FLOAT .)
    THEN            reduce using rule 63 (literal -> FLOAT .)


state 12

    (39) expression -> MINUS . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 25
    id                             shift and go to state 17

state 13

    (58) expression -> typename . LPAREN id RPAREN

    LPAREN          shift and go to state 26


state 14

    (57) expression -> literal .

    PLUS            reduce using rule 57 (expression -> literal .)
    MINUS           reduce using rule 57 (expression -> literal .)
    TIMES           reduce using rule 57 (expression -> literal .)
    DIVIDE          reduce using rule 57 (expression -> literal .)
    DO              reduce using rule 57 (expression -> literal .)
    LAND            reduce using rule 57 (expression -> literal .)
    LOR             reduce using rule 57 (expression -> literal .)
    THEN            reduce using rule 57 (expression -> literal .)
    RPAREN          reduce using rule 57 (expression -> literal .)
    LT              reduce using rule 57 (expression -> literal .)
    GT              reduce using rule 57 (expression -> literal .)
    LE              reduce using rule 57 (expression -> literal .)
    GE              reduce using rule 57 (expression -> literal .)
    EQ              reduce using rule 57 (expression -> literal .)
    NE              reduce using rule 57 (expression -> literal .)
    RBRACKET        reduce using rule 57 (expression -> literal .)
    COMMA           reduce using rule 57 (expression -> literal .)
    SEMI            reduce using rule 57 (expression -> literal .)


state 15

    (38) expression -> PLUS . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 27
    id                             shift and go to state 17

state 16

    (40) expression -> LPAREN . expression RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 28
    id                             shift and go to state 17

state 17

    (56) expression -> id .
    (37) funcall -> id . LPAREN exprlist RPAREN

    PLUS            reduce using rule 56 (expression -> id .)
    MINUS           reduce using rule 56 (expression -> id .)
    TIMES           reduce using rule 56 (expression -> id .)
    DIVIDE          reduce using rule 56 (expression -> id .)
    DO              reduce using rule 56 (expression -> id .)
    LAND            reduce using rule 56 (expression -> id .)
    LOR             reduce using rule 56 (expression -> id .)
    THEN            reduce using rule 56 (expression -> id .)
    RPAREN          reduce using rule 56 (expression -> id .)
    LT              reduce using rule 56 (expression -> id .)
    GT              reduce using rule 56 (expression -> id .)
    LE              reduce using rule 56 (expression -> id .)
    GE              reduce using rule 56 (expression -> id .)
    EQ              reduce using rule 56 (expression -> id .)
    NE              reduce using rule 56 (expression -> id .)
    RBRACKET        reduce using rule 56 (expression -> id .)
    COMMA           reduce using rule 56 (expression -> id .)
    SEMI            reduce using rule 56 (expression -> id .)
    LPAREN          shift and go to state 29


state 18

    (62) literal -> INTEGER .

    PLUS            reduce using rule 62 (literal -> INTEGER .)
    MINUS           reduce using rule 62 (literal -> INTEGER .)
    TIMES           reduce using rule 62 (literal -> INTEGER .)
    DIVIDE          reduce using rule 62 (literal -> INTEGER .)
    RBRACKET        reduce using rule 62 (literal -> INTEGER .)
    RPAREN          reduce using rule 62 (literal -> INTEGER .)
    COMMA           reduce using rule 62 (literal -> INTEGER .)
    LT              reduce using rule 62 (literal -> INTEGER .)
    GT              reduce using rule 62 (literal -> INTEGER .)
    LE              reduce using rule 62 (literal -> INTEGER .)
    GE              reduce using rule 62 (literal -> INTEGER .)
    EQ              reduce using rule 62 (literal -> INTEGER .)
    NE              reduce using rule 62 (literal -> INTEGER .)
    SEMI            reduce using rule 62 (literal -> INTEGER .)
    DO              reduce using rule 62 (literal -> INTEGER .)
    LAND            reduce using rule 62 (literal -> INTEGER .)
    LOR             reduce using rule 62 (literal -> INTEGER .)
    THEN            reduce using rule 62 (literal -> INTEGER .)


state 19

    (67) id -> ID LBRACKET expression . RBRACKET
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    RBRACKET        shift and go to state 33
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 20

    (64) literal -> STRING .

    PLUS            reduce using rule 64 (literal -> STRING .)
    MINUS           reduce using rule 64 (literal -> STRING .)
    TIMES           reduce using rule 64 (literal -> STRING .)
    DIVIDE          reduce using rule 64 (literal -> STRING .)
    RBRACKET        reduce using rule 64 (literal -> STRING .)
    RPAREN          reduce using rule 64 (literal -> STRING .)
    COMMA           reduce using rule 64 (literal -> STRING .)
    LT              reduce using rule 64 (literal -> STRING .)
    GT              reduce using rule 64 (literal -> STRING .)
    LE              reduce using rule 64 (literal -> STRING .)
    GE              reduce using rule 64 (literal -> STRING .)
    EQ              reduce using rule 64 (literal -> STRING .)
    NE              reduce using rule 64 (literal -> STRING .)
    SEMI            reduce using rule 64 (literal -> STRING .)
    DO              reduce using rule 64 (literal -> STRING .)
    LAND            reduce using rule 64 (literal -> STRING .)
    LOR             reduce using rule 64 (literal -> STRING .)
    THEN            reduce using rule 64 (literal -> STRING .)


state 21

    (25) parameters -> parm_declaration .

    RPAREN          reduce using rule 25 (parameters -> parm_declaration .)
    COMMA           reduce using rule 25 (parameters -> parm_declaration .)


state 22

    (22) function -> FUNC id LPAREN parameters . RPAREN locals BEGIN statements END
    (23) function -> FUNC id LPAREN parameters . RPAREN BEGIN statements END
    (24) parameters -> parameters . COMMA parm_declaration

    RPAREN          shift and go to state 35
    COMMA           shift and go to state 36


state 23

    (26) parameters -> empty .

    RPAREN          reduce using rule 26 (parameters -> empty .)
    COMMA           reduce using rule 26 (parameters -> empty .)


state 24

    (27) parm_declaration -> id . COLON typename
    (28) parm_declaration -> id . COLON typename LBRACKET literal RBRACKET

    COLON           shift and go to state 37


state 25

    (39) expression -> MINUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 39 (expression -> MINUS expression .)
    MINUS           reduce using rule 39 (expression -> MINUS expression .)
    TIMES           reduce using rule 39 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 39 (expression -> MINUS expression .)
    DO              reduce using rule 39 (expression -> MINUS expression .)
    LAND            reduce using rule 39 (expression -> MINUS expression .)
    LOR             reduce using rule 39 (expression -> MINUS expression .)
    THEN            reduce using rule 39 (expression -> MINUS expression .)
    RPAREN          reduce using rule 39 (expression -> MINUS expression .)
    LT              reduce using rule 39 (expression -> MINUS expression .)
    GT              reduce using rule 39 (expression -> MINUS expression .)
    LE              reduce using rule 39 (expression -> MINUS expression .)
    GE              reduce using rule 39 (expression -> MINUS expression .)
    EQ              reduce using rule 39 (expression -> MINUS expression .)
    NE              reduce using rule 39 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 39 (expression -> MINUS expression .)
    COMMA           reduce using rule 39 (expression -> MINUS expression .)
    SEMI            reduce using rule 39 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 30 ]


state 26

    (58) expression -> typename LPAREN . id RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 4

    id                             shift and go to state 38

state 27

    (38) expression -> PLUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 38 (expression -> PLUS expression .)
    MINUS           reduce using rule 38 (expression -> PLUS expression .)
    TIMES           reduce using rule 38 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 38 (expression -> PLUS expression .)
    DO              reduce using rule 38 (expression -> PLUS expression .)
    LAND            reduce using rule 38 (expression -> PLUS expression .)
    LOR             reduce using rule 38 (expression -> PLUS expression .)
    THEN            reduce using rule 38 (expression -> PLUS expression .)
    RPAREN          reduce using rule 38 (expression -> PLUS expression .)
    LT              reduce using rule 38 (expression -> PLUS expression .)
    GT              reduce using rule 38 (expression -> PLUS expression .)
    LE              reduce using rule 38 (expression -> PLUS expression .)
    GE              reduce using rule 38 (expression -> PLUS expression .)
    EQ              reduce using rule 38 (expression -> PLUS expression .)
    NE              reduce using rule 38 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 38 (expression -> PLUS expression .)
    COMMA           reduce using rule 38 (expression -> PLUS expression .)
    SEMI            reduce using rule 38 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 30 ]


state 28

    (40) expression -> LPAREN expression . RPAREN
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 39
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 29

    (37) funcall -> id LPAREN . exprlist RPAREN
    (59) exprlist -> . exprlist COMMA expression
    (60) exprlist -> . expression
    (61) exprlist -> . empty
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (68) empty -> .
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    RPAREN          reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    exprlist                       shift and go to state 40
    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 41
    id                             shift and go to state 17
    empty                          shift and go to state 42

state 30

    (45) expression -> expression DIVIDE . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 43
    id                             shift and go to state 17

state 31

    (43) expression -> expression MINUS . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 44
    id                             shift and go to state 17

state 32

    (42) expression -> expression PLUS . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 45
    id                             shift and go to state 17

state 33

    (67) id -> ID LBRACKET expression RBRACKET .

    COLON           reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    LAND            reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    LOR             reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 67 (id -> ID LBRACKET expression RBRACKET .)


state 34

    (44) expression -> expression TIMES . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 46
    id                             shift and go to state 17

state 35

    (22) function -> FUNC id LPAREN parameters RPAREN . locals BEGIN statements END
    (23) function -> FUNC id LPAREN parameters RPAREN . BEGIN statements END
    (18) locals -> . locals local
    (19) locals -> . local
    (20) local -> . id COLON typename SEMI
    (21) local -> . id COLON typename LBRACKET literal RBRACKET SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 47
    ID              shift and go to state 4

    local                          shift and go to state 48
    id                             shift and go to state 49
    locals                         shift and go to state 50

state 36

    (24) parameters -> parameters COMMA . parm_declaration
    (27) parm_declaration -> . id COLON typename
    (28) parm_declaration -> . id COLON typename LBRACKET literal RBRACKET
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 4

    parm_declaration               shift and go to state 51
    id                             shift and go to state 24

state 37

    (27) parm_declaration -> id COLON . typename
    (28) parm_declaration -> id COLON . typename LBRACKET literal RBRACKET
    (65) typename -> . TYPENAME

    TYPENAME        shift and go to state 10

    typename                       shift and go to state 52

state 38

    (58) expression -> typename LPAREN id . RPAREN

    RPAREN          shift and go to state 53


state 39

    (40) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 40 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 40 (expression -> LPAREN expression RPAREN .)


state 40

    (37) funcall -> id LPAREN exprlist . RPAREN
    (59) exprlist -> exprlist . COMMA expression

    RPAREN          shift and go to state 54
    COMMA           shift and go to state 55


state 41

    (60) exprlist -> expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 60 (exprlist -> expression .)
    COMMA           reduce using rule 60 (exprlist -> expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 42

    (61) exprlist -> empty .

    RPAREN          reduce using rule 61 (exprlist -> empty .)
    COMMA           reduce using rule 61 (exprlist -> empty .)


state 43

    (45) expression -> expression DIVIDE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 45 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 45 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 45 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 45 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 45 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 45 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 45 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 45 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 45 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 45 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 45 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 45 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 45 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 45 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 45 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 30 ]


state 44

    (43) expression -> expression MINUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 43 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 43 (expression -> expression MINUS expression .)
    DO              reduce using rule 43 (expression -> expression MINUS expression .)
    LAND            reduce using rule 43 (expression -> expression MINUS expression .)
    LOR             reduce using rule 43 (expression -> expression MINUS expression .)
    THEN            reduce using rule 43 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 43 (expression -> expression MINUS expression .)
    LT              reduce using rule 43 (expression -> expression MINUS expression .)
    GT              reduce using rule 43 (expression -> expression MINUS expression .)
    LE              reduce using rule 43 (expression -> expression MINUS expression .)
    GE              reduce using rule 43 (expression -> expression MINUS expression .)
    EQ              reduce using rule 43 (expression -> expression MINUS expression .)
    NE              reduce using rule 43 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 43 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 43 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 43 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30

  ! TIMES           [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 31 ]


state 45

    (42) expression -> expression PLUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 42 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 42 (expression -> expression PLUS expression .)
    DO              reduce using rule 42 (expression -> expression PLUS expression .)
    LAND            reduce using rule 42 (expression -> expression PLUS expression .)
    LOR             reduce using rule 42 (expression -> expression PLUS expression .)
    THEN            reduce using rule 42 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 42 (expression -> expression PLUS expression .)
    LT              reduce using rule 42 (expression -> expression PLUS expression .)
    GT              reduce using rule 42 (expression -> expression PLUS expression .)
    LE              reduce using rule 42 (expression -> expression PLUS expression .)
    GE              reduce using rule 42 (expression -> expression PLUS expression .)
    EQ              reduce using rule 42 (expression -> expression PLUS expression .)
    NE              reduce using rule 42 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 42 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 42 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 42 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30

  ! TIMES           [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 31 ]


state 46

    (44) expression -> expression TIMES expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 44 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 44 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 44 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 44 (expression -> expression TIMES expression .)
    DO              reduce using rule 44 (expression -> expression TIMES expression .)
    LAND            reduce using rule 44 (expression -> expression TIMES expression .)
    LOR             reduce using rule 44 (expression -> expression TIMES expression .)
    THEN            reduce using rule 44 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 44 (expression -> expression TIMES expression .)
    LT              reduce using rule 44 (expression -> expression TIMES expression .)
    GT              reduce using rule 44 (expression -> expression TIMES expression .)
    LE              reduce using rule 44 (expression -> expression TIMES expression .)
    GE              reduce using rule 44 (expression -> expression TIMES expression .)
    EQ              reduce using rule 44 (expression -> expression TIMES expression .)
    NE              reduce using rule 44 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 44 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 44 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 44 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 30 ]


state 47

    (23) function -> FUNC id LPAREN parameters RPAREN BEGIN . statements END
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    statements                     shift and go to state 56
    read                           shift and go to state 67
    return                         shift and go to state 66
    assign                         shift and go to state 75
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 64
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    id                             shift and go to state 61
    if                             shift and go to state 62

state 48

    (19) locals -> local .

    BEGIN           reduce using rule 19 (locals -> local .)
    ID              reduce using rule 19 (locals -> local .)


state 49

    (20) local -> id . COLON typename SEMI
    (21) local -> id . COLON typename LBRACKET literal RBRACKET SEMI

    COLON           shift and go to state 76


state 50

    (22) function -> FUNC id LPAREN parameters RPAREN locals . BEGIN statements END
    (18) locals -> locals . local
    (20) local -> . id COLON typename SEMI
    (21) local -> . id COLON typename LBRACKET literal RBRACKET SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 77
    ID              shift and go to state 4

    local                          shift and go to state 78
    id                             shift and go to state 49

state 51

    (24) parameters -> parameters COMMA parm_declaration .

    RPAREN          reduce using rule 24 (parameters -> parameters COMMA parm_declaration .)
    COMMA           reduce using rule 24 (parameters -> parameters COMMA parm_declaration .)


state 52

    (27) parm_declaration -> id COLON typename .
    (28) parm_declaration -> id COLON typename . LBRACKET literal RBRACKET

    RPAREN          reduce using rule 27 (parm_declaration -> id COLON typename .)
    COMMA           reduce using rule 27 (parm_declaration -> id COLON typename .)
    LBRACKET        shift and go to state 79


state 53

    (58) expression -> typename LPAREN id RPAREN .

    PLUS            reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    MINUS           reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    TIMES           reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    DIVIDE          reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    DO              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    LAND            reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    LOR             reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    THEN            reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    RPAREN          reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    LT              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    GT              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    LE              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    GE              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    EQ              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    NE              reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    RBRACKET        reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    COMMA           reduce using rule 58 (expression -> typename LPAREN id RPAREN .)
    SEMI            reduce using rule 58 (expression -> typename LPAREN id RPAREN .)


state 54

    (37) funcall -> id LPAREN exprlist RPAREN .

    SEMI            reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    DO              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    LAND            reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    LOR             reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    THEN            reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    LT              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    GT              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    LE              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    GE              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    EQ              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)
    NE              reduce using rule 37 (funcall -> id LPAREN exprlist RPAREN .)


state 55

    (59) exprlist -> exprlist COMMA . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    id                             shift and go to state 17
    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 80

state 56

    (23) function -> FUNC id LPAREN parameters RPAREN BEGIN statements . END
    (6) statements -> statements . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 81
    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    read                           shift and go to state 67
    return                         shift and go to state 66
    assign                         shift and go to state 75
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 82
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    id                             shift and go to state 61
    if                             shift and go to state 62

state 57

    (36) read -> READ . LPAREN id RPAREN SEMI

    LPAREN          shift and go to state 83


state 58

    (16) statement -> funcall . SEMI

    SEMI            shift and go to state 84


state 59

    (31) while -> WHILE . cond DO st
    (46) cond -> . expression LT expression
    (47) cond -> . expression GT expression
    (48) cond -> . expression LE expression
    (49) cond -> . expression GE expression
    (50) cond -> . expression EQ expression
    (51) cond -> . expression NE expression
    (52) cond -> . cond LAND cond
    (53) cond -> . cond LOR cond
    (54) cond -> . LNOT cond
    (55) cond -> . LPAREN cond RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    LNOT            shift and go to state 85
    LPAREN          shift and go to state 87
    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    cond                           shift and go to state 86
    expression                     shift and go to state 88
    id                             shift and go to state 17

state 60

    (33) print -> PRINT . LPAREN literal RPAREN SEMI

    LPAREN          shift and go to state 89


state 61

    (32) assign -> id . ASSIGN expression SEMI
    (37) funcall -> id . LPAREN exprlist RPAREN

    ASSIGN          shift and go to state 90
    LPAREN          shift and go to state 29


state 62

    (9) statement -> if .

    END             reduce using rule 9 (statement -> if .)
    BREAK           reduce using rule 9 (statement -> if .)
    SKIP            reduce using rule 9 (statement -> if .)
    PRINT           reduce using rule 9 (statement -> if .)
    IF              reduce using rule 9 (statement -> if .)
    WHILE           reduce using rule 9 (statement -> if .)
    READ            reduce using rule 9 (statement -> if .)
    WRITE           reduce using rule 9 (statement -> if .)
    RETURN          reduce using rule 9 (statement -> if .)
    ID              reduce using rule 9 (statement -> if .)
    ELSE            reduce using rule 9 (statement -> if .)


state 63

    (15) statement -> write .

    END             reduce using rule 15 (statement -> write .)
    BREAK           reduce using rule 15 (statement -> write .)
    SKIP            reduce using rule 15 (statement -> write .)
    PRINT           reduce using rule 15 (statement -> write .)
    IF              reduce using rule 15 (statement -> write .)
    WHILE           reduce using rule 15 (statement -> write .)
    READ            reduce using rule 15 (statement -> write .)
    WRITE           reduce using rule 15 (statement -> write .)
    RETURN          reduce using rule 15 (statement -> write .)
    ID              reduce using rule 15 (statement -> write .)
    ELSE            reduce using rule 15 (statement -> write .)


state 64

    (5) statements -> statement .

    END             reduce using rule 5 (statements -> statement .)
    BREAK           reduce using rule 5 (statements -> statement .)
    SKIP            reduce using rule 5 (statements -> statement .)
    PRINT           reduce using rule 5 (statements -> statement .)
    IF              reduce using rule 5 (statements -> statement .)
    WHILE           reduce using rule 5 (statements -> statement .)
    READ            reduce using rule 5 (statements -> statement .)
    WRITE           reduce using rule 5 (statements -> statement .)
    RETURN          reduce using rule 5 (statements -> statement .)
    ID              reduce using rule 5 (statements -> statement .)


state 65

    (8) statement -> print .

    END             reduce using rule 8 (statement -> print .)
    BREAK           reduce using rule 8 (statement -> print .)
    SKIP            reduce using rule 8 (statement -> print .)
    PRINT           reduce using rule 8 (statement -> print .)
    IF              reduce using rule 8 (statement -> print .)
    WHILE           reduce using rule 8 (statement -> print .)
    READ            reduce using rule 8 (statement -> print .)
    WRITE           reduce using rule 8 (statement -> print .)
    RETURN          reduce using rule 8 (statement -> print .)
    ID              reduce using rule 8 (statement -> print .)
    ELSE            reduce using rule 8 (statement -> print .)


state 66

    (17) statement -> return .

    END             reduce using rule 17 (statement -> return .)
    BREAK           reduce using rule 17 (statement -> return .)
    SKIP            reduce using rule 17 (statement -> return .)
    PRINT           reduce using rule 17 (statement -> return .)
    IF              reduce using rule 17 (statement -> return .)
    WHILE           reduce using rule 17 (statement -> return .)
    READ            reduce using rule 17 (statement -> return .)
    WRITE           reduce using rule 17 (statement -> return .)
    RETURN          reduce using rule 17 (statement -> return .)
    ID              reduce using rule 17 (statement -> return .)
    ELSE            reduce using rule 17 (statement -> return .)


state 67

    (14) statement -> read .

    END             reduce using rule 14 (statement -> read .)
    BREAK           reduce using rule 14 (statement -> read .)
    SKIP            reduce using rule 14 (statement -> read .)
    PRINT           reduce using rule 14 (statement -> read .)
    IF              reduce using rule 14 (statement -> read .)
    WHILE           reduce using rule 14 (statement -> read .)
    READ            reduce using rule 14 (statement -> read .)
    WRITE           reduce using rule 14 (statement -> read .)
    RETURN          reduce using rule 14 (statement -> read .)
    ID              reduce using rule 14 (statement -> read .)
    ELSE            reduce using rule 14 (statement -> read .)


state 68

    (13) statement -> SKIP . SEMI

    SEMI            shift and go to state 91


state 69

    (34) write -> WRITE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 92


state 70

    (29) if -> IF . cond THEN st
    (30) if_else -> IF . cond THEN st ELSE st
    (46) cond -> . expression LT expression
    (47) cond -> . expression GT expression
    (48) cond -> . expression LE expression
    (49) cond -> . expression GE expression
    (50) cond -> . expression EQ expression
    (51) cond -> . expression NE expression
    (52) cond -> . cond LAND cond
    (53) cond -> . cond LOR cond
    (54) cond -> . LNOT cond
    (55) cond -> . LPAREN cond RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    LNOT            shift and go to state 85
    LPAREN          shift and go to state 87
    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    cond                           shift and go to state 93
    expression                     shift and go to state 88
    id                             shift and go to state 17

state 71

    (35) return -> RETURN . expression SEMI
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 94
    id                             shift and go to state 17

state 72

    (12) statement -> BREAK . SEMI

    SEMI            shift and go to state 95


state 73

    (11) statement -> while .

    END             reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    SKIP            reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    READ            reduce using rule 11 (statement -> while .)
    WRITE           reduce using rule 11 (statement -> while .)
    RETURN          reduce using rule 11 (statement -> while .)
    ID              reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)


state 74

    (10) statement -> if_else .

    END             reduce using rule 10 (statement -> if_else .)
    BREAK           reduce using rule 10 (statement -> if_else .)
    SKIP            reduce using rule 10 (statement -> if_else .)
    PRINT           reduce using rule 10 (statement -> if_else .)
    IF              reduce using rule 10 (statement -> if_else .)
    WHILE           reduce using rule 10 (statement -> if_else .)
    READ            reduce using rule 10 (statement -> if_else .)
    WRITE           reduce using rule 10 (statement -> if_else .)
    RETURN          reduce using rule 10 (statement -> if_else .)
    ID              reduce using rule 10 (statement -> if_else .)
    ELSE            reduce using rule 10 (statement -> if_else .)


state 75

    (7) statement -> assign .

    END             reduce using rule 7 (statement -> assign .)
    BREAK           reduce using rule 7 (statement -> assign .)
    SKIP            reduce using rule 7 (statement -> assign .)
    PRINT           reduce using rule 7 (statement -> assign .)
    IF              reduce using rule 7 (statement -> assign .)
    WHILE           reduce using rule 7 (statement -> assign .)
    READ            reduce using rule 7 (statement -> assign .)
    WRITE           reduce using rule 7 (statement -> assign .)
    RETURN          reduce using rule 7 (statement -> assign .)
    ID              reduce using rule 7 (statement -> assign .)
    ELSE            reduce using rule 7 (statement -> assign .)


state 76

    (20) local -> id COLON . typename SEMI
    (21) local -> id COLON . typename LBRACKET literal RBRACKET SEMI
    (65) typename -> . TYPENAME

    TYPENAME        shift and go to state 10

    typename                       shift and go to state 96

state 77

    (22) function -> FUNC id LPAREN parameters RPAREN locals BEGIN . statements END
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    statements                     shift and go to state 97
    read                           shift and go to state 67
    return                         shift and go to state 66
    assign                         shift and go to state 75
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 64
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    id                             shift and go to state 61
    if                             shift and go to state 62

state 78

    (18) locals -> locals local .

    BEGIN           reduce using rule 18 (locals -> locals local .)
    ID              reduce using rule 18 (locals -> locals local .)


state 79

    (28) parm_declaration -> id COLON typename LBRACKET . literal RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING

    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20

    literal                        shift and go to state 98

state 80

    (59) exprlist -> exprlist COMMA expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 59 (exprlist -> exprlist COMMA expression .)
    COMMA           reduce using rule 59 (exprlist -> exprlist COMMA expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 81

    (23) function -> FUNC id LPAREN parameters RPAREN BEGIN statements END .

    FUNC            reduce using rule 23 (function -> FUNC id LPAREN parameters RPAREN BEGIN statements END .)
    $end            reduce using rule 23 (function -> FUNC id LPAREN parameters RPAREN BEGIN statements END .)


state 82

    (6) statements -> statements statement .

    END             reduce using rule 6 (statements -> statements statement .)
    BREAK           reduce using rule 6 (statements -> statements statement .)
    SKIP            reduce using rule 6 (statements -> statements statement .)
    PRINT           reduce using rule 6 (statements -> statements statement .)
    IF              reduce using rule 6 (statements -> statements statement .)
    WHILE           reduce using rule 6 (statements -> statements statement .)
    READ            reduce using rule 6 (statements -> statements statement .)
    WRITE           reduce using rule 6 (statements -> statements statement .)
    RETURN          reduce using rule 6 (statements -> statements statement .)
    ID              reduce using rule 6 (statements -> statements statement .)


state 83

    (36) read -> READ LPAREN . id RPAREN SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 4

    id                             shift and go to state 99

state 84

    (16) statement -> funcall SEMI .

    END             reduce using rule 16 (statement -> funcall SEMI .)
    BREAK           reduce using rule 16 (statement -> funcall SEMI .)
    SKIP            reduce using rule 16 (statement -> funcall SEMI .)
    PRINT           reduce using rule 16 (statement -> funcall SEMI .)
    IF              reduce using rule 16 (statement -> funcall SEMI .)
    WHILE           reduce using rule 16 (statement -> funcall SEMI .)
    READ            reduce using rule 16 (statement -> funcall SEMI .)
    WRITE           reduce using rule 16 (statement -> funcall SEMI .)
    RETURN          reduce using rule 16 (statement -> funcall SEMI .)
    ID              reduce using rule 16 (statement -> funcall SEMI .)
    ELSE            reduce using rule 16 (statement -> funcall SEMI .)


state 85

    (54) cond -> LNOT . cond
    (46) cond -> . expression LT expression
    (47) cond -> . expression GT expression
    (48) cond -> . expression LE expression
    (49) cond -> . expression GE expression
    (50) cond -> . expression EQ expression
    (51) cond -> . expression NE expression
    (52) cond -> . cond LAND cond
    (53) cond -> . cond LOR cond
    (54) cond -> . LNOT cond
    (55) cond -> . LPAREN cond RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    LNOT            shift and go to state 85
    LPAREN          shift and go to state 87
    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    cond                           shift and go to state 100
    expression                     shift and go to state 88
    id                             shift and go to state 17

state 86

    (31) while -> WHILE cond . DO st
    (52) cond -> cond . LAND cond
    (53) cond -> cond . LOR cond

    DO              shift and go to state 101
    LAND            shift and go to state 102
    LOR             shift and go to state 103


state 87

    (55) cond -> LPAREN . cond RPAREN
    (40) expression -> LPAREN . expression RPAREN
    (46) cond -> . expression LT expression
    (47) cond -> . expression GT expression
    (48) cond -> . expression LE expression
    (49) cond -> . expression GE expression
    (50) cond -> . expression EQ expression
    (51) cond -> . expression NE expression
    (52) cond -> . cond LAND cond
    (53) cond -> . cond LOR cond
    (54) cond -> . LNOT cond
    (55) cond -> . LPAREN cond RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    LNOT            shift and go to state 85
    LPAREN          shift and go to state 87
    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    cond                           shift and go to state 104
    expression                     shift and go to state 105
    id                             shift and go to state 17

state 88

    (46) cond -> expression . LT expression
    (47) cond -> expression . GT expression
    (48) cond -> expression . LE expression
    (49) cond -> expression . GE expression
    (50) cond -> expression . EQ expression
    (51) cond -> expression . NE expression
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LT              shift and go to state 108
    GT              shift and go to state 106
    LE              shift and go to state 111
    GE              shift and go to state 110
    EQ              shift and go to state 107
    NE              shift and go to state 109
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 89

    (33) print -> PRINT LPAREN . literal RPAREN SEMI
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING

    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20

    literal                        shift and go to state 112

state 90

    (32) assign -> id ASSIGN . expression SEMI
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 113
    id                             shift and go to state 17

state 91

    (13) statement -> SKIP SEMI .

    END             reduce using rule 13 (statement -> SKIP SEMI .)
    BREAK           reduce using rule 13 (statement -> SKIP SEMI .)
    SKIP            reduce using rule 13 (statement -> SKIP SEMI .)
    PRINT           reduce using rule 13 (statement -> SKIP SEMI .)
    IF              reduce using rule 13 (statement -> SKIP SEMI .)
    WHILE           reduce using rule 13 (statement -> SKIP SEMI .)
    READ            reduce using rule 13 (statement -> SKIP SEMI .)
    WRITE           reduce using rule 13 (statement -> SKIP SEMI .)
    RETURN          reduce using rule 13 (statement -> SKIP SEMI .)
    ID              reduce using rule 13 (statement -> SKIP SEMI .)
    ELSE            reduce using rule 13 (statement -> SKIP SEMI .)


state 92

    (34) write -> WRITE LPAREN . expression RPAREN SEMI
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 114
    id                             shift and go to state 17

state 93

    (29) if -> IF cond . THEN st
    (30) if_else -> IF cond . THEN st ELSE st
    (52) cond -> cond . LAND cond
    (53) cond -> cond . LOR cond

    THEN            shift and go to state 115
    LAND            shift and go to state 102
    LOR             shift and go to state 103


state 94

    (35) return -> RETURN expression . SEMI
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 116
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 95

    (12) statement -> BREAK SEMI .

    END             reduce using rule 12 (statement -> BREAK SEMI .)
    BREAK           reduce using rule 12 (statement -> BREAK SEMI .)
    SKIP            reduce using rule 12 (statement -> BREAK SEMI .)
    PRINT           reduce using rule 12 (statement -> BREAK SEMI .)
    IF              reduce using rule 12 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 12 (statement -> BREAK SEMI .)
    READ            reduce using rule 12 (statement -> BREAK SEMI .)
    WRITE           reduce using rule 12 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 12 (statement -> BREAK SEMI .)
    ID              reduce using rule 12 (statement -> BREAK SEMI .)
    ELSE            reduce using rule 12 (statement -> BREAK SEMI .)


state 96

    (20) local -> id COLON typename . SEMI
    (21) local -> id COLON typename . LBRACKET literal RBRACKET SEMI

    SEMI            shift and go to state 117
    LBRACKET        shift and go to state 118


state 97

    (22) function -> FUNC id LPAREN parameters RPAREN locals BEGIN statements . END
    (6) statements -> statements . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 119
    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    read                           shift and go to state 67
    return                         shift and go to state 66
    assign                         shift and go to state 75
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 82
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    id                             shift and go to state 61
    if                             shift and go to state 62

state 98

    (28) parm_declaration -> id COLON typename LBRACKET literal . RBRACKET

    RBRACKET        shift and go to state 120


state 99

    (36) read -> READ LPAREN id . RPAREN SEMI

    RPAREN          shift and go to state 121


state 100

    (54) cond -> LNOT cond .
    (52) cond -> cond . LAND cond
    (53) cond -> cond . LOR cond

    LAND            reduce using rule 54 (cond -> LNOT cond .)
    LOR             reduce using rule 54 (cond -> LNOT cond .)
    DO              reduce using rule 54 (cond -> LNOT cond .)
    THEN            reduce using rule 54 (cond -> LNOT cond .)
    RPAREN          reduce using rule 54 (cond -> LNOT cond .)

  ! LAND            [ shift and go to state 102 ]
  ! LOR             [ shift and go to state 103 ]


state 101

    (31) while -> WHILE cond DO . st
    (3) st -> . BEGIN statements END
    (4) st -> . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 122
    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    read                           shift and go to state 67
    id                             shift and go to state 61
    return                         shift and go to state 66
    st                             shift and go to state 124
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 123
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    assign                         shift and go to state 75
    if                             shift and go to state 62

state 102

    (52) cond -> cond LAND . cond
    (46) cond -> . expression LT expression
    (47) cond -> . expression GT expression
    (48) cond -> . expression LE expression
    (49) cond -> . expression GE expression
    (50) cond -> . expression EQ expression
    (51) cond -> . expression NE expression
    (52) cond -> . cond LAND cond
    (53) cond -> . cond LOR cond
    (54) cond -> . LNOT cond
    (55) cond -> . LPAREN cond RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    LNOT            shift and go to state 85
    LPAREN          shift and go to state 87
    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    cond                           shift and go to state 125
    expression                     shift and go to state 88
    id                             shift and go to state 17

state 103

    (53) cond -> cond LOR . cond
    (46) cond -> . expression LT expression
    (47) cond -> . expression GT expression
    (48) cond -> . expression LE expression
    (49) cond -> . expression GE expression
    (50) cond -> . expression EQ expression
    (51) cond -> . expression NE expression
    (52) cond -> . cond LAND cond
    (53) cond -> . cond LOR cond
    (54) cond -> . LNOT cond
    (55) cond -> . LPAREN cond RPAREN
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    LNOT            shift and go to state 85
    LPAREN          shift and go to state 87
    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    cond                           shift and go to state 126
    expression                     shift and go to state 88
    id                             shift and go to state 17

state 104

    (55) cond -> LPAREN cond . RPAREN
    (52) cond -> cond . LAND cond
    (53) cond -> cond . LOR cond

    RPAREN          shift and go to state 127
    LAND            shift and go to state 102
    LOR             shift and go to state 103


state 105

    (40) expression -> LPAREN expression . RPAREN
    (46) cond -> expression . LT expression
    (47) cond -> expression . GT expression
    (48) cond -> expression . LE expression
    (49) cond -> expression . GE expression
    (50) cond -> expression . EQ expression
    (51) cond -> expression . NE expression
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 39
    LT              shift and go to state 108
    GT              shift and go to state 106
    LE              shift and go to state 111
    GE              shift and go to state 110
    EQ              shift and go to state 107
    NE              shift and go to state 109
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 106

    (47) cond -> expression GT . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 128
    id                             shift and go to state 17

state 107

    (50) cond -> expression EQ . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 129
    id                             shift and go to state 17

state 108

    (46) cond -> expression LT . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 130
    id                             shift and go to state 17

state 109

    (51) cond -> expression NE . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 131
    id                             shift and go to state 17

state 110

    (49) cond -> expression GE . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 132
    id                             shift and go to state 17

state 111

    (48) cond -> expression LE . expression
    (38) expression -> . PLUS expression
    (39) expression -> . MINUS expression
    (40) expression -> . LPAREN expression RPAREN
    (41) expression -> . funcall
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression TIMES expression
    (45) expression -> . expression DIVIDE expression
    (56) expression -> . id
    (57) expression -> . literal
    (58) expression -> . typename LPAREN id RPAREN
    (37) funcall -> . id LPAREN exprlist RPAREN
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING
    (65) typename -> . TYPENAME

    PLUS            shift and go to state 15
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 16
    ID              shift and go to state 4
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20
    TYPENAME        shift and go to state 10

    funcall                        shift and go to state 9
    typename                       shift and go to state 13
    literal                        shift and go to state 14
    expression                     shift and go to state 133
    id                             shift and go to state 17

state 112

    (33) print -> PRINT LPAREN literal . RPAREN SEMI

    RPAREN          shift and go to state 134


state 113

    (32) assign -> id ASSIGN expression . SEMI
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 135
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 114

    (34) write -> WRITE LPAREN expression . RPAREN SEMI
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 115

    (29) if -> IF cond THEN . st
    (30) if_else -> IF cond THEN . st ELSE st
    (3) st -> . BEGIN statements END
    (4) st -> . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 122
    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    read                           shift and go to state 67
    id                             shift and go to state 61
    return                         shift and go to state 66
    st                             shift and go to state 137
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 123
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    assign                         shift and go to state 75
    if                             shift and go to state 62

state 116

    (35) return -> RETURN expression SEMI .

    END             reduce using rule 35 (return -> RETURN expression SEMI .)
    BREAK           reduce using rule 35 (return -> RETURN expression SEMI .)
    SKIP            reduce using rule 35 (return -> RETURN expression SEMI .)
    PRINT           reduce using rule 35 (return -> RETURN expression SEMI .)
    IF              reduce using rule 35 (return -> RETURN expression SEMI .)
    WHILE           reduce using rule 35 (return -> RETURN expression SEMI .)
    READ            reduce using rule 35 (return -> RETURN expression SEMI .)
    WRITE           reduce using rule 35 (return -> RETURN expression SEMI .)
    RETURN          reduce using rule 35 (return -> RETURN expression SEMI .)
    ID              reduce using rule 35 (return -> RETURN expression SEMI .)
    ELSE            reduce using rule 35 (return -> RETURN expression SEMI .)


state 117

    (20) local -> id COLON typename SEMI .

    BEGIN           reduce using rule 20 (local -> id COLON typename SEMI .)
    ID              reduce using rule 20 (local -> id COLON typename SEMI .)


state 118

    (21) local -> id COLON typename LBRACKET . literal RBRACKET SEMI
    (62) literal -> . INTEGER
    (63) literal -> . FLOAT
    (64) literal -> . STRING

    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 11
    STRING          shift and go to state 20

    literal                        shift and go to state 138

state 119

    (22) function -> FUNC id LPAREN parameters RPAREN locals BEGIN statements END .

    FUNC            reduce using rule 22 (function -> FUNC id LPAREN parameters RPAREN locals BEGIN statements END .)
    $end            reduce using rule 22 (function -> FUNC id LPAREN parameters RPAREN locals BEGIN statements END .)


state 120

    (28) parm_declaration -> id COLON typename LBRACKET literal RBRACKET .

    RPAREN          reduce using rule 28 (parm_declaration -> id COLON typename LBRACKET literal RBRACKET .)
    COMMA           reduce using rule 28 (parm_declaration -> id COLON typename LBRACKET literal RBRACKET .)


state 121

    (36) read -> READ LPAREN id RPAREN . SEMI

    SEMI            shift and go to state 139


state 122

    (3) st -> BEGIN . statements END
    (5) statements -> . statement
    (6) statements -> . statements statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    if_else                        shift and go to state 74
    read                           shift and go to state 67
    return                         shift and go to state 66
    id                             shift and go to state 61
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 64
    print                          shift and go to state 65
    statements                     shift and go to state 140
    assign                         shift and go to state 75
    if                             shift and go to state 62

state 123

    (4) st -> statement .

    END             reduce using rule 4 (st -> statement .)
    BREAK           reduce using rule 4 (st -> statement .)
    SKIP            reduce using rule 4 (st -> statement .)
    PRINT           reduce using rule 4 (st -> statement .)
    IF              reduce using rule 4 (st -> statement .)
    WHILE           reduce using rule 4 (st -> statement .)
    READ            reduce using rule 4 (st -> statement .)
    WRITE           reduce using rule 4 (st -> statement .)
    RETURN          reduce using rule 4 (st -> statement .)
    ID              reduce using rule 4 (st -> statement .)
    ELSE            reduce using rule 4 (st -> statement .)


state 124

    (31) while -> WHILE cond DO st .

    END             reduce using rule 31 (while -> WHILE cond DO st .)
    BREAK           reduce using rule 31 (while -> WHILE cond DO st .)
    SKIP            reduce using rule 31 (while -> WHILE cond DO st .)
    PRINT           reduce using rule 31 (while -> WHILE cond DO st .)
    IF              reduce using rule 31 (while -> WHILE cond DO st .)
    WHILE           reduce using rule 31 (while -> WHILE cond DO st .)
    READ            reduce using rule 31 (while -> WHILE cond DO st .)
    WRITE           reduce using rule 31 (while -> WHILE cond DO st .)
    RETURN          reduce using rule 31 (while -> WHILE cond DO st .)
    ID              reduce using rule 31 (while -> WHILE cond DO st .)
    ELSE            reduce using rule 31 (while -> WHILE cond DO st .)


state 125

    (52) cond -> cond LAND cond .
    (52) cond -> cond . LAND cond
    (53) cond -> cond . LOR cond

    LAND            reduce using rule 52 (cond -> cond LAND cond .)
    LOR             reduce using rule 52 (cond -> cond LAND cond .)
    DO              reduce using rule 52 (cond -> cond LAND cond .)
    THEN            reduce using rule 52 (cond -> cond LAND cond .)
    RPAREN          reduce using rule 52 (cond -> cond LAND cond .)

  ! LAND            [ shift and go to state 102 ]
  ! LOR             [ shift and go to state 103 ]


state 126

    (53) cond -> cond LOR cond .
    (52) cond -> cond . LAND cond
    (53) cond -> cond . LOR cond

    LOR             reduce using rule 53 (cond -> cond LOR cond .)
    DO              reduce using rule 53 (cond -> cond LOR cond .)
    THEN            reduce using rule 53 (cond -> cond LOR cond .)
    RPAREN          reduce using rule 53 (cond -> cond LOR cond .)
    LAND            shift and go to state 102

  ! LAND            [ reduce using rule 53 (cond -> cond LOR cond .) ]
  ! LOR             [ shift and go to state 103 ]


state 127

    (55) cond -> LPAREN cond RPAREN .

    LAND            reduce using rule 55 (cond -> LPAREN cond RPAREN .)
    LOR             reduce using rule 55 (cond -> LPAREN cond RPAREN .)
    DO              reduce using rule 55 (cond -> LPAREN cond RPAREN .)
    THEN            reduce using rule 55 (cond -> LPAREN cond RPAREN .)
    RPAREN          reduce using rule 55 (cond -> LPAREN cond RPAREN .)


state 128

    (47) cond -> expression GT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LAND            reduce using rule 47 (cond -> expression GT expression .)
    LOR             reduce using rule 47 (cond -> expression GT expression .)
    DO              reduce using rule 47 (cond -> expression GT expression .)
    THEN            reduce using rule 47 (cond -> expression GT expression .)
    RPAREN          reduce using rule 47 (cond -> expression GT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 129

    (50) cond -> expression EQ expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LAND            reduce using rule 50 (cond -> expression EQ expression .)
    LOR             reduce using rule 50 (cond -> expression EQ expression .)
    DO              reduce using rule 50 (cond -> expression EQ expression .)
    THEN            reduce using rule 50 (cond -> expression EQ expression .)
    RPAREN          reduce using rule 50 (cond -> expression EQ expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 130

    (46) cond -> expression LT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LAND            reduce using rule 46 (cond -> expression LT expression .)
    LOR             reduce using rule 46 (cond -> expression LT expression .)
    DO              reduce using rule 46 (cond -> expression LT expression .)
    THEN            reduce using rule 46 (cond -> expression LT expression .)
    RPAREN          reduce using rule 46 (cond -> expression LT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 131

    (51) cond -> expression NE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LAND            reduce using rule 51 (cond -> expression NE expression .)
    LOR             reduce using rule 51 (cond -> expression NE expression .)
    DO              reduce using rule 51 (cond -> expression NE expression .)
    THEN            reduce using rule 51 (cond -> expression NE expression .)
    RPAREN          reduce using rule 51 (cond -> expression NE expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 132

    (49) cond -> expression GE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LAND            reduce using rule 49 (cond -> expression GE expression .)
    LOR             reduce using rule 49 (cond -> expression GE expression .)
    DO              reduce using rule 49 (cond -> expression GE expression .)
    THEN            reduce using rule 49 (cond -> expression GE expression .)
    RPAREN          reduce using rule 49 (cond -> expression GE expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 133

    (48) cond -> expression LE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . TIMES expression
    (45) expression -> expression . DIVIDE expression

    LAND            reduce using rule 48 (cond -> expression LE expression .)
    LOR             reduce using rule 48 (cond -> expression LE expression .)
    DO              reduce using rule 48 (cond -> expression LE expression .)
    THEN            reduce using rule 48 (cond -> expression LE expression .)
    RPAREN          reduce using rule 48 (cond -> expression LE expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 31
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 30


state 134

    (33) print -> PRINT LPAREN literal RPAREN . SEMI

    SEMI            shift and go to state 141


state 135

    (32) assign -> id ASSIGN expression SEMI .

    END             reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    BREAK           reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    SKIP            reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    PRINT           reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    IF              reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    WHILE           reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    READ            reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    WRITE           reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    RETURN          reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    ID              reduce using rule 32 (assign -> id ASSIGN expression SEMI .)
    ELSE            reduce using rule 32 (assign -> id ASSIGN expression SEMI .)


state 136

    (34) write -> WRITE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 142


state 137

    (29) if -> IF cond THEN st .
    (30) if_else -> IF cond THEN st . ELSE st

    END             reduce using rule 29 (if -> IF cond THEN st .)
    BREAK           reduce using rule 29 (if -> IF cond THEN st .)
    SKIP            reduce using rule 29 (if -> IF cond THEN st .)
    PRINT           reduce using rule 29 (if -> IF cond THEN st .)
    IF              reduce using rule 29 (if -> IF cond THEN st .)
    WHILE           reduce using rule 29 (if -> IF cond THEN st .)
    READ            reduce using rule 29 (if -> IF cond THEN st .)
    WRITE           reduce using rule 29 (if -> IF cond THEN st .)
    RETURN          reduce using rule 29 (if -> IF cond THEN st .)
    ID              reduce using rule 29 (if -> IF cond THEN st .)
    ELSE            shift and go to state 143

  ! ELSE            [ reduce using rule 29 (if -> IF cond THEN st .) ]


state 138

    (21) local -> id COLON typename LBRACKET literal . RBRACKET SEMI

    RBRACKET        shift and go to state 144


state 139

    (36) read -> READ LPAREN id RPAREN SEMI .

    END             reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    BREAK           reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    SKIP            reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    PRINT           reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    IF              reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    WHILE           reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    READ            reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    WRITE           reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    RETURN          reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    ID              reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)
    ELSE            reduce using rule 36 (read -> READ LPAREN id RPAREN SEMI .)


state 140

    (3) st -> BEGIN statements . END
    (6) statements -> statements . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    END             shift and go to state 145
    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    if_else                        shift and go to state 74
    read                           shift and go to state 67
    return                         shift and go to state 66
    id                             shift and go to state 61
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 82
    print                          shift and go to state 65
    assign                         shift and go to state 75
    if                             shift and go to state 62

state 141

    (33) print -> PRINT LPAREN literal RPAREN SEMI .

    END             reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    BREAK           reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    SKIP            reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    PRINT           reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    IF              reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    WHILE           reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    READ            reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    WRITE           reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    RETURN          reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    ID              reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)
    ELSE            reduce using rule 33 (print -> PRINT LPAREN literal RPAREN SEMI .)


state 142

    (34) write -> WRITE LPAREN expression RPAREN SEMI .

    END             reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    SKIP            reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    WRITE           reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 34 (write -> WRITE LPAREN expression RPAREN SEMI .)


state 143

    (30) if_else -> IF cond THEN st ELSE . st
    (3) st -> . BEGIN statements END
    (4) st -> . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK SEMI
    (13) statement -> . SKIP SEMI
    (14) statement -> . read
    (15) statement -> . write
    (16) statement -> . funcall SEMI
    (17) statement -> . return
    (32) assign -> . id ASSIGN expression SEMI
    (33) print -> . PRINT LPAREN literal RPAREN SEMI
    (29) if -> . IF cond THEN st
    (30) if_else -> . IF cond THEN st ELSE st
    (31) while -> . WHILE cond DO st
    (36) read -> . READ LPAREN id RPAREN SEMI
    (34) write -> . WRITE LPAREN expression RPAREN SEMI
    (37) funcall -> . id LPAREN exprlist RPAREN
    (35) return -> . RETURN expression SEMI
    (66) id -> . ID
    (67) id -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 122
    BREAK           shift and go to state 72
    SKIP            shift and go to state 68
    PRINT           shift and go to state 60
    IF              shift and go to state 70
    WHILE           shift and go to state 59
    READ            shift and go to state 57
    WRITE           shift and go to state 69
    RETURN          shift and go to state 71
    ID              shift and go to state 4

    funcall                        shift and go to state 58
    read                           shift and go to state 67
    id                             shift and go to state 61
    return                         shift and go to state 66
    st                             shift and go to state 146
    write                          shift and go to state 63
    while                          shift and go to state 73
    statement                      shift and go to state 123
    print                          shift and go to state 65
    if_else                        shift and go to state 74
    assign                         shift and go to state 75
    if                             shift and go to state 62

state 144

    (21) local -> id COLON typename LBRACKET literal RBRACKET . SEMI

    SEMI            shift and go to state 147


state 145

    (3) st -> BEGIN statements END .

    END             reduce using rule 3 (st -> BEGIN statements END .)
    BREAK           reduce using rule 3 (st -> BEGIN statements END .)
    SKIP            reduce using rule 3 (st -> BEGIN statements END .)
    PRINT           reduce using rule 3 (st -> BEGIN statements END .)
    IF              reduce using rule 3 (st -> BEGIN statements END .)
    WHILE           reduce using rule 3 (st -> BEGIN statements END .)
    READ            reduce using rule 3 (st -> BEGIN statements END .)
    WRITE           reduce using rule 3 (st -> BEGIN statements END .)
    RETURN          reduce using rule 3 (st -> BEGIN statements END .)
    ID              reduce using rule 3 (st -> BEGIN statements END .)
    ELSE            reduce using rule 3 (st -> BEGIN statements END .)


state 146

    (30) if_else -> IF cond THEN st ELSE st .

    END             reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    BREAK           reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    SKIP            reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    PRINT           reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    IF              reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    WHILE           reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    READ            reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    WRITE           reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    RETURN          reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    ID              reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)
    ELSE            reduce using rule 30 (if_else -> IF cond THEN st ELSE st .)


state 147

    (21) local -> id COLON typename LBRACKET literal RBRACKET SEMI .

    BEGIN           reduce using rule 21 (local -> id COLON typename LBRACKET literal RBRACKET SEMI .)
    ID              reduce using rule 21 (local -> id COLON typename LBRACKET literal RBRACKET SEMI .)

