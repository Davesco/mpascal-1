Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program function
Rule 2     program -> empty
Rule 3     statements -> statement
Rule 4     statements -> BEGIN st END
Rule 5     st -> st statement
Rule 6     st -> empty
Rule 7     statement -> assign
Rule 8     statement -> print
Rule 9     statement -> if
Rule 10    statement -> if_else
Rule 11    statement -> while
Rule 12    statement -> BREAK
Rule 13    locals -> locals ID COLON typename SEMI
Rule 14    locals -> empty
Rule 15    function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END
Rule 16    parameters -> parameters COMMA parm_declaration
Rule 17    parameters -> parm_declaration
Rule 18    parameters -> empty
Rule 19    parm_declaration -> ID typename
Rule 20    assign -> ID ASSIGN expression SEMI
Rule 21    print -> PRINT expression SEMI
Rule 22    expression -> PLUS expression
Rule 23    expression -> MINUS expression
Rule 24    expression -> LPAREN expression RPAREN
Rule 25    expression -> ID LPAREN exprlist RPAREN
Rule 26    expression -> ID LPAREN RPAREN
Rule 27    if -> IF cond THEN statements
Rule 28    if_else -> IF cond THEN statements ELSE statements
Rule 29    while -> WHILE cond statements
Rule 30    expression -> expression PLUS expression
Rule 31    expression -> expression MINUS expression
Rule 32    expression -> expression TIMES expression
Rule 33    expression -> expression DIVIDE expression
Rule 34    cond -> expression LT expression
Rule 35    cond -> expression GT expression
Rule 36    cond -> expression LE expression
Rule 37    cond -> expression GE expression
Rule 38    cond -> expression EQ expression
Rule 39    cond -> expression NE expression
Rule 40    cond -> cond LAND cond
Rule 41    cond -> cond LOR cond
Rule 42    cond -> LNOT cond
Rule 43    cond -> ID
Rule 44    cond -> literal
Rule 45    expression -> ID
Rule 46    expression -> literal
Rule 47    exprlist -> exprlist COMMA expression
Rule 48    exprlist -> expression
Rule 49    literal -> INTEGER
Rule 50    literal -> FLOAT
Rule 51    literal -> STRING
Rule 52    literal -> BOOLEAN
Rule 53    typename -> ID
Rule 54    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 20
BEGIN                : 4 15
BOOLEAN              : 52
BREAK                : 12
COLON                : 13
COMMA                : 16 47
DIVIDE               : 33
ELSE                 : 28
END                  : 4 15
EQ                   : 38
FLOAT                : 50
FUNC                 : 15
GE                   : 37
GT                   : 35
ID                   : 13 15 19 20 25 26 43 45 53
IF                   : 27 28
INTEGER              : 49
LAND                 : 40
LE                   : 36
LNOT                 : 42
LOR                  : 41
LPAREN               : 15 24 25 26
LT                   : 34
MINUS                : 23 31
NE                   : 39
PLUS                 : 22 30
PRINT                : 21
RPAREN               : 15 24 25 26
SEMI                 : 13 20 21
STRING               : 51
THEN                 : 27 28
TIMES                : 32
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

assign               : 7
cond                 : 27 28 29 40 40 41 41 42
empty                : 2 6 14 18
expression           : 20 21 22 23 24 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 47 48
exprlist             : 25 47
function             : 1
if                   : 9
if_else              : 10
literal              : 44 46
locals               : 13 15
parameters           : 15 16
parm_declaration     : 16 17
print                : 8
program              : 1 0
st                   : 4 5
statement            : 3 5
statements           : 15 27 28 28 29
typename             : 13 19
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program function
    (2) program -> . empty
    (54) empty -> .

    FUNC            reduce using rule 54 (empty -> .)
    $end            reduce using rule 54 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . function
    (15) function -> . FUNC ID LPAREN parameters RPAREN locals BEGIN statements END

    FUNC            shift and go to state 4

    function                       shift and go to state 3

state 2

    (2) program -> empty .

    FUNC            reduce using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)


state 3

    (1) program -> program function .

    FUNC            reduce using rule 1 (program -> program function .)
    $end            reduce using rule 1 (program -> program function .)


state 4

    (15) function -> FUNC . ID LPAREN parameters RPAREN locals BEGIN statements END

    ID              shift and go to state 5


state 5

    (15) function -> FUNC ID . LPAREN parameters RPAREN locals BEGIN statements END

    LPAREN          shift and go to state 6


state 6

    (15) function -> FUNC ID LPAREN . parameters RPAREN locals BEGIN statements END
    (16) parameters -> . parameters COMMA parm_declaration
    (17) parameters -> . parm_declaration
    (18) parameters -> . empty
    (19) parm_declaration -> . ID typename
    (54) empty -> .

    ID              shift and go to state 10
    RPAREN          reduce using rule 54 (empty -> .)
    COMMA           reduce using rule 54 (empty -> .)

    parm_declaration               shift and go to state 7
    parameters                     shift and go to state 8
    empty                          shift and go to state 9

state 7

    (17) parameters -> parm_declaration .

    RPAREN          reduce using rule 17 (parameters -> parm_declaration .)
    COMMA           reduce using rule 17 (parameters -> parm_declaration .)


state 8

    (15) function -> FUNC ID LPAREN parameters . RPAREN locals BEGIN statements END
    (16) parameters -> parameters . COMMA parm_declaration

    RPAREN          shift and go to state 11
    COMMA           shift and go to state 12


state 9

    (18) parameters -> empty .

    RPAREN          reduce using rule 18 (parameters -> empty .)
    COMMA           reduce using rule 18 (parameters -> empty .)


state 10

    (19) parm_declaration -> ID . typename
    (53) typename -> . ID

    ID              shift and go to state 14

    typename                       shift and go to state 13

state 11

    (15) function -> FUNC ID LPAREN parameters RPAREN . locals BEGIN statements END
    (13) locals -> . locals ID COLON typename SEMI
    (14) locals -> . empty
    (54) empty -> .

    BEGIN           reduce using rule 54 (empty -> .)
    ID              reduce using rule 54 (empty -> .)

    empty                          shift and go to state 15
    locals                         shift and go to state 16

state 12

    (16) parameters -> parameters COMMA . parm_declaration
    (19) parm_declaration -> . ID typename

    ID              shift and go to state 10

    parm_declaration               shift and go to state 17

state 13

    (19) parm_declaration -> ID typename .

    RPAREN          reduce using rule 19 (parm_declaration -> ID typename .)
    COMMA           reduce using rule 19 (parm_declaration -> ID typename .)


state 14

    (53) typename -> ID .

    SEMI            reduce using rule 53 (typename -> ID .)
    RPAREN          reduce using rule 53 (typename -> ID .)
    COMMA           reduce using rule 53 (typename -> ID .)


state 15

    (14) locals -> empty .

    BEGIN           reduce using rule 14 (locals -> empty .)
    ID              reduce using rule 14 (locals -> empty .)


state 16

    (15) function -> FUNC ID LPAREN parameters RPAREN locals . BEGIN statements END
    (13) locals -> locals . ID COLON typename SEMI

    BEGIN           shift and go to state 18
    ID              shift and go to state 19


state 17

    (16) parameters -> parameters COMMA parm_declaration .

    RPAREN          reduce using rule 16 (parameters -> parameters COMMA parm_declaration .)
    COMMA           reduce using rule 16 (parameters -> parameters COMMA parm_declaration .)


state 18

    (15) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN . statements END
    (3) statements -> . statement
    (4) statements -> . BEGIN st END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (20) assign -> . ID ASSIGN expression SEMI
    (21) print -> . PRINT expression SEMI
    (27) if -> . IF cond THEN statements
    (28) if_else -> . IF cond THEN statements ELSE statements
    (29) while -> . WHILE cond statements

    BEGIN           shift and go to state 25
    BREAK           shift and go to state 30
    ID              shift and go to state 28
    PRINT           shift and go to state 22
    IF              shift and go to state 29
    WHILE           shift and go to state 21

    statements                     shift and go to state 20
    while                          shift and go to state 31
    statement                      shift and go to state 26
    print                          shift and go to state 27
    if_else                        shift and go to state 23
    assign                         shift and go to state 32
    if                             shift and go to state 24

state 19

    (13) locals -> locals ID . COLON typename SEMI

    COLON           shift and go to state 33


state 20

    (15) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements . END

    END             shift and go to state 34


state 21

    (29) while -> WHILE . cond statements
    (34) cond -> . expression LT expression
    (35) cond -> . expression GT expression
    (36) cond -> . expression LE expression
    (37) cond -> . expression GE expression
    (38) cond -> . expression EQ expression
    (39) cond -> . expression NE expression
    (40) cond -> . cond LAND cond
    (41) cond -> . cond LOR cond
    (42) cond -> . LNOT cond
    (43) cond -> . ID
    (44) cond -> . literal
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    LNOT            shift and go to state 35
    ID              shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 40
    cond                           shift and go to state 36
    expression                     shift and go to state 46

state 22

    (21) print -> PRINT . expression SEMI
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 49

state 23

    (10) statement -> if_else .

    END             reduce using rule 10 (statement -> if_else .)
    BREAK           reduce using rule 10 (statement -> if_else .)
    ID              reduce using rule 10 (statement -> if_else .)
    PRINT           reduce using rule 10 (statement -> if_else .)
    IF              reduce using rule 10 (statement -> if_else .)
    WHILE           reduce using rule 10 (statement -> if_else .)
    ELSE            reduce using rule 10 (statement -> if_else .)


state 24

    (9) statement -> if .

    END             reduce using rule 9 (statement -> if .)
    BREAK           reduce using rule 9 (statement -> if .)
    ID              reduce using rule 9 (statement -> if .)
    PRINT           reduce using rule 9 (statement -> if .)
    IF              reduce using rule 9 (statement -> if .)
    WHILE           reduce using rule 9 (statement -> if .)
    ELSE            reduce using rule 9 (statement -> if .)


state 25

    (4) statements -> BEGIN . st END
    (5) st -> . st statement
    (6) st -> . empty
    (54) empty -> .

    END             reduce using rule 54 (empty -> .)
    BREAK           reduce using rule 54 (empty -> .)
    ID              reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)

    empty                          shift and go to state 50
    st                             shift and go to state 51

state 26

    (3) statements -> statement .

    END             reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)


state 27

    (8) statement -> print .

    END             reduce using rule 8 (statement -> print .)
    BREAK           reduce using rule 8 (statement -> print .)
    ID              reduce using rule 8 (statement -> print .)
    PRINT           reduce using rule 8 (statement -> print .)
    IF              reduce using rule 8 (statement -> print .)
    WHILE           reduce using rule 8 (statement -> print .)
    ELSE            reduce using rule 8 (statement -> print .)


state 28

    (20) assign -> ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 52


state 29

    (27) if -> IF . cond THEN statements
    (28) if_else -> IF . cond THEN statements ELSE statements
    (34) cond -> . expression LT expression
    (35) cond -> . expression GT expression
    (36) cond -> . expression LE expression
    (37) cond -> . expression GE expression
    (38) cond -> . expression EQ expression
    (39) cond -> . expression NE expression
    (40) cond -> . cond LAND cond
    (41) cond -> . cond LOR cond
    (42) cond -> . LNOT cond
    (43) cond -> . ID
    (44) cond -> . literal
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    LNOT            shift and go to state 35
    ID              shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 40
    cond                           shift and go to state 53
    expression                     shift and go to state 46

state 30

    (12) statement -> BREAK .

    END             reduce using rule 12 (statement -> BREAK .)
    BREAK           reduce using rule 12 (statement -> BREAK .)
    ID              reduce using rule 12 (statement -> BREAK .)
    PRINT           reduce using rule 12 (statement -> BREAK .)
    IF              reduce using rule 12 (statement -> BREAK .)
    WHILE           reduce using rule 12 (statement -> BREAK .)
    ELSE            reduce using rule 12 (statement -> BREAK .)


state 31

    (11) statement -> while .

    END             reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    ID              reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)


state 32

    (7) statement -> assign .

    END             reduce using rule 7 (statement -> assign .)
    BREAK           reduce using rule 7 (statement -> assign .)
    ID              reduce using rule 7 (statement -> assign .)
    PRINT           reduce using rule 7 (statement -> assign .)
    IF              reduce using rule 7 (statement -> assign .)
    WHILE           reduce using rule 7 (statement -> assign .)
    ELSE            reduce using rule 7 (statement -> assign .)


state 33

    (13) locals -> locals ID COLON . typename SEMI
    (53) typename -> . ID

    ID              shift and go to state 14

    typename                       shift and go to state 54

state 34

    (15) function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .

    FUNC            reduce using rule 15 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)
    $end            reduce using rule 15 (function -> FUNC ID LPAREN parameters RPAREN locals BEGIN statements END .)


state 35

    (42) cond -> LNOT . cond
    (34) cond -> . expression LT expression
    (35) cond -> . expression GT expression
    (36) cond -> . expression LE expression
    (37) cond -> . expression GE expression
    (38) cond -> . expression EQ expression
    (39) cond -> . expression NE expression
    (40) cond -> . cond LAND cond
    (41) cond -> . cond LOR cond
    (42) cond -> . LNOT cond
    (43) cond -> . ID
    (44) cond -> . literal
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    LNOT            shift and go to state 35
    ID              shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    expression                     shift and go to state 46
    literal                        shift and go to state 40
    cond                           shift and go to state 55

state 36

    (29) while -> WHILE cond . statements
    (40) cond -> cond . LAND cond
    (41) cond -> cond . LOR cond
    (3) statements -> . statement
    (4) statements -> . BEGIN st END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (20) assign -> . ID ASSIGN expression SEMI
    (21) print -> . PRINT expression SEMI
    (27) if -> . IF cond THEN statements
    (28) if_else -> . IF cond THEN statements ELSE statements
    (29) while -> . WHILE cond statements

    LAND            shift and go to state 58
    LOR             shift and go to state 57
    BEGIN           shift and go to state 25
    BREAK           shift and go to state 30
    ID              shift and go to state 28
    PRINT           shift and go to state 22
    IF              shift and go to state 29
    WHILE           shift and go to state 21

    statements                     shift and go to state 56
    while                          shift and go to state 31
    statement                      shift and go to state 26
    print                          shift and go to state 27
    if_else                        shift and go to state 23
    assign                         shift and go to state 32
    if                             shift and go to state 24

state 37

    (23) expression -> MINUS . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 59

state 38

    (51) literal -> STRING .

    PLUS            reduce using rule 51 (literal -> STRING .)
    MINUS           reduce using rule 51 (literal -> STRING .)
    TIMES           reduce using rule 51 (literal -> STRING .)
    DIVIDE          reduce using rule 51 (literal -> STRING .)
    LAND            reduce using rule 51 (literal -> STRING .)
    LOR             reduce using rule 51 (literal -> STRING .)
    BEGIN           reduce using rule 51 (literal -> STRING .)
    BREAK           reduce using rule 51 (literal -> STRING .)
    ID              reduce using rule 51 (literal -> STRING .)
    PRINT           reduce using rule 51 (literal -> STRING .)
    IF              reduce using rule 51 (literal -> STRING .)
    WHILE           reduce using rule 51 (literal -> STRING .)
    THEN            reduce using rule 51 (literal -> STRING .)
    SEMI            reduce using rule 51 (literal -> STRING .)
    LT              reduce using rule 51 (literal -> STRING .)
    GT              reduce using rule 51 (literal -> STRING .)
    LE              reduce using rule 51 (literal -> STRING .)
    GE              reduce using rule 51 (literal -> STRING .)
    EQ              reduce using rule 51 (literal -> STRING .)
    NE              reduce using rule 51 (literal -> STRING .)
    RPAREN          reduce using rule 51 (literal -> STRING .)
    COMMA           reduce using rule 51 (literal -> STRING .)


state 39

    (43) cond -> ID .
    (25) expression -> ID . LPAREN exprlist RPAREN
    (26) expression -> ID . LPAREN RPAREN
    (45) expression -> ID .

    LAND            reduce using rule 43 (cond -> ID .)
    LOR             reduce using rule 43 (cond -> ID .)
    BEGIN           reduce using rule 43 (cond -> ID .)
    BREAK           reduce using rule 43 (cond -> ID .)
    ID              reduce using rule 43 (cond -> ID .)
    PRINT           reduce using rule 43 (cond -> ID .)
    IF              reduce using rule 43 (cond -> ID .)
    WHILE           reduce using rule 43 (cond -> ID .)
    THEN            reduce using rule 43 (cond -> ID .)
    LPAREN          shift and go to state 60
    LT              reduce using rule 45 (expression -> ID .)
    GT              reduce using rule 45 (expression -> ID .)
    LE              reduce using rule 45 (expression -> ID .)
    GE              reduce using rule 45 (expression -> ID .)
    EQ              reduce using rule 45 (expression -> ID .)
    NE              reduce using rule 45 (expression -> ID .)
    PLUS            reduce using rule 45 (expression -> ID .)
    MINUS           reduce using rule 45 (expression -> ID .)
    TIMES           reduce using rule 45 (expression -> ID .)
    DIVIDE          reduce using rule 45 (expression -> ID .)


state 40

    (44) cond -> literal .
    (46) expression -> literal .

    LAND            reduce using rule 44 (cond -> literal .)
    LOR             reduce using rule 44 (cond -> literal .)
    BEGIN           reduce using rule 44 (cond -> literal .)
    BREAK           reduce using rule 44 (cond -> literal .)
    ID              reduce using rule 44 (cond -> literal .)
    PRINT           reduce using rule 44 (cond -> literal .)
    IF              reduce using rule 44 (cond -> literal .)
    WHILE           reduce using rule 44 (cond -> literal .)
    THEN            reduce using rule 44 (cond -> literal .)
    LT              reduce using rule 46 (expression -> literal .)
    GT              reduce using rule 46 (expression -> literal .)
    LE              reduce using rule 46 (expression -> literal .)
    GE              reduce using rule 46 (expression -> literal .)
    EQ              reduce using rule 46 (expression -> literal .)
    NE              reduce using rule 46 (expression -> literal .)
    PLUS            reduce using rule 46 (expression -> literal .)
    MINUS           reduce using rule 46 (expression -> literal .)
    TIMES           reduce using rule 46 (expression -> literal .)
    DIVIDE          reduce using rule 46 (expression -> literal .)


state 41

    (22) expression -> PLUS . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 61

state 42

    (49) literal -> INTEGER .

    PLUS            reduce using rule 49 (literal -> INTEGER .)
    MINUS           reduce using rule 49 (literal -> INTEGER .)
    TIMES           reduce using rule 49 (literal -> INTEGER .)
    DIVIDE          reduce using rule 49 (literal -> INTEGER .)
    LAND            reduce using rule 49 (literal -> INTEGER .)
    LOR             reduce using rule 49 (literal -> INTEGER .)
    BEGIN           reduce using rule 49 (literal -> INTEGER .)
    BREAK           reduce using rule 49 (literal -> INTEGER .)
    ID              reduce using rule 49 (literal -> INTEGER .)
    PRINT           reduce using rule 49 (literal -> INTEGER .)
    IF              reduce using rule 49 (literal -> INTEGER .)
    WHILE           reduce using rule 49 (literal -> INTEGER .)
    THEN            reduce using rule 49 (literal -> INTEGER .)
    SEMI            reduce using rule 49 (literal -> INTEGER .)
    LT              reduce using rule 49 (literal -> INTEGER .)
    GT              reduce using rule 49 (literal -> INTEGER .)
    LE              reduce using rule 49 (literal -> INTEGER .)
    GE              reduce using rule 49 (literal -> INTEGER .)
    EQ              reduce using rule 49 (literal -> INTEGER .)
    NE              reduce using rule 49 (literal -> INTEGER .)
    RPAREN          reduce using rule 49 (literal -> INTEGER .)
    COMMA           reduce using rule 49 (literal -> INTEGER .)


state 43

    (24) expression -> LPAREN . expression RPAREN
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 62

state 44

    (50) literal -> FLOAT .

    PLUS            reduce using rule 50 (literal -> FLOAT .)
    MINUS           reduce using rule 50 (literal -> FLOAT .)
    TIMES           reduce using rule 50 (literal -> FLOAT .)
    DIVIDE          reduce using rule 50 (literal -> FLOAT .)
    LAND            reduce using rule 50 (literal -> FLOAT .)
    LOR             reduce using rule 50 (literal -> FLOAT .)
    BEGIN           reduce using rule 50 (literal -> FLOAT .)
    BREAK           reduce using rule 50 (literal -> FLOAT .)
    ID              reduce using rule 50 (literal -> FLOAT .)
    PRINT           reduce using rule 50 (literal -> FLOAT .)
    IF              reduce using rule 50 (literal -> FLOAT .)
    WHILE           reduce using rule 50 (literal -> FLOAT .)
    THEN            reduce using rule 50 (literal -> FLOAT .)
    SEMI            reduce using rule 50 (literal -> FLOAT .)
    LT              reduce using rule 50 (literal -> FLOAT .)
    GT              reduce using rule 50 (literal -> FLOAT .)
    LE              reduce using rule 50 (literal -> FLOAT .)
    GE              reduce using rule 50 (literal -> FLOAT .)
    EQ              reduce using rule 50 (literal -> FLOAT .)
    NE              reduce using rule 50 (literal -> FLOAT .)
    RPAREN          reduce using rule 50 (literal -> FLOAT .)
    COMMA           reduce using rule 50 (literal -> FLOAT .)


state 45

    (52) literal -> BOOLEAN .

    PLUS            reduce using rule 52 (literal -> BOOLEAN .)
    MINUS           reduce using rule 52 (literal -> BOOLEAN .)
    TIMES           reduce using rule 52 (literal -> BOOLEAN .)
    DIVIDE          reduce using rule 52 (literal -> BOOLEAN .)
    LAND            reduce using rule 52 (literal -> BOOLEAN .)
    LOR             reduce using rule 52 (literal -> BOOLEAN .)
    BEGIN           reduce using rule 52 (literal -> BOOLEAN .)
    BREAK           reduce using rule 52 (literal -> BOOLEAN .)
    ID              reduce using rule 52 (literal -> BOOLEAN .)
    PRINT           reduce using rule 52 (literal -> BOOLEAN .)
    IF              reduce using rule 52 (literal -> BOOLEAN .)
    WHILE           reduce using rule 52 (literal -> BOOLEAN .)
    THEN            reduce using rule 52 (literal -> BOOLEAN .)
    SEMI            reduce using rule 52 (literal -> BOOLEAN .)
    LT              reduce using rule 52 (literal -> BOOLEAN .)
    GT              reduce using rule 52 (literal -> BOOLEAN .)
    LE              reduce using rule 52 (literal -> BOOLEAN .)
    GE              reduce using rule 52 (literal -> BOOLEAN .)
    EQ              reduce using rule 52 (literal -> BOOLEAN .)
    NE              reduce using rule 52 (literal -> BOOLEAN .)
    RPAREN          reduce using rule 52 (literal -> BOOLEAN .)
    COMMA           reduce using rule 52 (literal -> BOOLEAN .)


state 46

    (34) cond -> expression . LT expression
    (35) cond -> expression . GT expression
    (36) cond -> expression . LE expression
    (37) cond -> expression . GE expression
    (38) cond -> expression . EQ expression
    (39) cond -> expression . NE expression
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              shift and go to state 66
    GT              shift and go to state 63
    LE              shift and go to state 69
    GE              shift and go to state 68
    EQ              shift and go to state 65
    NE              shift and go to state 67
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 47

    (25) expression -> ID . LPAREN exprlist RPAREN
    (26) expression -> ID . LPAREN RPAREN
    (45) expression -> ID .

    LPAREN          shift and go to state 60
    PLUS            reduce using rule 45 (expression -> ID .)
    MINUS           reduce using rule 45 (expression -> ID .)
    TIMES           reduce using rule 45 (expression -> ID .)
    DIVIDE          reduce using rule 45 (expression -> ID .)
    LT              reduce using rule 45 (expression -> ID .)
    GT              reduce using rule 45 (expression -> ID .)
    LE              reduce using rule 45 (expression -> ID .)
    GE              reduce using rule 45 (expression -> ID .)
    EQ              reduce using rule 45 (expression -> ID .)
    NE              reduce using rule 45 (expression -> ID .)
    SEMI            reduce using rule 45 (expression -> ID .)
    RPAREN          reduce using rule 45 (expression -> ID .)
    COMMA           reduce using rule 45 (expression -> ID .)
    LAND            reduce using rule 45 (expression -> ID .)
    LOR             reduce using rule 45 (expression -> ID .)
    BEGIN           reduce using rule 45 (expression -> ID .)
    BREAK           reduce using rule 45 (expression -> ID .)
    ID              reduce using rule 45 (expression -> ID .)
    PRINT           reduce using rule 45 (expression -> ID .)
    IF              reduce using rule 45 (expression -> ID .)
    WHILE           reduce using rule 45 (expression -> ID .)
    THEN            reduce using rule 45 (expression -> ID .)


state 48

    (46) expression -> literal .

    PLUS            reduce using rule 46 (expression -> literal .)
    MINUS           reduce using rule 46 (expression -> literal .)
    TIMES           reduce using rule 46 (expression -> literal .)
    DIVIDE          reduce using rule 46 (expression -> literal .)
    LT              reduce using rule 46 (expression -> literal .)
    GT              reduce using rule 46 (expression -> literal .)
    LE              reduce using rule 46 (expression -> literal .)
    GE              reduce using rule 46 (expression -> literal .)
    EQ              reduce using rule 46 (expression -> literal .)
    NE              reduce using rule 46 (expression -> literal .)
    SEMI            reduce using rule 46 (expression -> literal .)
    RPAREN          reduce using rule 46 (expression -> literal .)
    COMMA           reduce using rule 46 (expression -> literal .)
    LAND            reduce using rule 46 (expression -> literal .)
    LOR             reduce using rule 46 (expression -> literal .)
    BEGIN           reduce using rule 46 (expression -> literal .)
    BREAK           reduce using rule 46 (expression -> literal .)
    ID              reduce using rule 46 (expression -> literal .)
    PRINT           reduce using rule 46 (expression -> literal .)
    IF              reduce using rule 46 (expression -> literal .)
    WHILE           reduce using rule 46 (expression -> literal .)
    THEN            reduce using rule 46 (expression -> literal .)


state 49

    (21) print -> PRINT expression . SEMI
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 73
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 50

    (6) st -> empty .

    END             reduce using rule 6 (st -> empty .)
    BREAK           reduce using rule 6 (st -> empty .)
    ID              reduce using rule 6 (st -> empty .)
    PRINT           reduce using rule 6 (st -> empty .)
    IF              reduce using rule 6 (st -> empty .)
    WHILE           reduce using rule 6 (st -> empty .)


state 51

    (4) statements -> BEGIN st . END
    (5) st -> st . statement
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (20) assign -> . ID ASSIGN expression SEMI
    (21) print -> . PRINT expression SEMI
    (27) if -> . IF cond THEN statements
    (28) if_else -> . IF cond THEN statements ELSE statements
    (29) while -> . WHILE cond statements

    END             shift and go to state 74
    BREAK           shift and go to state 30
    ID              shift and go to state 28
    PRINT           shift and go to state 22
    IF              shift and go to state 29
    WHILE           shift and go to state 21

    if_else                        shift and go to state 23
    while                          shift and go to state 31
    statement                      shift and go to state 75
    print                          shift and go to state 27
    assign                         shift and go to state 32
    if                             shift and go to state 24

state 52

    (20) assign -> ID ASSIGN . expression SEMI
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 76

state 53

    (27) if -> IF cond . THEN statements
    (28) if_else -> IF cond . THEN statements ELSE statements
    (40) cond -> cond . LAND cond
    (41) cond -> cond . LOR cond

    THEN            shift and go to state 77
    LAND            shift and go to state 58
    LOR             shift and go to state 57


state 54

    (13) locals -> locals ID COLON typename . SEMI

    SEMI            shift and go to state 78


state 55

    (42) cond -> LNOT cond .
    (40) cond -> cond . LAND cond
    (41) cond -> cond . LOR cond

    LAND            reduce using rule 42 (cond -> LNOT cond .)
    LOR             reduce using rule 42 (cond -> LNOT cond .)
    BEGIN           reduce using rule 42 (cond -> LNOT cond .)
    BREAK           reduce using rule 42 (cond -> LNOT cond .)
    ID              reduce using rule 42 (cond -> LNOT cond .)
    PRINT           reduce using rule 42 (cond -> LNOT cond .)
    IF              reduce using rule 42 (cond -> LNOT cond .)
    WHILE           reduce using rule 42 (cond -> LNOT cond .)
    THEN            reduce using rule 42 (cond -> LNOT cond .)

  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 57 ]


state 56

    (29) while -> WHILE cond statements .

    END             reduce using rule 29 (while -> WHILE cond statements .)
    BREAK           reduce using rule 29 (while -> WHILE cond statements .)
    ID              reduce using rule 29 (while -> WHILE cond statements .)
    PRINT           reduce using rule 29 (while -> WHILE cond statements .)
    IF              reduce using rule 29 (while -> WHILE cond statements .)
    WHILE           reduce using rule 29 (while -> WHILE cond statements .)
    ELSE            reduce using rule 29 (while -> WHILE cond statements .)


state 57

    (41) cond -> cond LOR . cond
    (34) cond -> . expression LT expression
    (35) cond -> . expression GT expression
    (36) cond -> . expression LE expression
    (37) cond -> . expression GE expression
    (38) cond -> . expression EQ expression
    (39) cond -> . expression NE expression
    (40) cond -> . cond LAND cond
    (41) cond -> . cond LOR cond
    (42) cond -> . LNOT cond
    (43) cond -> . ID
    (44) cond -> . literal
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    LNOT            shift and go to state 35
    ID              shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    expression                     shift and go to state 46
    literal                        shift and go to state 40
    cond                           shift and go to state 79

state 58

    (40) cond -> cond LAND . cond
    (34) cond -> . expression LT expression
    (35) cond -> . expression GT expression
    (36) cond -> . expression LE expression
    (37) cond -> . expression GE expression
    (38) cond -> . expression EQ expression
    (39) cond -> . expression NE expression
    (40) cond -> . cond LAND cond
    (41) cond -> . cond LOR cond
    (42) cond -> . LNOT cond
    (43) cond -> . ID
    (44) cond -> . literal
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    LNOT            shift and go to state 35
    ID              shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    expression                     shift and go to state 46
    literal                        shift and go to state 40
    cond                           shift and go to state 80

state 59

    (23) expression -> MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              reduce using rule 23 (expression -> MINUS expression .)
    GT              reduce using rule 23 (expression -> MINUS expression .)
    LE              reduce using rule 23 (expression -> MINUS expression .)
    GE              reduce using rule 23 (expression -> MINUS expression .)
    EQ              reduce using rule 23 (expression -> MINUS expression .)
    NE              reduce using rule 23 (expression -> MINUS expression .)
    PLUS            reduce using rule 23 (expression -> MINUS expression .)
    MINUS           reduce using rule 23 (expression -> MINUS expression .)
    TIMES           reduce using rule 23 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 23 (expression -> MINUS expression .)
    SEMI            reduce using rule 23 (expression -> MINUS expression .)
    RPAREN          reduce using rule 23 (expression -> MINUS expression .)
    COMMA           reduce using rule 23 (expression -> MINUS expression .)
    LAND            reduce using rule 23 (expression -> MINUS expression .)
    LOR             reduce using rule 23 (expression -> MINUS expression .)
    BEGIN           reduce using rule 23 (expression -> MINUS expression .)
    BREAK           reduce using rule 23 (expression -> MINUS expression .)
    ID              reduce using rule 23 (expression -> MINUS expression .)
    PRINT           reduce using rule 23 (expression -> MINUS expression .)
    IF              reduce using rule 23 (expression -> MINUS expression .)
    WHILE           reduce using rule 23 (expression -> MINUS expression .)
    THEN            reduce using rule 23 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 64 ]


state 60

    (25) expression -> ID LPAREN . exprlist RPAREN
    (26) expression -> ID LPAREN . RPAREN
    (47) exprlist -> . exprlist COMMA expression
    (48) exprlist -> . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    RPAREN          shift and go to state 81
    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 83
    exprlist                       shift and go to state 82

state 61

    (22) expression -> PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              reduce using rule 22 (expression -> PLUS expression .)
    GT              reduce using rule 22 (expression -> PLUS expression .)
    LE              reduce using rule 22 (expression -> PLUS expression .)
    GE              reduce using rule 22 (expression -> PLUS expression .)
    EQ              reduce using rule 22 (expression -> PLUS expression .)
    NE              reduce using rule 22 (expression -> PLUS expression .)
    PLUS            reduce using rule 22 (expression -> PLUS expression .)
    MINUS           reduce using rule 22 (expression -> PLUS expression .)
    TIMES           reduce using rule 22 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 22 (expression -> PLUS expression .)
    SEMI            reduce using rule 22 (expression -> PLUS expression .)
    RPAREN          reduce using rule 22 (expression -> PLUS expression .)
    COMMA           reduce using rule 22 (expression -> PLUS expression .)
    LAND            reduce using rule 22 (expression -> PLUS expression .)
    LOR             reduce using rule 22 (expression -> PLUS expression .)
    BEGIN           reduce using rule 22 (expression -> PLUS expression .)
    BREAK           reduce using rule 22 (expression -> PLUS expression .)
    ID              reduce using rule 22 (expression -> PLUS expression .)
    PRINT           reduce using rule 22 (expression -> PLUS expression .)
    IF              reduce using rule 22 (expression -> PLUS expression .)
    WHILE           reduce using rule 22 (expression -> PLUS expression .)
    THEN            reduce using rule 22 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 64 ]


state 62

    (24) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 63

    (35) cond -> expression GT . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 85

state 64

    (33) expression -> expression DIVIDE . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 86

state 65

    (38) cond -> expression EQ . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 87

state 66

    (34) cond -> expression LT . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 88

state 67

    (39) cond -> expression NE . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 89

state 68

    (37) cond -> expression GE . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 90

state 69

    (36) cond -> expression LE . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 91

state 70

    (30) expression -> expression PLUS . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 92

state 71

    (32) expression -> expression TIMES . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 93

state 72

    (31) expression -> expression MINUS . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 94

state 73

    (21) print -> PRINT expression SEMI .

    END             reduce using rule 21 (print -> PRINT expression SEMI .)
    BREAK           reduce using rule 21 (print -> PRINT expression SEMI .)
    ID              reduce using rule 21 (print -> PRINT expression SEMI .)
    PRINT           reduce using rule 21 (print -> PRINT expression SEMI .)
    IF              reduce using rule 21 (print -> PRINT expression SEMI .)
    WHILE           reduce using rule 21 (print -> PRINT expression SEMI .)
    ELSE            reduce using rule 21 (print -> PRINT expression SEMI .)


state 74

    (4) statements -> BEGIN st END .

    END             reduce using rule 4 (statements -> BEGIN st END .)
    BREAK           reduce using rule 4 (statements -> BEGIN st END .)
    ID              reduce using rule 4 (statements -> BEGIN st END .)
    PRINT           reduce using rule 4 (statements -> BEGIN st END .)
    IF              reduce using rule 4 (statements -> BEGIN st END .)
    WHILE           reduce using rule 4 (statements -> BEGIN st END .)
    ELSE            reduce using rule 4 (statements -> BEGIN st END .)


state 75

    (5) st -> st statement .

    END             reduce using rule 5 (st -> st statement .)
    BREAK           reduce using rule 5 (st -> st statement .)
    ID              reduce using rule 5 (st -> st statement .)
    PRINT           reduce using rule 5 (st -> st statement .)
    IF              reduce using rule 5 (st -> st statement .)
    WHILE           reduce using rule 5 (st -> st statement .)


state 76

    (20) assign -> ID ASSIGN expression . SEMI
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 95
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 77

    (27) if -> IF cond THEN . statements
    (28) if_else -> IF cond THEN . statements ELSE statements
    (3) statements -> . statement
    (4) statements -> . BEGIN st END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (20) assign -> . ID ASSIGN expression SEMI
    (21) print -> . PRINT expression SEMI
    (27) if -> . IF cond THEN statements
    (28) if_else -> . IF cond THEN statements ELSE statements
    (29) while -> . WHILE cond statements

    BEGIN           shift and go to state 25
    BREAK           shift and go to state 30
    ID              shift and go to state 28
    PRINT           shift and go to state 22
    IF              shift and go to state 29
    WHILE           shift and go to state 21

    statements                     shift and go to state 96
    while                          shift and go to state 31
    statement                      shift and go to state 26
    print                          shift and go to state 27
    if_else                        shift and go to state 23
    assign                         shift and go to state 32
    if                             shift and go to state 24

state 78

    (13) locals -> locals ID COLON typename SEMI .

    BEGIN           reduce using rule 13 (locals -> locals ID COLON typename SEMI .)
    ID              reduce using rule 13 (locals -> locals ID COLON typename SEMI .)


state 79

    (41) cond -> cond LOR cond .
    (40) cond -> cond . LAND cond
    (41) cond -> cond . LOR cond

    LOR             reduce using rule 41 (cond -> cond LOR cond .)
    BEGIN           reduce using rule 41 (cond -> cond LOR cond .)
    BREAK           reduce using rule 41 (cond -> cond LOR cond .)
    ID              reduce using rule 41 (cond -> cond LOR cond .)
    PRINT           reduce using rule 41 (cond -> cond LOR cond .)
    IF              reduce using rule 41 (cond -> cond LOR cond .)
    WHILE           reduce using rule 41 (cond -> cond LOR cond .)
    THEN            reduce using rule 41 (cond -> cond LOR cond .)
    LAND            shift and go to state 58

  ! LAND            [ reduce using rule 41 (cond -> cond LOR cond .) ]
  ! LOR             [ shift and go to state 57 ]


state 80

    (40) cond -> cond LAND cond .
    (40) cond -> cond . LAND cond
    (41) cond -> cond . LOR cond

    LAND            reduce using rule 40 (cond -> cond LAND cond .)
    LOR             reduce using rule 40 (cond -> cond LAND cond .)
    BEGIN           reduce using rule 40 (cond -> cond LAND cond .)
    BREAK           reduce using rule 40 (cond -> cond LAND cond .)
    ID              reduce using rule 40 (cond -> cond LAND cond .)
    PRINT           reduce using rule 40 (cond -> cond LAND cond .)
    IF              reduce using rule 40 (cond -> cond LAND cond .)
    WHILE           reduce using rule 40 (cond -> cond LAND cond .)
    THEN            reduce using rule 40 (cond -> cond LAND cond .)

  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 57 ]


state 81

    (26) expression -> ID LPAREN RPAREN .

    LT              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    GT              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    LE              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    GE              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    EQ              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    NE              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    LAND            reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    LOR             reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    BEGIN           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    ID              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    IF              reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 26 (expression -> ID LPAREN RPAREN .)
    THEN            reduce using rule 26 (expression -> ID LPAREN RPAREN .)


state 82

    (25) expression -> ID LPAREN exprlist . RPAREN
    (47) exprlist -> exprlist . COMMA expression

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 98


state 83

    (48) exprlist -> expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 48 (exprlist -> expression .)
    COMMA           reduce using rule 48 (exprlist -> expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 84

    (24) expression -> LPAREN expression RPAREN .

    LT              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 24 (expression -> LPAREN expression RPAREN .)


state 85

    (35) cond -> expression GT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LAND            reduce using rule 35 (cond -> expression GT expression .)
    LOR             reduce using rule 35 (cond -> expression GT expression .)
    BEGIN           reduce using rule 35 (cond -> expression GT expression .)
    BREAK           reduce using rule 35 (cond -> expression GT expression .)
    ID              reduce using rule 35 (cond -> expression GT expression .)
    PRINT           reduce using rule 35 (cond -> expression GT expression .)
    IF              reduce using rule 35 (cond -> expression GT expression .)
    WHILE           reduce using rule 35 (cond -> expression GT expression .)
    THEN            reduce using rule 35 (cond -> expression GT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 86

    (33) expression -> expression DIVIDE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 33 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 33 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 33 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 33 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 33 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 33 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 33 (expression -> expression DIVIDE expression .)
    BEGIN           reduce using rule 33 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 33 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 33 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 33 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 33 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 33 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 33 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 64 ]


state 87

    (38) cond -> expression EQ expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LAND            reduce using rule 38 (cond -> expression EQ expression .)
    LOR             reduce using rule 38 (cond -> expression EQ expression .)
    BEGIN           reduce using rule 38 (cond -> expression EQ expression .)
    BREAK           reduce using rule 38 (cond -> expression EQ expression .)
    ID              reduce using rule 38 (cond -> expression EQ expression .)
    PRINT           reduce using rule 38 (cond -> expression EQ expression .)
    IF              reduce using rule 38 (cond -> expression EQ expression .)
    WHILE           reduce using rule 38 (cond -> expression EQ expression .)
    THEN            reduce using rule 38 (cond -> expression EQ expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 88

    (34) cond -> expression LT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LAND            reduce using rule 34 (cond -> expression LT expression .)
    LOR             reduce using rule 34 (cond -> expression LT expression .)
    BEGIN           reduce using rule 34 (cond -> expression LT expression .)
    BREAK           reduce using rule 34 (cond -> expression LT expression .)
    ID              reduce using rule 34 (cond -> expression LT expression .)
    PRINT           reduce using rule 34 (cond -> expression LT expression .)
    IF              reduce using rule 34 (cond -> expression LT expression .)
    WHILE           reduce using rule 34 (cond -> expression LT expression .)
    THEN            reduce using rule 34 (cond -> expression LT expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 89

    (39) cond -> expression NE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LAND            reduce using rule 39 (cond -> expression NE expression .)
    LOR             reduce using rule 39 (cond -> expression NE expression .)
    BEGIN           reduce using rule 39 (cond -> expression NE expression .)
    BREAK           reduce using rule 39 (cond -> expression NE expression .)
    ID              reduce using rule 39 (cond -> expression NE expression .)
    PRINT           reduce using rule 39 (cond -> expression NE expression .)
    IF              reduce using rule 39 (cond -> expression NE expression .)
    WHILE           reduce using rule 39 (cond -> expression NE expression .)
    THEN            reduce using rule 39 (cond -> expression NE expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 90

    (37) cond -> expression GE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LAND            reduce using rule 37 (cond -> expression GE expression .)
    LOR             reduce using rule 37 (cond -> expression GE expression .)
    BEGIN           reduce using rule 37 (cond -> expression GE expression .)
    BREAK           reduce using rule 37 (cond -> expression GE expression .)
    ID              reduce using rule 37 (cond -> expression GE expression .)
    PRINT           reduce using rule 37 (cond -> expression GE expression .)
    IF              reduce using rule 37 (cond -> expression GE expression .)
    WHILE           reduce using rule 37 (cond -> expression GE expression .)
    THEN            reduce using rule 37 (cond -> expression GE expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 91

    (36) cond -> expression LE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LAND            reduce using rule 36 (cond -> expression LE expression .)
    LOR             reduce using rule 36 (cond -> expression LE expression .)
    BEGIN           reduce using rule 36 (cond -> expression LE expression .)
    BREAK           reduce using rule 36 (cond -> expression LE expression .)
    ID              reduce using rule 36 (cond -> expression LE expression .)
    PRINT           reduce using rule 36 (cond -> expression LE expression .)
    IF              reduce using rule 36 (cond -> expression LE expression .)
    WHILE           reduce using rule 36 (cond -> expression LE expression .)
    THEN            reduce using rule 36 (cond -> expression LE expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 92

    (30) expression -> expression PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              reduce using rule 30 (expression -> expression PLUS expression .)
    GT              reduce using rule 30 (expression -> expression PLUS expression .)
    LE              reduce using rule 30 (expression -> expression PLUS expression .)
    GE              reduce using rule 30 (expression -> expression PLUS expression .)
    EQ              reduce using rule 30 (expression -> expression PLUS expression .)
    NE              reduce using rule 30 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 30 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 30 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 30 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 30 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 30 (expression -> expression PLUS expression .)
    LAND            reduce using rule 30 (expression -> expression PLUS expression .)
    LOR             reduce using rule 30 (expression -> expression PLUS expression .)
    BEGIN           reduce using rule 30 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 30 (expression -> expression PLUS expression .)
    ID              reduce using rule 30 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 30 (expression -> expression PLUS expression .)
    IF              reduce using rule 30 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 30 (expression -> expression PLUS expression .)
    THEN            reduce using rule 30 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64

  ! TIMES           [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 72 ]


state 93

    (32) expression -> expression TIMES expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              reduce using rule 32 (expression -> expression TIMES expression .)
    GT              reduce using rule 32 (expression -> expression TIMES expression .)
    LE              reduce using rule 32 (expression -> expression TIMES expression .)
    GE              reduce using rule 32 (expression -> expression TIMES expression .)
    EQ              reduce using rule 32 (expression -> expression TIMES expression .)
    NE              reduce using rule 32 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 32 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 32 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 32 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 32 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 32 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 32 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 32 (expression -> expression TIMES expression .)
    LAND            reduce using rule 32 (expression -> expression TIMES expression .)
    LOR             reduce using rule 32 (expression -> expression TIMES expression .)
    BEGIN           reduce using rule 32 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 32 (expression -> expression TIMES expression .)
    ID              reduce using rule 32 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 32 (expression -> expression TIMES expression .)
    IF              reduce using rule 32 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 32 (expression -> expression TIMES expression .)
    THEN            reduce using rule 32 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 72 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 64 ]


state 94

    (31) expression -> expression MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    LT              reduce using rule 31 (expression -> expression MINUS expression .)
    GT              reduce using rule 31 (expression -> expression MINUS expression .)
    LE              reduce using rule 31 (expression -> expression MINUS expression .)
    GE              reduce using rule 31 (expression -> expression MINUS expression .)
    EQ              reduce using rule 31 (expression -> expression MINUS expression .)
    NE              reduce using rule 31 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 31 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 31 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 31 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 31 (expression -> expression MINUS expression .)
    LAND            reduce using rule 31 (expression -> expression MINUS expression .)
    LOR             reduce using rule 31 (expression -> expression MINUS expression .)
    BEGIN           reduce using rule 31 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 31 (expression -> expression MINUS expression .)
    ID              reduce using rule 31 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 31 (expression -> expression MINUS expression .)
    IF              reduce using rule 31 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 31 (expression -> expression MINUS expression .)
    THEN            reduce using rule 31 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64

  ! TIMES           [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 72 ]


state 95

    (20) assign -> ID ASSIGN expression SEMI .

    END             reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)
    BREAK           reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)
    ID              reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)
    PRINT           reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)
    IF              reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)
    WHILE           reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)
    ELSE            reduce using rule 20 (assign -> ID ASSIGN expression SEMI .)


state 96

    (27) if -> IF cond THEN statements .
    (28) if_else -> IF cond THEN statements . ELSE statements

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 27 (if -> IF cond THEN statements .)
    BREAK           reduce using rule 27 (if -> IF cond THEN statements .)
    ID              reduce using rule 27 (if -> IF cond THEN statements .)
    PRINT           reduce using rule 27 (if -> IF cond THEN statements .)
    IF              reduce using rule 27 (if -> IF cond THEN statements .)
    WHILE           reduce using rule 27 (if -> IF cond THEN statements .)
    ELSE            shift and go to state 99

  ! ELSE            [ reduce using rule 27 (if -> IF cond THEN statements .) ]


state 97

    (25) expression -> ID LPAREN exprlist RPAREN .

    LT              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    LE              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    GE              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    NE              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    LAND            reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    LOR             reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    BEGIN           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    BREAK           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    PRINT           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    WHILE           reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)
    THEN            reduce using rule 25 (expression -> ID LPAREN exprlist RPAREN .)


state 98

    (47) exprlist -> exprlist COMMA . expression
    (22) expression -> . PLUS expression
    (23) expression -> . MINUS expression
    (24) expression -> . LPAREN expression RPAREN
    (25) expression -> . ID LPAREN exprlist RPAREN
    (26) expression -> . ID LPAREN RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (45) expression -> . ID
    (46) expression -> . literal
    (49) literal -> . INTEGER
    (50) literal -> . FLOAT
    (51) literal -> . STRING
    (52) literal -> . BOOLEAN

    PLUS            shift and go to state 41
    MINUS           shift and go to state 37
    LPAREN          shift and go to state 43
    ID              shift and go to state 47
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 38
    BOOLEAN         shift and go to state 45

    literal                        shift and go to state 48
    expression                     shift and go to state 100

state 99

    (28) if_else -> IF cond THEN statements ELSE . statements
    (3) statements -> . statement
    (4) statements -> . BEGIN st END
    (7) statement -> . assign
    (8) statement -> . print
    (9) statement -> . if
    (10) statement -> . if_else
    (11) statement -> . while
    (12) statement -> . BREAK
    (20) assign -> . ID ASSIGN expression SEMI
    (21) print -> . PRINT expression SEMI
    (27) if -> . IF cond THEN statements
    (28) if_else -> . IF cond THEN statements ELSE statements
    (29) while -> . WHILE cond statements

    BEGIN           shift and go to state 25
    BREAK           shift and go to state 30
    ID              shift and go to state 28
    PRINT           shift and go to state 22
    IF              shift and go to state 29
    WHILE           shift and go to state 21

    statements                     shift and go to state 101
    while                          shift and go to state 31
    statement                      shift and go to state 26
    print                          shift and go to state 27
    if_else                        shift and go to state 23
    assign                         shift and go to state 32
    if                             shift and go to state 24

state 100

    (47) exprlist -> exprlist COMMA expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 47 (exprlist -> exprlist COMMA expression .)
    COMMA           reduce using rule 47 (exprlist -> exprlist COMMA expression .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 72
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 64


state 101

    (28) if_else -> IF cond THEN statements ELSE statements .

    END             reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)
    BREAK           reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)
    ID              reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)
    PRINT           reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)
    IF              reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)
    WHILE           reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)
    ELSE            reduce using rule 28 (if_else -> IF cond THEN statements ELSE statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 96 resolved as shift
